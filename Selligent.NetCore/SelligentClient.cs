//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.1.6.0 (NJsonSchema v10.0.28.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."

namespace Selligent.NetCore
{
    using System = global::System;
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.1.6.0 (NJsonSchema v10.0.28.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class MediumClient : BaseSelligentClient
    {
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
    
        public MediumClient(SelligentClientConfiguration configuration) : base(configuration)
        {
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() => 
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
        }
    
        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Use this endpoint to get list of all medium configurations.</summary>
        /// <param name="filter">Optional parameter to filter mediums by medium type (Ftp, Url or Repository).</param>
        /// <param name="search">Optional parameter to search mediums by name or description.</param>
        /// <param name="skip">Optional parameter to specify index to start picking medium items from.</param>
        /// <param name="take">Optional parameter to specify count for the number of medium items to be taken.</param>
        /// <returns>This endpoint will retrieve list of mediums. Check “Model” for the object - structure.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Mediums> GetMediumsAsync(string filter = null, string search = null, int? skip = null, int? take = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/mediums?");
            if (filter != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("filter") + "=").Append(System.Uri.EscapeDataString(ConvertToString(filter, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (search != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("search") + "=").Append(System.Uri.EscapeDataString(ConvertToString(search, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (skip != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("skip") + "=").Append(System.Uri.EscapeDataString(ConvertToString(skip, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (take != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("take") + "=").Append(System.Uri.EscapeDataString(ConvertToString(take, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Mediums>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Retrieve_all_mediums_failed_response>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Retrieve_all_mediums_failed_response>("Represents a response for an unsuccessful retrieval in case of invalid medium type.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Mediums);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Use this endpoint to retrieve a medium (Ftp/Url/Repository) details.</summary>
        /// <param name="api_name">Parameter to specify medium API name.</param>
        /// <returns>This endpoint will retrieve the medium details with the given api name.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Retrieve_medium_success_response> GetMediumAsync(string api_name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (api_name == null)
                throw new System.ArgumentNullException("api_name");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/mediums/{api_name}");
            urlBuilder_.Replace("{api_name}", System.Uri.EscapeDataString(ConvertToString(api_name, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Retrieve_medium_success_response>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Retrieve_medium_success_response);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Use this endpoint to delete a medium.</summary>
        /// <param name="api_name">API name of the medium to be deleted</param>
        /// <returns>This endpoint will delete the medium with the given api name.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Delete_medium_success_response> DeleteMediumAsync(string api_name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (api_name == null)
                throw new System.ArgumentNullException("api_name");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/mediums/{api_name}");
            urlBuilder_.Replace("{api_name}", System.Uri.EscapeDataString(ConvertToString(api_name, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Delete_medium_success_response>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Delete_medium_success_response);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Use this endpoint to create a FTP medium.</summary>
        /// <param name="model">The model object consists medium details that are to used to create the medium</param>
        /// <returns>This endpoint will create a new medium of FTP type. This medium will contain the parameters, specifically for the chosen medium type. Check “Model” for the object - structure.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Create_medium_success_example_response> CreateFtpMediumAsync(CreateFtpMediumApiRequestModel model, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/mediums/ftp");
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(model, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Create_medium_success_example_response>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Create_medium_failed_example_response>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Create_medium_failed_example_response>("Medium Not Created", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Create_medium_success_example_response);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Use this endpoint to update a FTP medium.</summary>
        /// <param name="api_name">API name of the FTP medium to be updated</param>
        /// <param name="model">The model object consists medium details that are to used to update the FTP medium</param>
        /// <returns>This endpoint will update a medium of FTP type. This medium will contain the parameters, specifically for the chosen medium type. Check “Model” for the object - structure.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Update_medium_success_response> UpdateFtpMediumAsync(string api_name, UpdateFtpMediumApiRequestModel model, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (api_name == null)
                throw new System.ArgumentNullException("api_name");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/mediums/ftp/{api_name}");
            urlBuilder_.Replace("{api_name}", System.Uri.EscapeDataString(ConvertToString(api_name, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(model, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Update_medium_success_response>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Update_medium_failed_response>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Update_medium_failed_response>("Medium Not Updated", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Update_medium_success_response);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Use this endpoint to create a Repository medium.</summary>
        /// <param name="model">The model object consists medium details that are to used to create the medium</param>
        /// <returns>This endpoint will create a new medium of Repository type. This medium will contain the parameters, specifically for the chosen medium type. Check “Model” for the object - structure.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Create_medium_success_example_response> CreateRepositoryMediumAsync(CreateRepositoryMediumApiRequestModel model, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/mediums/repository");
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(model, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Create_medium_success_example_response>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Create_medium_failed_example_response>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Create_medium_failed_example_response>("Medium Not Created", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Create_medium_success_example_response);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Use this endpoint to update a Repository medium.</summary>
        /// <param name="api_name">API name of the Repository medium to be updated</param>
        /// <param name="model">The model object consists medium details that are to used to update the Repository medium</param>
        /// <returns>This endpoint will update a medium of Repository type. This medium will contain the parameters, specifically for the chosen medium type. Check “Model” for the object - structure.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Update_medium_success_response> UpdateRepositoryMediumAsync(string api_name, UpdateRepositoryMediumApiRequestModel model, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (api_name == null)
                throw new System.ArgumentNullException("api_name");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/mediums/repository/{api_name}");
            urlBuilder_.Replace("{api_name}", System.Uri.EscapeDataString(ConvertToString(api_name, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(model, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Update_medium_success_response>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Update_medium_failed_response>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Update_medium_failed_response>("Medium Not Updated", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Update_medium_success_response);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Use this endpoint to create a URL medium.</summary>
        /// <param name="model">The model object consists medium details that are to used to create the medium</param>
        /// <returns>This endpoint will create a new medium of URL type. This medium will contain the parameters, specifically for the chosen medium type. Check “Model” for the object - structure.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Create_medium_success_example_response> CreateUrlMediumAsync(CreateUrlMediumApiRequestModel model, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/mediums/url");
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(model, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Create_medium_success_example_response>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Create_medium_failed_example_response>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Create_medium_failed_example_response>("Medium Not Created", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Create_medium_success_example_response);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Use this endpoint to update a URL medium.</summary>
        /// <param name="api_name">API name of the URL medium to be updated</param>
        /// <param name="model">The model object consists medium details that are to used to update the URL medium</param>
        /// <returns>This endpoint will update a medium of URL type. This medium will contain the parameters, specifically for the chosen medium type. Check “Model” for the object - structure.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Update_medium_success_response> UpdateUrlMediumAsync(string api_name, UpdateUrlMediumApiRequestModel model, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (api_name == null)
                throw new System.ArgumentNullException("api_name");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/mediums/url/{api_name}");
            urlBuilder_.Replace("{api_name}", System.Uri.EscapeDataString(ConvertToString(api_name, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(model, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Update_medium_success_response>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Update_medium_failed_response>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Update_medium_failed_response>("Medium Not Updated", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Update_medium_success_response);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Use this endpoint to get list of all mediums mapped to an organization.</summary>
        /// <param name="filter">Optional parameter to filter mediums by medium type (Ftp, Url or Repository).</param>
        /// <param name="search">Optional parameter to search mediums by name or description.</param>
        /// <param name="skip">Optional parameter to specify index to start picking medium items from.</param>
        /// <param name="take">Optional parameter to specify count for the number of medium items to be taken.</param>
        /// <returns>This endpoint will retrieve list of mediums of an organization. Check “Model” for the object - structure.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Mediums> GetOrganizationMediumsAsync(string organization, string filter = null, string search = null, int? skip = null, int? take = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (organization == null)
                throw new System.ArgumentNullException("organization");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/organizations/{organization}/mediums?");
            urlBuilder_.Replace("{organization}", System.Uri.EscapeDataString(ConvertToString(organization, System.Globalization.CultureInfo.InvariantCulture)));
            if (filter != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("filter") + "=").Append(System.Uri.EscapeDataString(ConvertToString(filter, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (search != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("search") + "=").Append(System.Uri.EscapeDataString(ConvertToString(search, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (skip != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("skip") + "=").Append(System.Uri.EscapeDataString(ConvertToString(skip, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (take != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("take") + "=").Append(System.Uri.EscapeDataString(ConvertToString(take, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Mediums>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Retrieve_all_mediums_failed_response>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Retrieve_all_mediums_failed_response>("Represents a response for an unsuccessful retrieval in case of invalid medium type.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Mediums);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }
    
            public T Object { get; }
    
            public string Text { get; }
        }
    
        public bool ReadResponseAsString { get; set; }
        
        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }
        
            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }
    
        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value is System.Enum)
            {
                string name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }
                }
            }
            else if (value is bool) {
                return System.Convert.ToString(value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value != null && value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }
        
            return System.Convert.ToString(value, cultureInfo);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.1.6.0 (NJsonSchema v10.0.28.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class NotificationGroupClient : BaseSelligentClient
    {
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
    
        public NotificationGroupClient(SelligentClientConfiguration configuration) : base(configuration)
        {
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() => 
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
        }
    
        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Use this endpoint to retrieve all the notification groups.</summary>
        /// <returns>This endpoint will return a list of notification groups.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Retrieve_all_notification_groups_success_example_response> RetrieveNotificationGroupsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/notificationgroups");
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Retrieve_all_notification_groups_success_example_response>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Retrieve_all_notification_groups_success_example_response);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Use this endpoint to create a new notification group.</summary>
        /// <param name="model">The model object consists notification group details that are to used to create the notification group</param>
        /// <returns>This endpoint will create a new notification group.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Create_notification_group_success_example_response> CreateNotificationGroupAsync(CreateNotificationGroupApiRequestModel model, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/notificationgroups");
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(model, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Create_notification_group_success_example_response>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Create_notification_group_failed_example_response>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Create_notification_group_failed_example_response>("Notification group not created.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Create_notification_group_success_example_response);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Use this endpoint to update the properties of the notification group.</summary>
        /// <param name="api_name">API name of the notification group to be updated</param>
        /// <param name="model">The model object consists notification group details that are to used to update the notification group</param>
        /// <returns>This endpoint will update the properties of the notification group.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Update_notification_group_success_example_response> UpdateNotificationGroupAsync(string api_name, UpdateNotificationGroupApiRequestModel model, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (api_name == null)
                throw new System.ArgumentNullException("api_name");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/notificationgroups/{api_name}");
            urlBuilder_.Replace("{api_name}", System.Uri.EscapeDataString(ConvertToString(api_name, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(model, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Update_notification_group_success_example_response>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Update_notification_group_failed_example_response>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Update_notification_group_failed_example_response>("Notification group not updated.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Update_notification_group_success_example_response);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Use this endpoint to delete a notification group.</summary>
        /// <param name="api_name">API name of the notification group to be deleted</param>
        /// <returns>This endpoint will delete the notification group with the given api name.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Delete_notification_group_success_response> DeleteNotificationGroupAsync(string api_name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (api_name == null)
                throw new System.ArgumentNullException("api_name");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/notificationgroups/{api_name}");
            urlBuilder_.Replace("{api_name}", System.Uri.EscapeDataString(ConvertToString(api_name, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Delete_notification_group_success_response>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Delete_notification_group_failed_response>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Delete_notification_group_failed_response>("Represents a response for an unsuccessful delete of notification group.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Delete_notification_group_success_response);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }
    
            public T Object { get; }
    
            public string Text { get; }
        }
    
        public bool ReadResponseAsString { get; set; }
        
        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }
        
            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }
    
        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value is System.Enum)
            {
                string name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }
                }
            }
            else if (value is bool) {
                return System.Convert.ToString(value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value != null && value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }
        
            return System.Convert.ToString(value, cultureInfo);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.1.6.0 (NJsonSchema v10.0.28.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class OrganizationClient : BaseSelligentClient
    {
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
    
        public OrganizationClient(SelligentClientConfiguration configuration) : base(configuration)
        {
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() => 
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
        }
    
        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Use this endpoint to retrieve the details of this organization set up on your instance of Selligent Marketing Cloud.</summary>
        /// <returns>This endpoint will return an object with the main properties of the organization. Check “Model” for the object - structure.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Organization> GetAsync(string organization, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (organization == null)
                throw new System.ArgumentNullException("organization");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/organizations/{organization}");
            urlBuilder_.Replace("{organization}", System.Uri.EscapeDataString(ConvertToString(organization, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Organization>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Organization);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }
    
            public T Object { get; }
    
            public string Text { get; }
        }
    
        public bool ReadResponseAsString { get; set; }
        
        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }
        
            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }
    
        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value is System.Enum)
            {
                string name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }
                }
            }
            else if (value is bool) {
                return System.Convert.ToString(value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value != null && value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }
        
            return System.Convert.ToString(value, cultureInfo);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.1.6.0 (NJsonSchema v10.0.28.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ContentClient : BaseSelligentClient
    {
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
    
        public ContentClient(SelligentClientConfiguration configuration) : base(configuration)
        {
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() => 
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
        }
    
        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>API to check whether content already exists.</summary>
        /// <param name="api_name">Parameter represents API name of the content.</param>
        /// <returns>This endpoint will return a content-object defined on the given organization with the given api-name. Check “Model” for the object - structure.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ContentDetailsResponseModel> GetContentAsync(string api_name, string organization, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (api_name == null)
                throw new System.ArgumentNullException("api_name");
    
            if (organization == null)
                throw new System.ArgumentNullException("organization");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/organizations/{organization}/content/{api_name}");
            urlBuilder_.Replace("{api_name}", System.Uri.EscapeDataString(ConvertToString(api_name, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{organization}", System.Uri.EscapeDataString(ConvertToString(organization, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ContentDetailsResponseModel>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(ContentDetailsResponseModel);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>API to delete existing content.</summary>
        /// <param name="api_name">Parameter represents API name of the content.</param>
        /// <returns>This endpoint will delete the content with the given api name.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Delete_content_success_response> DeleteAsync(string api_name, string organization, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (api_name == null)
                throw new System.ArgumentNullException("api_name");
    
            if (organization == null)
                throw new System.ArgumentNullException("organization");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/organizations/{organization}/content/{api_name}");
            urlBuilder_.Replace("{api_name}", System.Uri.EscapeDataString(ConvertToString(api_name, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{organization}", System.Uri.EscapeDataString(ConvertToString(organization, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Delete_content_success_response>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Delete_content_success_response);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>API to create simple (only html) single language message of email.</summary>
        /// <param name="model">This CreateEmailMessageModel model have information related to email message</param>
        /// <param name="publish">Parameter indicating whether the content should be published. [Default: false]</param>
        /// <returns>Email message content created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Create_email_message_content_success_response> CreateEmailContentAsync(CreateEmailMessageModel model, string organization, bool? publish = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (organization == null)
                throw new System.ArgumentNullException("organization");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/organizations/{organization}/content/email?");
            urlBuilder_.Replace("{organization}", System.Uri.EscapeDataString(ConvertToString(organization, System.Globalization.CultureInfo.InvariantCulture)));
            if (publish != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("publish") + "=").Append(System.Uri.EscapeDataString(ConvertToString(publish, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(model, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Create_email_message_content_success_response>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Create_email_message_content_failed_response>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Create_email_message_content_failed_response>("Email message content Not created", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Create_email_message_content_success_response);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>API to create Mobile push message for creating content.</summary>
        /// <param name="model">This CreateMobileMessageModel model have information related to Mobile push content</param>
        /// <param name="publish">Parameter indicating whether the content should be published. [Default: false]</param>
        /// <returns>Mobile message content created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Create_mobile_message_content_success_response> CreateContentAsync(CreateMobileMessageModel model, string organization, bool? publish = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (organization == null)
                throw new System.ArgumentNullException("organization");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/organizations/{organization}/content/mobile?");
            urlBuilder_.Replace("{organization}", System.Uri.EscapeDataString(ConvertToString(organization, System.Globalization.CultureInfo.InvariantCulture)));
            if (publish != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("publish") + "=").Append(System.Uri.EscapeDataString(ConvertToString(publish, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(model, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "201") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Create_mobile_message_content_success_response>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Create_mobile_message_content_failed_response>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Create_mobile_message_content_failed_response>("Mobile message content Not created", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Create_mobile_message_content_success_response);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>API to create simple (only html) single language page content.</summary>
        /// <param name="model">This CreatePageModel model have information related to Mobile push content</param>
        /// <param name="publish">Parameter indicating whether the content should be published. [Default: false]</param>
        /// <returns>Page content created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Create_page_content_success_response> CreateContent2Async(CreatePageModel model, string organization, bool? publish = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (organization == null)
                throw new System.ArgumentNullException("organization");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/organizations/{organization}/content/page?");
            urlBuilder_.Replace("{organization}", System.Uri.EscapeDataString(ConvertToString(organization, System.Globalization.CultureInfo.InvariantCulture)));
            if (publish != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("publish") + "=").Append(System.Uri.EscapeDataString(ConvertToString(publish, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(model, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "201") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Create_page_content_success_response>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Create_page_content_failed_response>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Create_page_content_failed_response>("Page content Not created", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Create_page_content_success_response);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>API to create a SMS Content</summary>
        /// <param name="model">This CreateSMSModel model have information related to SMS content</param>
        /// <param name="publish">Parameter indicating whether the content should be published. [Default: false]</param>
        /// <returns>Sms content created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Create_sms_content_success_response> CreateContent3Async(CreateSmsModel model, string organization, bool? publish = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (organization == null)
                throw new System.ArgumentNullException("organization");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/organizations/{organization}/content/sms?");
            urlBuilder_.Replace("{organization}", System.Uri.EscapeDataString(ConvertToString(organization, System.Globalization.CultureInfo.InvariantCulture)));
            if (publish != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("publish") + "=").Append(System.Uri.EscapeDataString(ConvertToString(publish, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(model, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "201") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Create_sms_content_success_response>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Create_sms_content_failed_response>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Create_sms_content_failed_response>("Sms content Not created", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Create_sms_content_success_response);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }
    
            public T Object { get; }
    
            public string Text { get; }
        }
    
        public bool ReadResponseAsString { get; set; }
        
        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }
        
            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }
    
        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value is System.Enum)
            {
                string name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }
                }
            }
            else if (value is bool) {
                return System.Convert.ToString(value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value != null && value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }
        
            return System.Convert.ToString(value, cultureInfo);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.1.6.0 (NJsonSchema v10.0.28.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class DataExportClient : BaseSelligentClient
    {
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
    
        public DataExportClient(SelligentClientConfiguration configuration) : base(configuration)
        {
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() => 
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
        }
    
        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Use this endpoint to delete a data export.</summary>
        /// <param name="api_name">API name of the data export to be deleted</param>
        /// <returns>This endpoint will delete the data export with the given api name.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Delete_data_export_success_response> DeleteDataExportAsync(string api_name, string organization, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (api_name == null)
                throw new System.ArgumentNullException("api_name");
    
            if (organization == null)
                throw new System.ArgumentNullException("organization");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/organizations/{organization}/exports/{api_name}");
            urlBuilder_.Replace("{api_name}", System.Uri.EscapeDataString(ConvertToString(api_name, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{organization}", System.Uri.EscapeDataString(ConvertToString(organization, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Delete_data_export_success_response>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Delete_data_export_failed_response>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Delete_data_export_failed_response>("Represents a response for an unsuccessful delete of data export.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Delete_data_export_success_response);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }
    
            public T Object { get; }
    
            public string Text { get; }
        }
    
        public bool ReadResponseAsString { get; set; }
        
        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }
        
            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }
    
        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value is System.Enum)
            {
                string name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }
                }
            }
            else if (value is bool) {
                return System.Convert.ToString(value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value != null && value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }
        
            return System.Convert.ToString(value, cultureInfo);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.1.6.0 (NJsonSchema v10.0.28.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class DataImportClient : BaseSelligentClient
    {
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
    
        public DataImportClient(SelligentClientConfiguration configuration) : base(configuration)
        {
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() => 
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
        }
    
        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Use this endpoint to delete a data import.</summary>
        /// <param name="api_name">API name of the data import to be deleted</param>
        /// <returns>This endpoint will delete the data import with the given api name.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Delete_data_import_success_response> DeleteDataImportAsync(string api_name, string organization, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (api_name == null)
                throw new System.ArgumentNullException("api_name");
    
            if (organization == null)
                throw new System.ArgumentNullException("organization");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/organizations/{organization}/imports/{api_name}");
            urlBuilder_.Replace("{api_name}", System.Uri.EscapeDataString(ConvertToString(api_name, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{organization}", System.Uri.EscapeDataString(ConvertToString(organization, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Delete_data_import_success_response>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Delete_data_import_failed_response>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Delete_data_import_failed_response>("Represents a response for an unsuccessful delete of data import.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Delete_data_import_success_response);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }
    
            public T Object { get; }
    
            public string Text { get; }
        }
    
        public bool ReadResponseAsString { get; set; }
        
        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }
        
            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }
    
        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value is System.Enum)
            {
                string name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }
                }
            }
            else if (value is bool) {
                return System.Convert.ToString(value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value != null && value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }
        
            return System.Convert.ToString(value, cultureInfo);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.1.6.0 (NJsonSchema v10.0.28.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class JourneyClient : BaseSelligentClient
    {
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
    
        public JourneyClient(SelligentClientConfiguration configuration) : base(configuration)
        {
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() => 
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
        }
    
        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Use this endpoint to retrieve an overview of all journeys set up in the given organization.</summary>
        /// <returns>This endpoint will return an list of objects with the main properties of the organization. Check “Model” for the object - structure.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Journeys> GetAsync(string organization, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (organization == null)
                throw new System.ArgumentNullException("organization");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/organizations/{organization}/journeys");
            urlBuilder_.Replace("{organization}", System.Uri.EscapeDataString(ConvertToString(organization, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Journeys>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Journeys);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }
    
            public T Object { get; }
    
            public string Text { get; }
        }
    
        public bool ReadResponseAsString { get; set; }
        
        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }
        
            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }
    
        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value is System.Enum)
            {
                string name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }
                }
            }
            else if (value is bool) {
                return System.Convert.ToString(value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value != null && value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }
        
            return System.Convert.ToString(value, cultureInfo);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.1.6.0 (NJsonSchema v10.0.28.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ABClient : BaseSelligentClient
    {
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
    
        public ABClient(SelligentClientConfiguration configuration) : base(configuration)
        {
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() => 
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
        }
    
        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Use this endpoint to check whether AB journey already exists.</summary>
        /// <param name="api_name">Parameter represents API name of the AB journey.</param>
        /// <returns>This endpoint will return a AB journey-object defined on the given organization with the given api-name. Check “Model” for the object - structure.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<JourneyDetailsResponseModel> GetAsync(string api_name, string organization, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (api_name == null)
                throw new System.ArgumentNullException("api_name");
    
            if (organization == null)
                throw new System.ArgumentNullException("organization");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/organizations/{organization}/journeys/ab/{api_name}");
            urlBuilder_.Replace("{api_name}", System.Uri.EscapeDataString(ConvertToString(api_name, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{organization}", System.Uri.EscapeDataString(ConvertToString(organization, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<JourneyDetailsResponseModel>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(JourneyDetailsResponseModel);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Use this endpoint to delete existing AB journey.</summary>
        /// <param name="api_name">Parameter represents API name of the AB journey.</param>
        /// <returns>This endpoint will delete the AB journey with the given api name.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Delete_journey_success_response> DeleteAsync(string api_name, string organization, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (api_name == null)
                throw new System.ArgumentNullException("api_name");
    
            if (organization == null)
                throw new System.ArgumentNullException("organization");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/organizations/{organization}/journeys/ab/{api_name}");
            urlBuilder_.Replace("{api_name}", System.Uri.EscapeDataString(ConvertToString(api_name, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{organization}", System.Uri.EscapeDataString(ConvertToString(organization, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Delete_journey_success_response>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Delete_journey_success_response);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }
    
            public T Object { get; }
    
            public string Text { get; }
        }
    
        public bool ReadResponseAsString { get; set; }
        
        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }
        
            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }
    
        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value is System.Enum)
            {
                string name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }
                }
            }
            else if (value is bool) {
                return System.Convert.ToString(value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value != null && value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }
        
            return System.Convert.ToString(value, cultureInfo);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.1.6.0 (NJsonSchema v10.0.28.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CustomClient : BaseSelligentClient
    {
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
    
        public CustomClient(SelligentClientConfiguration configuration) : base(configuration)
        {
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() => 
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
        }
    
        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Use this endpoint to check whether custom journey already exists.</summary>
        /// <param name="api_name">Parameter represents API name of the custom journey.</param>
        /// <returns>This endpoint will return a custom journey-object defined on the given organization with the given api-name. Check “Model” for the object - structure.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<JourneyDetailsResponseModel> GetAsync(string api_name, string organization, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (api_name == null)
                throw new System.ArgumentNullException("api_name");
    
            if (organization == null)
                throw new System.ArgumentNullException("organization");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/organizations/{organization}/journeys/custom/{api_name}");
            urlBuilder_.Replace("{api_name}", System.Uri.EscapeDataString(ConvertToString(api_name, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{organization}", System.Uri.EscapeDataString(ConvertToString(organization, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<JourneyDetailsResponseModel>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "401") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<string>("unauthorized.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(JourneyDetailsResponseModel);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Use this endpoint to delete existing custom journey.</summary>
        /// <param name="api_name">Parameter represents API name of the custom journey.</param>
        /// <returns>This endpoint will delete the custom journey with the given api name.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Delete_journey_success_response> DeleteAsync(string api_name, string organization, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (api_name == null)
                throw new System.ArgumentNullException("api_name");
    
            if (organization == null)
                throw new System.ArgumentNullException("organization");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/organizations/{organization}/journeys/custom/{api_name}");
            urlBuilder_.Replace("{api_name}", System.Uri.EscapeDataString(ConvertToString(api_name, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{organization}", System.Uri.EscapeDataString(ConvertToString(organization, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Delete_journey_success_response>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "401") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<string>("unauthorized.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Delete_journey_success_response);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Lists all entry point components in the custom journey, usable via api.</summary>
        /// <param name="api_name">the api name of the custom journey.</param>
        /// <returns>An overview of all available entry points within the custom journey and usable via api. All other type of entry points are not listed here.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Journey_entry_point_info_response> GetEntryPointsAsync(string api_name, string organization, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (api_name == null)
                throw new System.ArgumentNullException("api_name");
    
            if (organization == null)
                throw new System.ArgumentNullException("organization");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/organizations/{organization}/journeys/custom/{api_name}/entrypoints");
            urlBuilder_.Replace("{api_name}", System.Uri.EscapeDataString(ConvertToString(api_name, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{organization}", System.Uri.EscapeDataString(ConvertToString(organization, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Journey_entry_point_info_response>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "401") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<string>("unauthorized.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<string>("when no custom journey exists for the api_name.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Journey_entry_point_info_response);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets detailed information about the entry point component.</summary>
        /// <param name="api_name">the api name of the custom journey</param>
        /// <param name="entrypoint_api_name">the api name of the entry point defined in the custom journey.</param>
        /// <returns>Returns detailed information about a specific entry point within the custom journey and usable via api.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Journey_entry_point_response> GetEntryPointAsync(string api_name, string entrypoint_api_name, string organization, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (api_name == null)
                throw new System.ArgumentNullException("api_name");
    
            if (entrypoint_api_name == null)
                throw new System.ArgumentNullException("entrypoint_api_name");
    
            if (organization == null)
                throw new System.ArgumentNullException("organization");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/organizations/{organization}/journeys/custom/{api_name}/entrypoints/{entrypoint_api_name}");
            urlBuilder_.Replace("{api_name}", System.Uri.EscapeDataString(ConvertToString(api_name, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{entrypoint_api_name}", System.Uri.EscapeDataString(ConvertToString(entrypoint_api_name, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{organization}", System.Uri.EscapeDataString(ConvertToString(organization, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Journey_entry_point_response>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "401") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<string>("unauthorized.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<string>("when the combination of api_name and entrypoint_api_name did not resulted in succes.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Journey_entry_point_response);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>This will trigger a specific start component in the custom journey</summary>
        /// <returns>Trigger a specific start component in the custom journey.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Trigger_journey_entry_point_response> TriggerEntryPointAsync(string api_name, string entrypoint_api_name, Trigger_journey_entry_points_request model, string organization, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (api_name == null)
                throw new System.ArgumentNullException("api_name");
    
            if (entrypoint_api_name == null)
                throw new System.ArgumentNullException("entrypoint_api_name");
    
            if (organization == null)
                throw new System.ArgumentNullException("organization");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/organizations/{organization}/journeys/custom/{api_name}/entrypoints/{entrypoint_api_name}/trigger");
            urlBuilder_.Replace("{api_name}", System.Uri.EscapeDataString(ConvertToString(api_name, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{entrypoint_api_name}", System.Uri.EscapeDataString(ConvertToString(entrypoint_api_name, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{organization}", System.Uri.EscapeDataString(ConvertToString(organization, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(model, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Trigger_journey_entry_point_response>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "401") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<string>("unauthorized.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<string>("the requested resource does not exist on the server.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Trigger_journey_entry_point_failed_response>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Trigger_journey_entry_point_failed_response>("When an error occurs the response contains more information about the error(s).", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Trigger_journey_entry_point_response);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }
    
            public T Object { get; }
    
            public string Text { get; }
        }
    
        public bool ReadResponseAsString { get; set; }
        
        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }
        
            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }
    
        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value is System.Enum)
            {
                string name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }
                }
            }
            else if (value is bool) {
                return System.Convert.ToString(value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value != null && value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }
        
            return System.Convert.ToString(value, cultureInfo);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.1.6.0 (NJsonSchema v10.0.28.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class RecurringClient : BaseSelligentClient
    {
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
    
        public RecurringClient(SelligentClientConfiguration configuration) : base(configuration)
        {
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() => 
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
        }
    
        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Use this endpoint to check whether recurring journey already exists.</summary>
        /// <param name="api_name">Parameter represents API name of the recurring journey.</param>
        /// <returns>This endpoint will return a recurring journey-object defined on the given organization with the given api-name. Check “Model” for the object - structure.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<JourneyDetailsResponseModel> GetAsync(string api_name, string organization, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (api_name == null)
                throw new System.ArgumentNullException("api_name");
    
            if (organization == null)
                throw new System.ArgumentNullException("organization");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/organizations/{organization}/journeys/recurring/{api_name}");
            urlBuilder_.Replace("{api_name}", System.Uri.EscapeDataString(ConvertToString(api_name, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{organization}", System.Uri.EscapeDataString(ConvertToString(organization, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<JourneyDetailsResponseModel>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(JourneyDetailsResponseModel);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Use this endpoint to delete existing recurring journey.</summary>
        /// <param name="api_name">Parameter represents API name of the recurring journey.</param>
        /// <returns>This endpoint will delete the recurring journey with the given api name.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Delete_journey_success_response> DeleteAsync(string api_name, string organization, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (api_name == null)
                throw new System.ArgumentNullException("api_name");
    
            if (organization == null)
                throw new System.ArgumentNullException("organization");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/organizations/{organization}/journeys/recurring/{api_name}");
            urlBuilder_.Replace("{api_name}", System.Uri.EscapeDataString(ConvertToString(api_name, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{organization}", System.Uri.EscapeDataString(ConvertToString(organization, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Delete_journey_success_response>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Delete_journey_success_response);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }
    
            public T Object { get; }
    
            public string Text { get; }
        }
    
        public bool ReadResponseAsString { get; set; }
        
        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }
        
            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }
    
        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value is System.Enum)
            {
                string name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }
                }
            }
            else if (value is bool) {
                return System.Convert.ToString(value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value != null && value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }
        
            return System.Convert.ToString(value, cultureInfo);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.1.6.0 (NJsonSchema v10.0.28.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class SingleBatchClient : BaseSelligentClient
    {
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
    
        public SingleBatchClient(SelligentClientConfiguration configuration) : base(configuration)
        {
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() => 
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
        }
    
        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Use this endpoint to retrieve all journeys on the given organization of type Single Batch.</summary>
        /// <returns>This endpoint will return a list of single batch journey-objects defined on the given organization. Check “Model” for the object-structure.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Singlebatches> GetAsync(string organization, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (organization == null)
                throw new System.ArgumentNullException("organization");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/organizations/{organization}/journeys/singlebatch");
            urlBuilder_.Replace("{organization}", System.Uri.EscapeDataString(ConvertToString(organization, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Singlebatches>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Singlebatches);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Use this endpoint to create a new Single-Batch journey.</summary>
        /// <param name="model">The parameters required for the creation of the execution. journey.scheduling.launch_date is required, if journey.launch_state is "Schedule". journey.send_in_waves.type can be "Waves" or "Items". journey.sending_limit.type can be "Absolute" or "Relative". journey.sending_limit.sort_selection can be "Random" or "Sorted".</param>
        /// <returns>This endpoint will create a new single batch journey. Check “Model” for the object - structure.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Create_single_batch_success_response> CreateAsync(CreateSingleBatchRequestModel model, string organization, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (organization == null)
                throw new System.ArgumentNullException("organization");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/organizations/{organization}/journeys/singlebatch");
            urlBuilder_.Replace("{organization}", System.Uri.EscapeDataString(ConvertToString(organization, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(model, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "201") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Create_single_batch_success_response>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Create_single_batch_failed_response>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Create_single_batch_failed_response>("No (or invalid) id or model data has been provided", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Create_single_batch_success_response);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Use this endpoint to retrieve information on the Single Batch journey with the given api name.</summary>
        /// <param name="api_name">The name of the instance to get</param>
        /// <returns>This endpoint will return a single batch journey-object defined on the given organization with the given api-name. Check “Model” for the object - structure.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Get_single_batch_response> Get2Async(string api_name, string organization, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (api_name == null)
                throw new System.ArgumentNullException("api_name");
    
            if (organization == null)
                throw new System.ArgumentNullException("organization");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/organizations/{organization}/journeys/singlebatch/{api_name}");
            urlBuilder_.Replace("{api_name}", System.Uri.EscapeDataString(ConvertToString(api_name, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{organization}", System.Uri.EscapeDataString(ConvertToString(organization, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Get_single_batch_response>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Get_single_batch_response);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Use this endpoint to delete existing single batch journey.</summary>
        /// <param name="api_name">Parameter represents API name of the single batch journey.</param>
        /// <returns>This endpoint will delete the single batch journey with the given api name.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Delete_journey_success_response> DeleteAsync(string api_name, string organization, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (api_name == null)
                throw new System.ArgumentNullException("api_name");
    
            if (organization == null)
                throw new System.ArgumentNullException("organization");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/organizations/{organization}/journeys/singlebatch/{api_name}");
            urlBuilder_.Replace("{api_name}", System.Uri.EscapeDataString(ConvertToString(api_name, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{organization}", System.Uri.EscapeDataString(ConvertToString(organization, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Delete_journey_success_response>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Delete_journey_success_response);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Use this endpoint to cancel launching of a journey</summary>
        /// <param name="api_name">Api name for the journey to be cancelled.</param>
        /// <returns>Journey has been cancelled successfully</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Cancel_single_batch_journey_success_response> CancelAsync(string api_name, string organization, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (api_name == null)
                throw new System.ArgumentNullException("api_name");
    
            if (organization == null)
                throw new System.ArgumentNullException("organization");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/organizations/{organization}/journeys/singlebatch/{api_name}/cancel");
            urlBuilder_.Replace("{api_name}", System.Uri.EscapeDataString(ConvertToString(api_name, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{organization}", System.Uri.EscapeDataString(ConvertToString(organization, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Cancel_single_batch_journey_success_response>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Cancel_single_batch_journey_failed_response>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Cancel_single_batch_journey_failed_response>("Journey cancel was not successful", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Cancel_single_batch_journey_failed_response>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Cancel_single_batch_journey_failed_response>("Journey (api_name or organization) cannot be found", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Cancel_single_batch_journey_success_response);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Use this endpoint to launch a journey</summary>
        /// <param name="api_name">Api name for the journey to be launched.</param>
        /// <param name="request">Request model providing launch state and scheduling info. journey.scheduling.launch_date is required if journey.launch_state is "Schedule".</param>
        /// <returns>Journey has been launched successfully</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Launch_single_batch_journey_success_response> LaunchAsync(string api_name, LaunchSingleBatchRequestModel request, string organization, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (api_name == null)
                throw new System.ArgumentNullException("api_name");
    
            if (organization == null)
                throw new System.ArgumentNullException("organization");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/organizations/{organization}/journeys/singlebatch/{api_name}/launch");
            urlBuilder_.Replace("{api_name}", System.Uri.EscapeDataString(ConvertToString(api_name, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{organization}", System.Uri.EscapeDataString(ConvertToString(organization, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(request, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Launch_single_batch_journey_success_response>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Launch_single_batch_journey_failed_response>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Launch_single_batch_journey_failed_response>("Journey launch was not successful", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "404") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Launch_single_batch_journey_failed_response>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Launch_single_batch_journey_failed_response>("Journey (api_name or organization) cannot be found", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Launch_single_batch_journey_success_response);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Use this endpoint to trigger a Single-Batch journey execution.</summary>
        /// <param name="api_name">The name of the execution that should be triggered.</param>
        /// <param name="model">Optionally, extra parameters required for triggering the execution can be provided through the model. journey.scheduling.launch_date is required if journey.launch_state is "Schedule".</param>
        /// <returns>This endpoint will trigger the execution of the single batch journey with the given api-name. Check “Model” for the object - structure.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Trigger_single_batch_response> TriggerAsync(string api_name, TriggerSingleBatchRequestModel model, string organization, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (api_name == null)
                throw new System.ArgumentNullException("api_name");
    
            if (organization == null)
                throw new System.ArgumentNullException("organization");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/organizations/{organization}/journeys/singlebatch/{api_name}/trigger");
            urlBuilder_.Replace("{api_name}", System.Uri.EscapeDataString(ConvertToString(api_name, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{organization}", System.Uri.EscapeDataString(ConvertToString(organization, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(model, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Trigger_single_batch_response>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Trigger_single_batch_response>("No (or invalid) id or model data has been provided", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "201") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Trigger_single_batch_response>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Trigger_single_batch_response);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Use this end point to send single batch with email message</summary>
        /// <param name="requestModel">Request model to send single batch with email message. journey.scheduling.launch_date is required if journey.launch_state is "Schedule". journey.send_in_waves.type can be "Waves" or "Items". journey.sending_limit.type can be "Absolute" or "Relative". journey.sending_limit.sort_selection can be "Random" or "Sorted".</param>
        /// <returns>This endpoint will create a new single batch journey with email message. Check “Model” for the object - structure.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Create_single_batch_success_response> CreateSingleBatchEmailMessageAsync(CreateSingleBatchMessageRequestModel requestModel, string organization, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (organization == null)
                throw new System.ArgumentNullException("organization");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/organizations/{organization}/journeys/singlebatch/message");
            urlBuilder_.Replace("{organization}", System.Uri.EscapeDataString(ConvertToString(organization, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(requestModel, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Create_single_batch_success_response>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Create_single_batch_failed_response>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Create_single_batch_failed_response>("No (or invalid) id or model data has been provided", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Create_single_batch_success_response);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Use this endpoint to send single batch mobile push message</summary>
        /// <param name="requestModel">Request model providing journey info and mobile push message info. journey.scheduling.launch_date is required if journey.launch_state is "Schedule". journey.send_in_waves.type can be "Waves" or "Items". journey.sending_limit.type can be "Absolute" or "Relative". journey.sending_limit.sort_selection can be "Random" or "Sorted".</param>
        /// <returns>This endpoint will create a new single batch journey with mobile push content. Check “Model” for the object - structure.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Create_single_batch_success_response> CreateSingleBatchMobilePushAsync(CreateSingleBatchMobilePushRequestModel requestModel, string organization, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (organization == null)
                throw new System.ArgumentNullException("organization");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/organizations/{organization}/journeys/singlebatch/mobile");
            urlBuilder_.Replace("{organization}", System.Uri.EscapeDataString(ConvertToString(organization, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(requestModel, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Create_single_batch_success_response>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Create_single_batch_failed_response>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Create_single_batch_failed_response>("No (or invalid) id or model data has been provided", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Create_single_batch_success_response);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Use this endpoint to create a new Single-Batch journey for Sms content</summary>
        /// <param name="requestModel">Request model providing journey and sms content details. journey.scheduling.launch_date is required if journey.launch_state is "Schedule". journey.send_in_waves.type can be "Waves" or "Items".journey.sending_limit.type can be "Absolute" or "Relative". journey.sending_limit.sort_selection can be "Random" or "Sorted".</param>
        /// <returns>This endpoint will create a new single batch journey with sms content. Check “Model” for the object - structure.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Create_single_batch_success_response> CreateSingleBatchSmsAsync(CreateSingleBatchSmsRequestModel requestModel, string organization, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (organization == null)
                throw new System.ArgumentNullException("organization");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/organizations/{organization}/journeys/singlebatch/sms");
            urlBuilder_.Replace("{organization}", System.Uri.EscapeDataString(ConvertToString(organization, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(requestModel, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Create_single_batch_success_response>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Create_single_batch_failed_response>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Create_single_batch_failed_response>("No (or invalid) id or model data has been provided", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Create_single_batch_success_response);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }
    
            public T Object { get; }
    
            public string Text { get; }
        }
    
        public bool ReadResponseAsString { get; set; }
        
        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }
        
            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }
    
        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value is System.Enum)
            {
                string name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }
                }
            }
            else if (value is bool) {
                return System.Convert.ToString(value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value != null && value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }
        
            return System.Convert.ToString(value, cultureInfo);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.1.6.0 (NJsonSchema v10.0.28.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class TransactionalClient : BaseSelligentClient
    {
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
    
        public TransactionalClient(SelligentClientConfiguration configuration) : base(configuration)
        {
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() => 
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
        }
    
        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Use this endpoint to retrieve all journeys on the given organization of type Transactional.</summary>
        /// <returns>This endpoint will return a list of the transactional journeys defined on the organization. Check “Model” for the object - structure.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Transactionals> GetAsync(string organization, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (organization == null)
                throw new System.ArgumentNullException("organization");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/organizations/{organization}/journeys/transactional");
            urlBuilder_.Replace("{organization}", System.Uri.EscapeDataString(ConvertToString(organization, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Transactionals>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Transactionals);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Use this endpoint to retrieve information on the transactional journey with the given api name.</summary>
        /// <param name="api_name">The name of the instance to get</param>
        /// <returns>This endpoint will return a journey-object defined on the given organization with the given api-name. Check “Model” for the object - structure.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<TransactionalResponseModel> Get2Async(string api_name, string organization, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (api_name == null)
                throw new System.ArgumentNullException("api_name");
    
            if (organization == null)
                throw new System.ArgumentNullException("organization");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/organizations/{organization}/journeys/transactional/{api_name}");
            urlBuilder_.Replace("{api_name}", System.Uri.EscapeDataString(ConvertToString(api_name, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{organization}", System.Uri.EscapeDataString(ConvertToString(organization, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<TransactionalResponseModel>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(TransactionalResponseModel);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Use this endpoint to delete existing transactional journey.</summary>
        /// <param name="api_name">Parameter represents API name of the transactional journey.</param>
        /// <returns>This endpoint will delete the transactional journey with the given api name.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Delete_journey_success_response> DeleteAsync(string api_name, string organization, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (api_name == null)
                throw new System.ArgumentNullException("api_name");
    
            if (organization == null)
                throw new System.ArgumentNullException("organization");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/organizations/{organization}/journeys/transactional/{api_name}");
            urlBuilder_.Replace("{api_name}", System.Uri.EscapeDataString(ConvertToString(api_name, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{organization}", System.Uri.EscapeDataString(ConvertToString(organization, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Delete_journey_success_response>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Delete_journey_success_response);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Use this endpoint to send (multiple) transactional messages (email, mobile push, sms).</summary>
        /// <param name="api_name">The name of execution that should be sent</param>
        /// <param name="model">The model containing the data that should be sent</param>
        /// <returns>This endpoint can be used to trigger the transactional message with the given api-name on the given organization. Check “Model” for the object - structure.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Send_transactional_response> SendAsync(string api_name, SendTransactionalRequestModel model, string organization, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (api_name == null)
                throw new System.ArgumentNullException("api_name");
    
            if (organization == null)
                throw new System.ArgumentNullException("organization");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/organizations/{organization}/journeys/transactional/{api_name}/send");
            urlBuilder_.Replace("{api_name}", System.Uri.EscapeDataString(ConvertToString(api_name, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{organization}", System.Uri.EscapeDataString(ConvertToString(organization, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(model, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Send_transactional_response>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Send_transactional_response);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Use this endpoint to get the status of multiple transactional messages.</summary>
        /// <returns>This endpoint will return a list of transactional-status-objects for the messages that correspond to the list of guids that is submitted, for the transactional journeys defined on the given organization. Check “Model” for the object - structure.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Transactional_status_response> GetStatusAsync(System.Collections.Generic.IEnumerable<System.Guid> ids, string organization, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (organization == null)
                throw new System.ArgumentNullException("organization");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/organizations/{organization}/journeys/transactional/status");
            urlBuilder_.Replace("{organization}", System.Uri.EscapeDataString(ConvertToString(organization, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(ids, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Transactional_status_response>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Transactional_status_response);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Use this endpoint to get the status of a transactional message with a given id.</summary>
        /// <param name="id">the ID of the message</param>
        /// <returns>This endpoint will return a transactional-status-object for the transactional journey with the given id on the given organization. Check “Model” for the object - structure.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Transactional_status_by_id_response> GetStatusByIdAsync(string id, string organization, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            if (organization == null)
                throw new System.ArgumentNullException("organization");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/organizations/{organization}/journeys/transactional/status/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{organization}", System.Uri.EscapeDataString(ConvertToString(organization, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Transactional_status_by_id_response>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Transactional_status_by_id_response);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }
    
            public T Object { get; }
    
            public string Text { get; }
        }
    
        public bool ReadResponseAsString { get; set; }
        
        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }
        
            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }
    
        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value is System.Enum)
            {
                string name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }
                }
            }
            else if (value is bool) {
                return System.Convert.ToString(value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value != null && value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }
        
            return System.Convert.ToString(value, cultureInfo);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.1.6.0 (NJsonSchema v10.0.28.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class TransactionalBulkClient : BaseSelligentClient
    {
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
    
        public TransactionalBulkClient(SelligentClientConfiguration configuration) : base(configuration)
        {
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() => 
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
        }
    
        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Use this method to trigger a bulk journey in a transactional way</summary>
        /// <param name="api_name">The name of execution that should be sent</param>
        /// <returns>The provided model is valid. The response will contain information on whether or not the action was executed successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Send_transactional_bulk_response> SendAsync(string api_name, string organization, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (api_name == null)
                throw new System.ArgumentNullException("api_name");
    
            if (organization == null)
                throw new System.ArgumentNullException("organization");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/organizations/{organization}/journeys/transactional/bulk/{api_name}/send");
            urlBuilder_.Replace("{api_name}", System.Uri.EscapeDataString(ConvertToString(api_name, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{organization}", System.Uri.EscapeDataString(ConvertToString(organization, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Send_transactional_bulk_response>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Send_transactional_bulk_response);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }
    
            public T Object { get; }
    
            public string Text { get; }
        }
    
        public bool ReadResponseAsString { get; set; }
        
        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }
        
            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }
    
        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value is System.Enum)
            {
                string name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }
                }
            }
            else if (value is bool) {
                return System.Convert.ToString(value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value != null && value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }
        
            return System.Convert.ToString(value, cultureInfo);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.1.6.0 (NJsonSchema v10.0.28.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class TransactionalShortcutClient : BaseSelligentClient
    {
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
    
        public TransactionalShortcutClient(SelligentClientConfiguration configuration) : base(configuration)
        {
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() => 
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
        }
    
        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Use this endpoint to update the user profile with given data and then send (multiple) transactional messages (email, mobile push, sms).</summary>
        /// <param name="api_name">The name of execution that should be sent</param>
        /// <param name="model">The model containing the data that should be sent</param>
        /// <returns>This endpoint can be used to create and/or update a user-profile and then trigger the transactional message with the given api-name on the given organization for this user. Check “Model” for the object - structure.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Update_profile_and_send_transactional_response> UpdateProfileAndSendTransactionalAsync(string api_name, Request model, string organization, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (api_name == null)
                throw new System.ArgumentNullException("api_name");
    
            if (organization == null)
                throw new System.ArgumentNullException("organization");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/organizations/{organization}/journeys/transactional/shortcut/{api_name}/updateProfileAndSend");
            urlBuilder_.Replace("{api_name}", System.Uri.EscapeDataString(ConvertToString(api_name, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{organization}", System.Uri.EscapeDataString(ConvertToString(organization, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(model, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Update_profile_and_send_transactional_response>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Update_profile_and_send_transactional_response);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }
    
            public T Object { get; }
    
            public string Text { get; }
        }
    
        public bool ReadResponseAsString { get; set; }
        
        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }
        
            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }
    
        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value is System.Enum)
            {
                string name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }
                }
            }
            else if (value is bool) {
                return System.Convert.ToString(value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value != null && value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }
        
            return System.Convert.ToString(value, cultureInfo);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.1.6.0 (NJsonSchema v10.0.28.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ListClient : BaseSelligentClient
    {
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
    
        public ListClient(SelligentClientConfiguration configuration) : base(configuration)
        {
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() => 
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
        }
    
        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Use this endpoint to retrieve an overview of all of the lists set up in the given organization.</summary>
        /// <param name="filter">Optional parameter to filter list by type. (Userlist, Datalist, Dataselectionlist or Optionlist)</param>
        /// <param name="search">Optional parameter to search a list with a specific name, description or tags.</param>
        /// <param name="skip">Optional parameter to specify index to start picking list items from.</param>
        /// <param name="take">Optional parameter to specify count for the number of list items to be taken.</param>
        /// <returns>This endpoint will return a list of lists defined on the organization. Check “Model” for the object - structure.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Lists> GetListsAsync(string organization, string filter = null, string search = null, int? skip = null, int? take = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (organization == null)
                throw new System.ArgumentNullException("organization");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/organizations/{organization}/lists?");
            urlBuilder_.Replace("{organization}", System.Uri.EscapeDataString(ConvertToString(organization, System.Globalization.CultureInfo.InvariantCulture)));
            if (filter != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("filter") + "=").Append(System.Uri.EscapeDataString(ConvertToString(filter, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (search != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("search") + "=").Append(System.Uri.EscapeDataString(ConvertToString(search, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (skip != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("skip") + "=").Append(System.Uri.EscapeDataString(ConvertToString(skip, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (take != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("take") + "=").Append(System.Uri.EscapeDataString(ConvertToString(take, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Lists>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Lists);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Use this endpoint to create a new list in the given organization.</summary>
        /// <param name="model">This CreateListRequestModel model parameter having information about list as name, api_name, listType, description and tags to be created .</param>
        /// <returns>This endpoint will create a new list of the given type. This list will contain the default fields, specifically for the chosen list type. Check “Model” for the object - structure.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Create_list_success_response> CreateListAsync(CreateListRequestModel model, string organization, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (organization == null)
                throw new System.ArgumentNullException("organization");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/organizations/{organization}/lists");
            urlBuilder_.Replace("{organization}", System.Uri.EscapeDataString(ConvertToString(organization, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(model, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Create_list_success_response>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Create_list_failed_response>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Create_list_failed_response>("List Not Created", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Create_list_success_response);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Use this endpoint to get a list of details for the list with the given by API name.</summary>
        /// <param name="api_name">Parameter represents API name of the list</param>
        /// <returns>This endpoint will return a list-object defined on the given organization with the given api-name. Check “Model” for the object - structure.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ListDetailsResponseModel> GetListAsync(string api_name, string organization, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (api_name == null)
                throw new System.ArgumentNullException("api_name");
    
            if (organization == null)
                throw new System.ArgumentNullException("organization");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/organizations/{organization}/lists/{api_name}");
            urlBuilder_.Replace("{api_name}", System.Uri.EscapeDataString(ConvertToString(api_name, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{organization}", System.Uri.EscapeDataString(ConvertToString(organization, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ListDetailsResponseModel>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(ListDetailsResponseModel);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Use this endpoint to update a list</summary>
        /// <param name="api_name">Parameter for API name associated with a list</param>
        /// <param name="model">This UpdateListRequestModel model parameter having information about list as name, api_name, listType, description and tags to be updated .</param>
        /// <returns>Calling this endpoint will update properties and settings of the list with the given api-name.Check “Model” for the object - structure.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Update_list_success_response> UpdateListAsync(string api_name, UpdateListRequestModel model, string organization, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (api_name == null)
                throw new System.ArgumentNullException("api_name");
    
            if (organization == null)
                throw new System.ArgumentNullException("organization");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/organizations/{organization}/lists/{api_name}");
            urlBuilder_.Replace("{api_name}", System.Uri.EscapeDataString(ConvertToString(api_name, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{organization}", System.Uri.EscapeDataString(ConvertToString(organization, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(model, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Update_list_success_response>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Update_list_failed_response>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Update_list_failed_response>("No (or invalid) id or model data has been provided", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Update_list_success_response);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Use this endpoint to delete a list by its API name in the given organization.</summary>
        /// <param name="api_name">Parameter to specify API name of the list.</param>
        /// <param name="dropTable">Optional Parameter to specify if the associated table is to be deleted.</param>
        /// <returns>This endpoint will delete the list with the given api-name in the given organization. Check “Model” for the object - structure that will be returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Delete_list_success_response> DeleteAsync(string api_name, string organization, bool? dropTable = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (api_name == null)
                throw new System.ArgumentNullException("api_name");
    
            if (organization == null)
                throw new System.ArgumentNullException("organization");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/organizations/{organization}/lists/{api_name}?");
            urlBuilder_.Replace("{api_name}", System.Uri.EscapeDataString(ConvertToString(api_name, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{organization}", System.Uri.EscapeDataString(ConvertToString(organization, System.Globalization.CultureInfo.InvariantCulture)));
            if (dropTable != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("dropTable") + "=").Append(System.Uri.EscapeDataString(ConvertToString(dropTable, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Delete_list_success_response>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Delete_list_failed_response>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Delete_list_failed_response>("Represents a response for an unsuccessful delete of list.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Delete_list_success_response);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Use this endpoint to get custom events</summary>
        /// <param name="api_name">api name of the list on which all custom event are requested.</param>
        /// <param name="search">Optional parameter to search a custom event with a specific name, description or tags.</param>
        /// <param name="skip">Optional parameter to specify index to start picking custom event items from.</param>
        /// <param name="take">Optional parameter to specify count for the number of custom event items to be taken.</param>
        /// <returns>This endpoint will retrieve list of custom events. Check “Model” for the object - structure.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CustomEvents> RetrieveCustomEventsAsync(string api_name, string organization, string search = null, int? skip = null, int? take = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (api_name == null)
                throw new System.ArgumentNullException("api_name");
    
            if (organization == null)
                throw new System.ArgumentNullException("organization");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/organizations/{organization}/lists/{api_name}/customevents?");
            urlBuilder_.Replace("{api_name}", System.Uri.EscapeDataString(ConvertToString(api_name, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{organization}", System.Uri.EscapeDataString(ConvertToString(organization, System.Globalization.CultureInfo.InvariantCulture)));
            if (search != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("search") + "=").Append(System.Uri.EscapeDataString(ConvertToString(search, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (skip != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("skip") + "=").Append(System.Uri.EscapeDataString(ConvertToString(skip, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (take != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("take") + "=").Append(System.Uri.EscapeDataString(ConvertToString(take, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CustomEvents>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(CustomEvents);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Use this endpoint to create a new custom event.</summary>
        /// <param name="api_name">Parameter to specify API name of the list.</param>
        /// <param name="model">The model object consists custom event details that are to used to create the custom event</param>
        /// <returns>This endpoint will create a new custom event.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Create_custom_event_success_example_response> CreateCustomEventAsync(string api_name, CreateCustomEventRequestModel model, string organization, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (api_name == null)
                throw new System.ArgumentNullException("api_name");
    
            if (organization == null)
                throw new System.ArgumentNullException("organization");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/organizations/{organization}/lists/{api_name}/customevents");
            urlBuilder_.Replace("{api_name}", System.Uri.EscapeDataString(ConvertToString(api_name, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{organization}", System.Uri.EscapeDataString(ConvertToString(organization, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(model, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Create_custom_event_success_example_response>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Create_custom_event_failed_example_response>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Create_custom_event_failed_example_response>("Custom event not created.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Create_custom_event_success_example_response);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Use this endpoint to get custom event details based on list API name and custom event name.</summary>
        /// <param name="api_name">Parameter to specify API name of the list.</param>
        /// <param name="custom_event_name">Parameter to specify name of the custom event.</param>
        /// <returns>This endpoint will return a custom-event-object with the details of the custom event with the given custom-event-name in the list with the given api-name defined on the given organization. Check “Model” for the object - structure.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Retrieve_custom_event_success_response> RetrieveCustomEventAsync(string api_name, string custom_event_name, string organization, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (api_name == null)
                throw new System.ArgumentNullException("api_name");
    
            if (custom_event_name == null)
                throw new System.ArgumentNullException("custom_event_name");
    
            if (organization == null)
                throw new System.ArgumentNullException("organization");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/organizations/{organization}/lists/{api_name}/customevents/{custom_event_name}");
            urlBuilder_.Replace("{api_name}", System.Uri.EscapeDataString(ConvertToString(api_name, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{custom_event_name}", System.Uri.EscapeDataString(ConvertToString(custom_event_name, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{organization}", System.Uri.EscapeDataString(ConvertToString(organization, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Retrieve_custom_event_success_response>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Retrieve_custom_event_success_response);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Use this endpoint to update a custom event.</summary>
        /// <param name="api_name">Parameter to specify API name of the list.</param>
        /// <param name="custom_event_name">Parameter to specify custom event name to be updated.</param>
        /// <param name="model">The model object consists custom event details that are to used to update the custom event</param>
        /// <returns>This endpoint will update the custom event.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Update_custom_event_success_example_response> UpdateCustomEventAsync(string api_name, string custom_event_name, UpdateCustomEventRequestModel model, string organization, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (api_name == null)
                throw new System.ArgumentNullException("api_name");
    
            if (custom_event_name == null)
                throw new System.ArgumentNullException("custom_event_name");
    
            if (organization == null)
                throw new System.ArgumentNullException("organization");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/organizations/{organization}/lists/{api_name}/customevents/{custom_event_name}");
            urlBuilder_.Replace("{api_name}", System.Uri.EscapeDataString(ConvertToString(api_name, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{custom_event_name}", System.Uri.EscapeDataString(ConvertToString(custom_event_name, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{organization}", System.Uri.EscapeDataString(ConvertToString(organization, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(model, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Update_custom_event_success_example_response>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Update_custom_event_failed_example_response>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Update_custom_event_failed_example_response>("Custom event not updated.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Update_custom_event_success_example_response);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Use this endpoint to delete a custom event by its name in the given organization.</summary>
        /// <param name="api_name">Parameter to specify API name of the list.</param>
        /// <param name="custom_event_name">Parameter to specify name of the custom event.</param>
        /// <param name="dropTable">Optional Parameter to specify if the associated table is to be deleted.</param>
        /// <returns>This endpoint will delete the custom event with the given custom-event-name in the given organization. Check “Model” for the object - structure that will be returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Delete_custom_event_success_response> DeleteCustomEventAsync(string api_name, string custom_event_name, string organization, bool? dropTable = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (api_name == null)
                throw new System.ArgumentNullException("api_name");
    
            if (custom_event_name == null)
                throw new System.ArgumentNullException("custom_event_name");
    
            if (organization == null)
                throw new System.ArgumentNullException("organization");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/organizations/{organization}/lists/{api_name}/customevents/{custom_event_name}?");
            urlBuilder_.Replace("{api_name}", System.Uri.EscapeDataString(ConvertToString(api_name, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{custom_event_name}", System.Uri.EscapeDataString(ConvertToString(custom_event_name, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{organization}", System.Uri.EscapeDataString(ConvertToString(organization, System.Globalization.CultureInfo.InvariantCulture)));
            if (dropTable != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("dropTable") + "=").Append(System.Uri.EscapeDataString(ConvertToString(dropTable, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Delete_custom_event_success_response>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Delete_custom_event_failed_response>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Delete_custom_event_failed_response>("Represents a response for an unsuccessful deletion of custom event.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Delete_custom_event_success_response);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Use this endpoint to get custom event fields based on list API name and custom event name.</summary>
        /// <param name="api_name">Parameter to specify API name of the list.</param>
        /// <param name="custom_event_name">Parameter to specify name of the custom event.</param>
        /// <returns>This endpoint will return a custom-event-field-object with the custom event fields for given custom-event-name in the list with the given api-name defined on the given organization. Check “Model” for the object - structure.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Fields2> RetrieveCustomEventFieldsAsync(string api_name, string custom_event_name, string organization, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (api_name == null)
                throw new System.ArgumentNullException("api_name");
    
            if (custom_event_name == null)
                throw new System.ArgumentNullException("custom_event_name");
    
            if (organization == null)
                throw new System.ArgumentNullException("organization");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/organizations/{organization}/lists/{api_name}/customevents/{custom_event_name}/fields");
            urlBuilder_.Replace("{api_name}", System.Uri.EscapeDataString(ConvertToString(api_name, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{custom_event_name}", System.Uri.EscapeDataString(ConvertToString(custom_event_name, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{organization}", System.Uri.EscapeDataString(ConvertToString(organization, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Fields2>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Fields2);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Use this endpoint to create a custom event fields.</summary>
        /// <param name="api_name">Parameter to specify API name of the list.</param>
        /// <param name="custom_event_name">Parameter to specify custom event name to be updated.</param>
        /// <param name="model">The model object consists custom event details that are to used to create a custom event field</param>
        /// <returns>This endpoint will update the custom event.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Create_custom_event_fields_success_response> CreateCustomEventFieldsAsync(string api_name, string custom_event_name, CreateCustomEventFieldsRequestModel model, string organization, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (api_name == null)
                throw new System.ArgumentNullException("api_name");
    
            if (custom_event_name == null)
                throw new System.ArgumentNullException("custom_event_name");
    
            if (organization == null)
                throw new System.ArgumentNullException("organization");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/organizations/{organization}/lists/{api_name}/customevents/{custom_event_name}/fields");
            urlBuilder_.Replace("{api_name}", System.Uri.EscapeDataString(ConvertToString(api_name, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{custom_event_name}", System.Uri.EscapeDataString(ConvertToString(custom_event_name, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{organization}", System.Uri.EscapeDataString(ConvertToString(organization, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(model, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Create_custom_event_fields_success_response>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Create_custom_event_fields_failed_response>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Create_custom_event_fields_failed_response>("Custom event not updated.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Create_custom_event_fields_success_response);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Use this endpoint to update a custom event field.</summary>
        /// <param name="api_name">Parameter to specify API name of the list.</param>
        /// <param name="custom_event_name">Parameter to specify custom event name.</param>
        /// <param name="field_name">Parameter to specify custom event field name to be updated</param>
        /// <param name="model">The model object consists custom event field details that are to used to update a custom event field</param>
        /// <returns>This endpoint will update the custom event field.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Update_custom_event_field_success_response> UpdateCustomEventFieldAsync(string api_name, string custom_event_name, string field_name, UpdateCustomEventFieldRequestModel model, string organization, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (api_name == null)
                throw new System.ArgumentNullException("api_name");
    
            if (custom_event_name == null)
                throw new System.ArgumentNullException("custom_event_name");
    
            if (field_name == null)
                throw new System.ArgumentNullException("field_name");
    
            if (organization == null)
                throw new System.ArgumentNullException("organization");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/organizations/{organization}/lists/{api_name}/customevents/{custom_event_name}/fields/{field_name}");
            urlBuilder_.Replace("{api_name}", System.Uri.EscapeDataString(ConvertToString(api_name, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{custom_event_name}", System.Uri.EscapeDataString(ConvertToString(custom_event_name, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{field_name}", System.Uri.EscapeDataString(ConvertToString(field_name, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{organization}", System.Uri.EscapeDataString(ConvertToString(organization, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(model, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Update_custom_event_field_success_response>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Update_custom_event_field_failed_response>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Update_custom_event_field_failed_response>("Custom event field not updated.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Update_custom_event_field_success_response);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Use this endpoint to delete a custom event field based on list's API name, custom event name and name of the field</summary>
        /// <param name="api_name">Parameter to specify API name of the list.</param>
        /// <param name="custom_event_name">Parameter to specify name of the custom event.</param>
        /// <param name="name">Parameter to specify name of the custom event field.</param>
        /// <returns>This endpoint will delete the custom event field with the given custom-event-name and field name in the given organization. Check “Model” for the object - structure that will be returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Delete_custom_event_field_success_response> DeleteCustomEventFieldAsync(string api_name, string custom_event_name, string name, string organization, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (api_name == null)
                throw new System.ArgumentNullException("api_name");
    
            if (custom_event_name == null)
                throw new System.ArgumentNullException("custom_event_name");
    
            if (name == null)
                throw new System.ArgumentNullException("name");
    
            if (organization == null)
                throw new System.ArgumentNullException("organization");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/organizations/{organization}/lists/{api_name}/customevents/{custom_event_name}/fields/{name}");
            urlBuilder_.Replace("{api_name}", System.Uri.EscapeDataString(ConvertToString(api_name, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{custom_event_name}", System.Uri.EscapeDataString(ConvertToString(custom_event_name, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{name}", System.Uri.EscapeDataString(ConvertToString(name, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{organization}", System.Uri.EscapeDataString(ConvertToString(organization, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Delete_custom_event_field_success_response>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Delete_custom_event_field_failed_response>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Delete_custom_event_field_failed_response>("Represents a response for an unsuccessful deletion of custom event field.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Delete_custom_event_field_success_response);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Use this endpoint to get list fields based on API name of list.</summary>
        /// <param name="api_name">Parameter for API name associated with a list</param>
        /// <returns>This endpoint will return list of field-objects defined on the list with the given api-name on the given organization. Check “Model” for the object - structure.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Fields> GetListFieldsAsync(string api_name, string organization, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (api_name == null)
                throw new System.ArgumentNullException("api_name");
    
            if (organization == null)
                throw new System.ArgumentNullException("organization");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/organizations/{organization}/lists/{api_name}/fields");
            urlBuilder_.Replace("{api_name}", System.Uri.EscapeDataString(ConvertToString(api_name, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{organization}", System.Uri.EscapeDataString(ConvertToString(organization, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Fields>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Fields);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Use this endpoint to create list fields.</summary>
        /// <param name="api_name">The api name of of the list</param>
        /// <param name="model">The model containing the data that should be sent</param>
        /// <returns>This endpoint will add fields to the list with the given api-name. These fields will be added at the end of the list.Check “Model” for the object - structure.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Create_fields_success_response> CreateListFieldsAsync(string api_name, CreateListFieldsRequestModel model, string organization, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (api_name == null)
                throw new System.ArgumentNullException("api_name");
    
            if (organization == null)
                throw new System.ArgumentNullException("organization");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/organizations/{organization}/lists/{api_name}/fields");
            urlBuilder_.Replace("{api_name}", System.Uri.EscapeDataString(ConvertToString(api_name, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{organization}", System.Uri.EscapeDataString(ConvertToString(organization, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(model, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "201") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Create_fields_success_response>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Create_fields_failed_response>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Create_fields_failed_response>("Invalid model data has been provided", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Create_fields_success_response);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Use this endpoint to update an existing field of list.</summary>
        /// <param name="api_name">Parameter for api_name associated with the list.</param>
        /// <param name="name">Parameter for name of the field to be updated.</param>
        /// <param name="updateFieldRequestModel">Parameter for details containing the new field information.</param>
        /// <returns>Calling this endpoint can update the name &amp; description of the field with the given name in the list with the given api-name. Check “Model” for the object - structure.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Update_field_success_response> UpdateListFieldAsync(string api_name, string name, UpdateListFieldRequestModel updateFieldRequestModel, string organization, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (api_name == null)
                throw new System.ArgumentNullException("api_name");
    
            if (name == null)
                throw new System.ArgumentNullException("name");
    
            if (organization == null)
                throw new System.ArgumentNullException("organization");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/organizations/{organization}/lists/{api_name}/fields/{name}");
            urlBuilder_.Replace("{api_name}", System.Uri.EscapeDataString(ConvertToString(api_name, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{name}", System.Uri.EscapeDataString(ConvertToString(name, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{organization}", System.Uri.EscapeDataString(ConvertToString(organization, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(updateFieldRequestModel, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Update_field_success_response>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Update_field_failed_response>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Update_field_failed_response>("Failed to update the field.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Update_field_success_response);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Use this endpoint to delete a list field based on list's API name and name of the field</summary>
        /// <param name="api_name">Parameter to specify API name of list.</param>
        /// <param name="name">Parameter to specify name of the field</param>
        /// <returns>This endpoint will delete the field with the given name in the list with the given api-name in the given organization. Check “Model” for the object - structure that will be returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Delete_list_field_success_response> DeleteListFieldAsync(string api_name, string name, string organization, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (api_name == null)
                throw new System.ArgumentNullException("api_name");
    
            if (name == null)
                throw new System.ArgumentNullException("name");
    
            if (organization == null)
                throw new System.ArgumentNullException("organization");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/organizations/{organization}/lists/{api_name}/fields/{name}");
            urlBuilder_.Replace("{api_name}", System.Uri.EscapeDataString(ConvertToString(api_name, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{name}", System.Uri.EscapeDataString(ConvertToString(name, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{organization}", System.Uri.EscapeDataString(ConvertToString(organization, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Delete_list_field_success_response>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Delete_list_field_failed_response>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Delete_list_field_failed_response>("Represents a response for an unsuccessful delete of list field.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Delete_list_field_success_response);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Use this endpoint to get records count by API name of list.</summary>
        /// <param name="api_name">Parameter to specify API name of the list.</param>
        /// <returns>This endpoint will return the count of the number of records in the list with the given api-name on the given organization. Check “Model” for the object - structure.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<List_records_count_success_response> GetListRecordsCountAsync(string api_name, string organization, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (api_name == null)
                throw new System.ArgumentNullException("api_name");
    
            if (organization == null)
                throw new System.ArgumentNullException("organization");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/organizations/{organization}/lists/{api_name}/records");
            urlBuilder_.Replace("{api_name}", System.Uri.EscapeDataString(ConvertToString(api_name, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{organization}", System.Uri.EscapeDataString(ConvertToString(organization, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<List_records_count_success_response>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(List_records_count_success_response);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Use this endpoint to delete single record by its record Id.</summary>
        /// <param name="api_name">Parameter to specify API name of the list.</param>
        /// <param name="record_id">Required Parameter to specify if the associated record is to be deleted.</param>
        /// <returns>This endpoint will delete the field with the given name in the list with the given api-name in the given organization. Check “Model” for the object - structure that will be returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Delete_list_record_success_response> DeleteListRecordAsync(string api_name, int record_id, string organization, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (api_name == null)
                throw new System.ArgumentNullException("api_name");
    
            if (record_id == null)
                throw new System.ArgumentNullException("record_id");
    
            if (organization == null)
                throw new System.ArgumentNullException("organization");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/organizations/{organization}/lists/{api_name}/records/{record_id}");
            urlBuilder_.Replace("{api_name}", System.Uri.EscapeDataString(ConvertToString(api_name, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{record_id}", System.Uri.EscapeDataString(ConvertToString(record_id, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{organization}", System.Uri.EscapeDataString(ConvertToString(organization, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Delete_list_record_success_response>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Delete_list__record_failed_response>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Delete_list__record_failed_response>("Represents a response for an unsuccessful delete of list record.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Delete_list_record_success_response);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Use this endpoint to get all relations associated with a list.</summary>
        /// <param name="api_name">Parameter for API name associated with a list</param>
        /// <param name="filter">Optional parameter to filter relations by type. (OneToOne, OneToMany or ManyToOne)</param>
        /// <returns>Relations between lists allow you to store additional information that cannot be stored in the main list. These are the 3 major relationships:  • 1:1(profile extensions) — Used for selection and personalization.It can be considered as a expansion of your audience list. • 1:N(lookup tables)— Used only for selections, not personalization.  • N: 1 — Used to link multiple records in the master list to one single record in the linked list. A typical example of this is when family members are linked to one single address. This endpoint will return a list of relation - objects of the relations defined on the list with the given api - name in the given organization.Check “Model” for the object - structure.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Relations> GetRelationsAsync(string api_name, string organization, string filter = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (api_name == null)
                throw new System.ArgumentNullException("api_name");
    
            if (organization == null)
                throw new System.ArgumentNullException("organization");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/organizations/{organization}/lists/{api_name}/relations?");
            urlBuilder_.Replace("{api_name}", System.Uri.EscapeDataString(ConvertToString(api_name, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{organization}", System.Uri.EscapeDataString(ConvertToString(organization, System.Globalization.CultureInfo.InvariantCulture)));
            if (filter != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("filter") + "=").Append(System.Uri.EscapeDataString(ConvertToString(filter, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Relations>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Relations);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Use this endpoint to create relations between 2 lists.</summary>
        /// <returns>This endpoint will add relations to the list with the given api-name. Multiple relations can be created in a single call. Check “Model” for the object - structure.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Create_list_relations_success_response> CreateListRelationsAsync(string api_name, CreateListRelationsRequestModel model, string organization, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (api_name == null)
                throw new System.ArgumentNullException("api_name");
    
            if (organization == null)
                throw new System.ArgumentNullException("organization");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/organizations/{organization}/lists/{api_name}/relations");
            urlBuilder_.Replace("{api_name}", System.Uri.EscapeDataString(ConvertToString(api_name, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{organization}", System.Uri.EscapeDataString(ConvertToString(organization, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(model, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "201") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Create_list_relations_success_response>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Create_list_relations_failed_response>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Create_list_relations_failed_response>("No (or invalid) id or model data has been provided", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Create_list_relations_success_response);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Use this endpoint to get relation details based on API name of the list and name of the relation.</summary>
        /// <param name="api_name">Parameter to specify API name of the list</param>
        /// <param name="scope">Parameter to specify scope name of the relation</param>
        /// <returns>This endpoint will return a relations-object with the details of the relation with the given scope and api-name defined on the given organization. Check “Model” for the object - structure.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<RelationDetailsModel> GetRelationDetailsAsync(string api_name, string scope, string organization, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (api_name == null)
                throw new System.ArgumentNullException("api_name");
    
            if (scope == null)
                throw new System.ArgumentNullException("scope");
    
            if (organization == null)
                throw new System.ArgumentNullException("organization");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/organizations/{organization}/lists/{api_name}/relations/{scope}");
            urlBuilder_.Replace("{api_name}", System.Uri.EscapeDataString(ConvertToString(api_name, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{scope}", System.Uri.EscapeDataString(ConvertToString(scope, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{organization}", System.Uri.EscapeDataString(ConvertToString(organization, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RelationDetailsModel>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(RelationDetailsModel);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Use this endpoint to update an existing relation between the given list and a linked list.</summary>
        /// <param name="api_name">Parameter to specify API name of list</param>
        /// <param name="scope">Parameter to specify name of relation</param>
        /// <param name="model">Object to specify updates to a relation</param>
        /// <returns>Calling this endpoint will update the relation with the given scope in the list with the given api-name. All properties can be changed. Do note that changing these may affect the behaviour of journey tasks based on the updated relation. Check “Model” for the object - structure.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Update_list_relation_success_response> UpdateListRelationAsync(string api_name, string scope, UpdateListRelationRequest model, string organization, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (api_name == null)
                throw new System.ArgumentNullException("api_name");
    
            if (scope == null)
                throw new System.ArgumentNullException("scope");
    
            if (organization == null)
                throw new System.ArgumentNullException("organization");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/organizations/{organization}/lists/{api_name}/relations/{scope}");
            urlBuilder_.Replace("{api_name}", System.Uri.EscapeDataString(ConvertToString(api_name, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{scope}", System.Uri.EscapeDataString(ConvertToString(scope, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{organization}", System.Uri.EscapeDataString(ConvertToString(organization, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(model, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Update_list_relation_success_response>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Update_list_relation_failed_response>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Update_list_relation_failed_response>("No (or invalid) api_name or scope has been provided or unable to update relation", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Update_list_relation_success_response);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Use this endpoint to delete a relation between this list and another.</summary>
        /// <returns>This endpoint will delete the field relation the given scope in the list with the given api-name in the given organization. Deleting a relation is not possible if the relation is used on a bounce - list.Deleting relations that are(only) used in content or expressions will break this content and expressions.Check “Model” for the object - structure that will be returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Delete_list_relation_success_response> DeleteRelationAsync(string api_name, string scope, string organization, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (api_name == null)
                throw new System.ArgumentNullException("api_name");
    
            if (scope == null)
                throw new System.ArgumentNullException("scope");
    
            if (organization == null)
                throw new System.ArgumentNullException("organization");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/organizations/{organization}/lists/{api_name}/relations/{scope}");
            urlBuilder_.Replace("{api_name}", System.Uri.EscapeDataString(ConvertToString(api_name, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{scope}", System.Uri.EscapeDataString(ConvertToString(scope, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{organization}", System.Uri.EscapeDataString(ConvertToString(organization, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Delete_list_relation_success_response>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Delete_list_relation_failed_response>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Delete_list_relation_failed_response>("No (or invalid) api_name or scope has been provided or unable to delete relation", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Delete_list_relation_success_response);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Use this endpoint to get an overview of the segments defined on the given list.</summary>
        /// <param name="api_name">api name of the List for which segments are requested.</param>
        /// <param name="filter">Optional parameter to filter segment by type.</param>
        /// <param name="search">Optional parameter to search a segment with a specific name, description or tags.</param>
        /// <param name="skip">Optional parameter to specify index to start picking segment items from.</param>
        /// <param name="take">Optional parameter to specify count for the number of segment items to be taken.</param>
        /// <returns>A list segment contains a fraction of the data of a list.These are the 2 segment types:•	Dynamic segment — These segments are created from scratch, based on a filter being defined on a user list.The records in this type of segment evolve over time, depending on new records complying with the criteria or existing records that no longer answer the filter criteria.•	Static segment — This type of segment contains a fixed set of data.It can be created in multiple ways.When the static segment is derived from a dynamic segment, it contains a snapshot of the records currently in the dynamic segment.When the static segment is created through the import of a file, it contains a fixed set of records as well.This endpoint will return a list of segments defined on the list with the given api - name in the given organization.Check “Model” for the object - structure.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Segments> GetListSegmentsAsync(string api_name, string organization, string filter = null, string search = null, int? skip = null, int? take = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (api_name == null)
                throw new System.ArgumentNullException("api_name");
    
            if (organization == null)
                throw new System.ArgumentNullException("organization");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/organizations/{organization}/lists/{api_name}/segments?");
            urlBuilder_.Replace("{api_name}", System.Uri.EscapeDataString(ConvertToString(api_name, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{organization}", System.Uri.EscapeDataString(ConvertToString(organization, System.Globalization.CultureInfo.InvariantCulture)));
            if (filter != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("filter") + "=").Append(System.Uri.EscapeDataString(ConvertToString(filter, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (search != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("search") + "=").Append(System.Uri.EscapeDataString(ConvertToString(search, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (skip != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("skip") + "=").Append(System.Uri.EscapeDataString(ConvertToString(skip, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (take != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("take") + "=").Append(System.Uri.EscapeDataString(ConvertToString(take, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Segments>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Segments);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Use this endpoint to get segment details based on list API name and segment API name.</summary>
        /// <param name="api_name">Parameter to specify API name of the list</param>
        /// <param name="segment_api_name">Parameter to specify API name of the segment</param>
        /// <returns>This endpoint will return a segment-object with the details of the segment with the given segment-api-name in the list with the given api-name defined on the given organization. Check “Model” for the object - structure.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<SegmentDetailsModel> GetListSegmentAsync(string api_name, string segment_api_name, string organization, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (api_name == null)
                throw new System.ArgumentNullException("api_name");
    
            if (segment_api_name == null)
                throw new System.ArgumentNullException("segment_api_name");
    
            if (organization == null)
                throw new System.ArgumentNullException("organization");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/organizations/{organization}/lists/{api_name}/segments/{segment_api_name}");
            urlBuilder_.Replace("{api_name}", System.Uri.EscapeDataString(ConvertToString(api_name, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{segment_api_name}", System.Uri.EscapeDataString(ConvertToString(segment_api_name, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{organization}", System.Uri.EscapeDataString(ConvertToString(organization, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SegmentDetailsModel>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(SegmentDetailsModel);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Use this endpoint to delete a segment by its API name in the given organization.</summary>
        /// <param name="api_name">Parameter to specify API name of the list.</param>
        /// <param name="segment_api_name">Parameter to specify API name of the segment.</param>
        /// <returns>This endpoint will delete the segment with the given segment-api-name in the given organization. Check “Model” for the object - structure that will be returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Delete_segment_success_response> DeleteSegmentAsync(string api_name, string segment_api_name, string organization, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (api_name == null)
                throw new System.ArgumentNullException("api_name");
    
            if (segment_api_name == null)
                throw new System.ArgumentNullException("segment_api_name");
    
            if (organization == null)
                throw new System.ArgumentNullException("organization");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/organizations/{organization}/lists/{api_name}/segments/{segment_api_name}");
            urlBuilder_.Replace("{api_name}", System.Uri.EscapeDataString(ConvertToString(api_name, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{segment_api_name}", System.Uri.EscapeDataString(ConvertToString(segment_api_name, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{organization}", System.Uri.EscapeDataString(ConvertToString(organization, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Delete_segment_success_response>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Delete_segment_failed_response>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Delete_segment_failed_response>("Represents a response for an unsuccessful deletion of segment.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Delete_segment_success_response);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Use this endpoint to create static segment based on list API name and provided segment info parameters.</summary>
        /// <returns>This endpoint will create a new static segment of the segment source type as file. Check “Model” for the object - structure.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Create_segment_success_response> CreateStaticSegmentAsync(string api_name, CreateSegmentRequestModel model, string organization, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (api_name == null)
                throw new System.ArgumentNullException("api_name");
    
            if (organization == null)
                throw new System.ArgumentNullException("organization");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/organizations/{organization}/lists/{api_name}/segments/static");
            urlBuilder_.Replace("{api_name}", System.Uri.EscapeDataString(ConvertToString(api_name, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{organization}", System.Uri.EscapeDataString(ConvertToString(organization, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(model, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Create_segment_success_response>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Create_segment_failed_response>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Create_segment_failed_response>("Represents a response for an unsuccessful creation of segment.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Create_segment_success_response);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }
    
            public T Object { get; }
    
            public string Text { get; }
        }
    
        public bool ReadResponseAsString { get; set; }
        
        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }
        
            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }
    
        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value is System.Enum)
            {
                string name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }
                }
            }
            else if (value is bool) {
                return System.Convert.ToString(value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value != null && value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }
        
            return System.Convert.ToString(value, cultureInfo);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.1.6.0 (NJsonSchema v10.0.28.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class DataClient : BaseSelligentClient
    {
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
    
        public DataClient(SelligentClientConfiguration configuration) : base(configuration)
        {
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() => 
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
        }
    
        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Use this endpoint to create or update a single record with data on a 1:1 relation</summary>
        /// <param name="api_name">Parameter represents API name of the list.</param>
        /// <param name="keyfields">Parameter contains a comma-separated list of the key fields that need to be used to create or update records.</param>
        /// <param name="values">Parameter contains a key value pair dictionary of the master record data or slave record data.</param>
        /// <returns>This endpoint upsert a single list data record on 1:1 relation with the given list-api-name in the list with the given api-name in the given organization.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Save_list_data_responsed> SaveListDataAsync(string api_name, string keyfields, System.Collections.Generic.IDictionary<string, object> values, string organization, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (api_name == null)
                throw new System.ArgumentNullException("api_name");
    
            if (organization == null)
                throw new System.ArgumentNullException("organization");
    
            if (keyfields == null)
                throw new System.ArgumentNullException("keyfields");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/organizations/{organization}/lists/{api_name}/data?");
            urlBuilder_.Replace("{api_name}", System.Uri.EscapeDataString(ConvertToString(api_name, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{organization}", System.Uri.EscapeDataString(ConvertToString(organization, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append(System.Uri.EscapeDataString("keyfields") + "=").Append(System.Uri.EscapeDataString(ConvertToString(keyfields, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(values, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Save_list_data_responsed>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Save_list_data_responsed);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Use this endpoint to delete data from a specific table.</summary>
        /// <param name="api_name">Parameter represents API name of the list.</param>
        /// <param name="keyFields">Parameter contains a comma-separated list of the key fields that need to be used to delete records.</param>
        /// <param name="fields">Parameter indicates a comma-separated list of the fields that are in the provided data records.</param>
        /// <param name="mode">Parameter indicates the mode of the data transfer (Sync or Stream). [Default: Sync]</param>
        /// <param name="errorHandling">Parameter indicates error handling options whether to stop on error or continue on error</param>
        /// <returns>This endpoint deletes data from the list with the given api-name in the given organization. Deleting data can be done synchronous or streamed.The data provided in the message body should be in Json format.e.g. [ ["SOMEKEYFIELD", "SOMEOTHERKEYFIELD", "SOMEOTHERFIELD"], [1, "jane.doe@example.net", "Some random data 1"], [2, "john.doe@example.net", "Some random data 2"] ]. Check “Model” for the object-structure that will be returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<DeleteDataResponseModel> DeleteDataAsync(string api_name, string keyFields, string organization, string fields = null, string mode = null, string errorHandling = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (api_name == null)
                throw new System.ArgumentNullException("api_name");
    
            if (organization == null)
                throw new System.ArgumentNullException("organization");
    
            if (keyFields == null)
                throw new System.ArgumentNullException("keyFields");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/organizations/{organization}/lists/{api_name}/data?");
            urlBuilder_.Replace("{api_name}", System.Uri.EscapeDataString(ConvertToString(api_name, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{organization}", System.Uri.EscapeDataString(ConvertToString(organization, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append(System.Uri.EscapeDataString("keyFields") + "=").Append(System.Uri.EscapeDataString(ConvertToString(keyFields, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (fields != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("fields") + "=").Append(System.Uri.EscapeDataString(ConvertToString(fields, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (mode != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("mode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(mode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (errorHandling != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("errorHandling") + "=").Append(System.Uri.EscapeDataString(ConvertToString(errorHandling, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DeleteDataResponseModel>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(DeleteDataResponseModel);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Use this endpoint to load data into a specific table.</summary>
        /// <param name="api_name">Parameter represents API name of the list.</param>
        /// <param name="keyFields">Parameter contains a comma-separated list of the key fields that need to be used to create or update records.</param>
        /// <param name="fields">Optional parameter containing a comma-separated list of the fields that are in the provided data records. Make sure that this list contains ALL fields (including the key fields) in the correct order. If this parameter is not provided, the first row of the provided data records will be used to determine the fields.</param>
        /// <param name="mode">Parameter indicates the mode of the data transfer (Sync or Stream). [Default: Sync]</param>
        /// <param name="deduplication">Parameter indicates the de-duplication option during an import data (ImportLastMatch or ImportFirstMatch). [Default: ImportLastMatch]</param>
        /// <param name="data_import_option">Parameter indicates the data import option during an import data (InsertAndUpdate or OnlyInsert or OnlyUpdate). [Default: InsertAndUpdate]</param>
        /// <param name="create_segment_name">Parameter indicates the name of segment at the time of segment creation</param>
        /// <param name="create_segment_api_name">Parameter indicates the api name of segment at the time of segment creation</param>
        /// <param name="errorHandling">Parameter indicates error handling options whether to stop on error or continue on error</param>
        /// <returns>This endpoint loads data into the list with the given api-name in the given organization. Loading data can be done synchronous or streamed. The data provided in the message body should be in Json format.e.g. [ ["SOMEID", "SOMESTRING", "SOMEDATE", "SOMEFLOAT", "SOMEGUID", "SOMEBOOL"], [1, "Some String 1", "2018 -03-27T11:57:20.1179032Z", 3.14, "42ccbae0-d4fe-4d5f-b46e-1c6859d14524", false], [2, "Some String 2", "2018 -03-27T11:57:20.1234186Z", 6.28, "2d33b365-1008-4407-a818-dab8e46fbf40", true] ]. The first line, containing the columns is optional and should ONLY be provided if the fields are not provided in the query string. Note that if the fields are provided in the query string, the first row will be considered as regular data. Check “Model” for the object-structure that will be returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<LoadDataResponseModel> LoadDataAsync(string api_name, string keyFields, string organization, string jsondata, string fields = null, string mode = null, string deduplication = null, string data_import_option = null, string create_segment_name = null, string create_segment_api_name = null, string errorHandling = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (api_name == null)
                throw new System.ArgumentNullException("api_name");
    
            if (organization == null)
                throw new System.ArgumentNullException("organization");
    
            if (keyFields == null)
                throw new System.ArgumentNullException("keyFields");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/organizations/{organization}/lists/{api_name}/data/load?");
            urlBuilder_.Replace("{api_name}", System.Uri.EscapeDataString(ConvertToString(api_name, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{organization}", System.Uri.EscapeDataString(ConvertToString(organization, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append(System.Uri.EscapeDataString("keyFields") + "=").Append(System.Uri.EscapeDataString(ConvertToString(keyFields, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (fields != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("fields") + "=").Append(System.Uri.EscapeDataString(ConvertToString(fields, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (mode != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("mode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(mode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (deduplication != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("deduplication") + "=").Append(System.Uri.EscapeDataString(ConvertToString(deduplication, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (data_import_option != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("data_import_option") + "=").Append(System.Uri.EscapeDataString(ConvertToString(data_import_option, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (create_segment_name != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("create_segment_name") + "=").Append(System.Uri.EscapeDataString(ConvertToString(create_segment_name, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (create_segment_api_name != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("create_segment_api_name") + "=").Append(System.Uri.EscapeDataString(ConvertToString(create_segment_api_name, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (errorHandling != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("errorHandling") + "=").Append(System.Uri.EscapeDataString(ConvertToString(errorHandling, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(jsondata, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<LoadDataResponseModel>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(LoadDataResponseModel);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Use this endpoint to search for data records in a specific table.
        /// Searching data can be done synchronous or streamed.
        /// The data in the response will be in a Json format.</summary>
        /// <param name="api_name">Parameter represents the API name of the list.</param>
        /// <param name="request">Parameter specifies the details on the data that should be searched.</param>
        /// <param name="mode">Parameter indicates the mode of the data transfer (Sync or Stream). [Default: Sync]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<SearchDataResponseModel> SearchDataAsync(string api_name, SearchDataRequestModel request, string organization, string mode = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (api_name == null)
                throw new System.ArgumentNullException("api_name");
    
            if (organization == null)
                throw new System.ArgumentNullException("organization");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/organizations/{organization}/lists/{api_name}/data/search?");
            urlBuilder_.Replace("{api_name}", System.Uri.EscapeDataString(ConvertToString(api_name, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{organization}", System.Uri.EscapeDataString(ConvertToString(organization, System.Globalization.CultureInfo.InvariantCulture)));
            if (mode != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("mode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(mode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(request, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SearchDataResponseModel>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(SearchDataResponseModel);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Use this endpoint to delete data from a specific static segment.</summary>
        /// <param name="api_name">Parameter represents API name of the list.</param>
        /// <param name="segment_api_name">Parameter represents API name of the segment.</param>
        /// <param name="keyFields">Parameter contains a comma-separated list of the key fields that need to be used to delete records.</param>
        /// <param name="fields">Parameter indicates a comma-separated list of the fields that are in the provided data records.</param>
        /// <param name="mode">Parameter indicates the mode of the data transfer (Sync or Stream). [Default: Sync]</param>
        /// <param name="errorHandling">Parameter indicates error handling options whether to stop on error or continue on error</param>
        /// <returns>This endpoint deletes data via json from the segment with the given segment-api-name in the list with the given api-name in the given organization. Deleting data can be done synchronous or streamed. The data provided in the message body should be in Json format.e.g. [ ["SOMEKEYFIELD", "SOMEOTHERKEYFIELD", "SOMEOTHERFIELD"], [1,"jane.doe@example.net", "Some random data 1"], [2, "john.doe@example.net", "Some random data 2"] ]. Do note that this delete will only delete the references to the records from the segment. The original records remain untouched. Check “Model” for the object-structure that will be returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<DeleteDataResponseModel> DeleteSegmentDataAsync(string api_name, string segment_api_name, string keyFields, string organization, string fields = null, string mode = null, string errorHandling = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (api_name == null)
                throw new System.ArgumentNullException("api_name");
    
            if (segment_api_name == null)
                throw new System.ArgumentNullException("segment_api_name");
    
            if (organization == null)
                throw new System.ArgumentNullException("organization");
    
            if (keyFields == null)
                throw new System.ArgumentNullException("keyFields");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/organizations/{organization}/lists/{api_name}/segments/{segment_api_name}/data?");
            urlBuilder_.Replace("{api_name}", System.Uri.EscapeDataString(ConvertToString(api_name, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{segment_api_name}", System.Uri.EscapeDataString(ConvertToString(segment_api_name, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{organization}", System.Uri.EscapeDataString(ConvertToString(organization, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append(System.Uri.EscapeDataString("keyFields") + "=").Append(System.Uri.EscapeDataString(ConvertToString(keyFields, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (fields != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("fields") + "=").Append(System.Uri.EscapeDataString(ConvertToString(fields, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (mode != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("mode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(mode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (errorHandling != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("errorHandling") + "=").Append(System.Uri.EscapeDataString(ConvertToString(errorHandling, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DeleteDataResponseModel>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(DeleteDataResponseModel);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Use this endpoint to clear static segment data</summary>
        /// <param name="api_name">Parameter for API name associated with a list</param>
        /// <param name="segment_api_name">Parameter for API name associated with a segment</param>
        /// <returns>This endpoint will clear the static segment data with the given list api-name and segment api-name in the given organization.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Clear_static_segment_data_success_response> ClearStaticSegmentDataAsync(string api_name, string segment_api_name, string organization, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (api_name == null)
                throw new System.ArgumentNullException("api_name");
    
            if (segment_api_name == null)
                throw new System.ArgumentNullException("segment_api_name");
    
            if (organization == null)
                throw new System.ArgumentNullException("organization");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/organizations/{organization}/lists/{api_name}/segments/{segment_api_name}/data/clear");
            urlBuilder_.Replace("{api_name}", System.Uri.EscapeDataString(ConvertToString(api_name, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{segment_api_name}", System.Uri.EscapeDataString(ConvertToString(segment_api_name, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{organization}", System.Uri.EscapeDataString(ConvertToString(organization, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Clear_static_segment_data_success_response>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Clear_static_segment_data_failed_response>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Clear_static_segment_data_failed_response>("Represents a response for an unsuccessful clear static segment data.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Clear_static_segment_data_success_response);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Use this endpoint to load data into a specific static segment.</summary>
        /// <param name="api_name">Parameter represents API name of the list.</param>
        /// <param name="segment_api_name">Parameter represents API name of the segment.</param>
        /// <param name="keyFields">Parameter contains a comma-separated list of the key fields that need to be used to create or update records.</param>
        /// <param name="fields">Optional parameter containing a comma-separated list of the fields that are in the provided data records. Make sure that this list contains ALL fields (including the key fields) in the correct order. If this parameter is not provided, the first row of the provided data records will be used to determine the fields.</param>
        /// <param name="mode">Parameter indicates the mode of the data transfer (Sync or Stream). [Default: Sync]</param>
        /// <param name="deduplication">Parameter indicates the de-duplication option during an import data (ImportLastMatch or ImportFirstMatch). [Default: ImportLastMatch]</param>
        /// <param name="errorHandling">Parameter indicates error handling options whether to stop on error or continue on error</param>
        /// <returns>This endpoint loads data into the segment with the given segment-api-name in the list with the given api-name in the given organization. Loading data can be done synchronous or streamed.The data provided in the message body should be in Json format.e.g. [ ["SOMEID", "SOMESTRING", "SOMEDATE", "SOMEFLOAT", "SOMEGUID", "SOMEBOOL"], [1, "Some String 1", "2018 -03-27T11:57:20.1179032Z", 3.14, "42ccbae0-d4fe-4d5f-b46e-1c6859d14524", false], [2, "Some String 2", "2018 -03-27T11:57:20.1234186Z", 6.28, "2d33b365-1008-4407-a818-dab8e46fbf40", true] ]. The first line, containing the columns is optional and should ONLY be provided if the fields are not provided in the query string. Note that if the fields are provided in the query string, the first row will be considered as regular data. Check “Model” for the object-structure that will be returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<LoadDataResponseModel> LoadSegmentDataAsync(string api_name, string segment_api_name, string keyFields, string organization, string jsondata, string fields = null, string mode = null, string deduplication = null, string errorHandling = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (api_name == null)
                throw new System.ArgumentNullException("api_name");
    
            if (segment_api_name == null)
                throw new System.ArgumentNullException("segment_api_name");
    
            if (organization == null)
                throw new System.ArgumentNullException("organization");
    
            if (keyFields == null)
                throw new System.ArgumentNullException("keyFields");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/organizations/{organization}/lists/{api_name}/segments/{segment_api_name}/data/load?");
            urlBuilder_.Replace("{api_name}", System.Uri.EscapeDataString(ConvertToString(api_name, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{segment_api_name}", System.Uri.EscapeDataString(ConvertToString(segment_api_name, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{organization}", System.Uri.EscapeDataString(ConvertToString(organization, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append(System.Uri.EscapeDataString("keyFields") + "=").Append(System.Uri.EscapeDataString(ConvertToString(keyFields, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (fields != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("fields") + "=").Append(System.Uri.EscapeDataString(ConvertToString(fields, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (mode != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("mode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(mode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (deduplication != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("deduplication") + "=").Append(System.Uri.EscapeDataString(ConvertToString(deduplication, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (errorHandling != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("errorHandling") + "=").Append(System.Uri.EscapeDataString(ConvertToString(errorHandling, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(jsondata, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<LoadDataResponseModel>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(LoadDataResponseModel);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Use this endpoint to search for data records within a segment of a specific table.
        /// Searching data can be done synchronous or streamed.
        /// The data in the response will be in a Json format.</summary>
        /// <param name="api_name">Parameter represents the API name of the list.</param>
        /// <param name="segment_api_name">Parameter represents the API name of the segment.</param>
        /// <param name="request">Parameter specifies the details on the data that should be searched.</param>
        /// <param name="mode">Parameter indicates the mode of the data transfer (Sync or Stream). [Default: Sync]</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<object> SearchSegmentDataAsync(string api_name, string segment_api_name, SearchDataRequestModel request, string organization, string mode = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (api_name == null)
                throw new System.ArgumentNullException("api_name");
    
            if (segment_api_name == null)
                throw new System.ArgumentNullException("segment_api_name");
    
            if (organization == null)
                throw new System.ArgumentNullException("organization");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/organizations/{organization}/lists/{api_name}/segments/{segment_api_name}/data/search?");
            urlBuilder_.Replace("{api_name}", System.Uri.EscapeDataString(ConvertToString(api_name, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{segment_api_name}", System.Uri.EscapeDataString(ConvertToString(segment_api_name, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{organization}", System.Uri.EscapeDataString(ConvertToString(organization, System.Globalization.CultureInfo.InvariantCulture)));
            if (mode != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("mode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(mode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(request, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(object);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }
    
            public T Object { get; }
    
            public string Text { get; }
        }
    
        public bool ReadResponseAsString { get; set; }
        
        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }
        
            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }
    
        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value is System.Enum)
            {
                string name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }
                }
            }
            else if (value is bool) {
                return System.Convert.ToString(value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value != null && value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }
        
            return System.Convert.ToString(value, cultureInfo);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.1.6.0 (NJsonSchema v10.0.28.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class TaskClient : BaseSelligentClient
    {
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
    
        public TaskClient(SelligentClientConfiguration configuration) : base(configuration)
        {
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() => 
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
        }
    
        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Use this endpoint to get collection of tasks</summary>
        /// <param name="filter">Optional parameter to filter tasks by type (Sql, Import, Export or Batch).</param>
        /// <param name="search">Optional parameter to search tasks with a specific name, description or tags.</param>
        /// <param name="skip">Optional parameter to specify index to start picking task items from.</param>
        /// <param name="take">Optional parameter to specify count for the number of task items to be taken.</param>
        /// <returns>This endpoint will return a list of task-objects with the details of the tasks on the given organization. Check “Model” for the object - structure.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Tasks> GetTasksAsync(string organization, string filter = null, string search = null, int? skip = null, int? take = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (organization == null)
                throw new System.ArgumentNullException("organization");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/organizations/{organization}/tasks?");
            urlBuilder_.Replace("{organization}", System.Uri.EscapeDataString(ConvertToString(organization, System.Globalization.CultureInfo.InvariantCulture)));
            if (filter != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("filter") + "=").Append(System.Uri.EscapeDataString(ConvertToString(filter, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (search != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("search") + "=").Append(System.Uri.EscapeDataString(ConvertToString(search, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (skip != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("skip") + "=").Append(System.Uri.EscapeDataString(ConvertToString(skip, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (take != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("take") + "=").Append(System.Uri.EscapeDataString(ConvertToString(take, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Tasks>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Tasks);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Use this endpoint to get task details by API name of the task.</summary>
        /// <param name="api_name">Parameter represents API name of the task</param>
        /// <returns>This endpoint will return a task-object with the details of the task with the given api-name defined on the given organization. Check “Model” for the object - structure.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<TaskDetailsResponseModel> GetTaskAsync(string api_name, string organization, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (api_name == null)
                throw new System.ArgumentNullException("api_name");
    
            if (organization == null)
                throw new System.ArgumentNullException("organization");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/organizations/{organization}/tasks/{api_name}");
            urlBuilder_.Replace("{api_name}", System.Uri.EscapeDataString(ConvertToString(api_name, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{organization}", System.Uri.EscapeDataString(ConvertToString(organization, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<TaskDetailsResponseModel>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(TaskDetailsResponseModel);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Use this endpoint to delete a task by its API name in the given organization.</summary>
        /// <param name="api_name">Parameter to specify API name of the list.</param>
        /// <returns>This endpoint will delete the task with the given api-name in the given organization. Check “Model” for the object - structure that will be returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Delete_task_success_response> DeleteAsync(string api_name, string organization, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (api_name == null)
                throw new System.ArgumentNullException("api_name");
    
            if (organization == null)
                throw new System.ArgumentNullException("organization");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/organizations/{organization}/tasks/{api_name}");
            urlBuilder_.Replace("{api_name}", System.Uri.EscapeDataString(ConvertToString(api_name, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{organization}", System.Uri.EscapeDataString(ConvertToString(organization, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Delete_task_success_response>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Delete_task_failed_response>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Delete_task_failed_response>("Represents a response for an unsuccessful delete of task.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Delete_task_success_response);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Use this endpoint to get actions of tasks</summary>
        /// <param name="api_name">Parameter represents API name of the task</param>
        /// <returns>This endpoint will return a list of task-actions for the task with the given api-name defined on the given organization. Check “Model” for the object - structure.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<TaskActions> GetTaskActionsAsync(string api_name, string organization, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (api_name == null)
                throw new System.ArgumentNullException("api_name");
    
            if (organization == null)
                throw new System.ArgumentNullException("organization");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/organizations/{organization}/tasks/{api_name}/actions");
            urlBuilder_.Replace("{api_name}", System.Uri.EscapeDataString(ConvertToString(api_name, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{organization}", System.Uri.EscapeDataString(ConvertToString(organization, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<TaskActions>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(TaskActions);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Use this endpoint to disable a Task</summary>
        /// <param name="api_name">Parameter represents API name of the task</param>
        /// <returns>This endpoint will disable the task with the given api-name defined on the given organization.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Disable_task_response_example> DisableTaskAsync(string api_name, string organization, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (api_name == null)
                throw new System.ArgumentNullException("api_name");
    
            if (organization == null)
                throw new System.ArgumentNullException("organization");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/organizations/{organization}/tasks/{api_name}/actions/disable");
            urlBuilder_.Replace("{api_name}", System.Uri.EscapeDataString(ConvertToString(api_name, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{organization}", System.Uri.EscapeDataString(ConvertToString(organization, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Disable_task_response_example>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Disable_task_response_example);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Use this endpoint to enable a Task</summary>
        /// <param name="api_name">Parameter represents API name of the task</param>
        /// <returns>This endpoint will enable the task with the given api-name defined on the given organization.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Enable_task_response_example> EnableTaskAsync(string api_name, string organization, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (api_name == null)
                throw new System.ArgumentNullException("api_name");
    
            if (organization == null)
                throw new System.ArgumentNullException("organization");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/organizations/{organization}/tasks/{api_name}/actions/enable");
            urlBuilder_.Replace("{api_name}", System.Uri.EscapeDataString(ConvertToString(api_name, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{organization}", System.Uri.EscapeDataString(ConvertToString(organization, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Enable_task_response_example>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Enable_task_response_example);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Use this endpoint to run a Task</summary>
        /// <param name="api_name">Parameter represents API name of the task</param>
        /// <returns>This endpoint will execute the task with the given api-name defined on the given organization.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Run_task_success_response> RunTaskAsync(string api_name, string organization, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (api_name == null)
                throw new System.ArgumentNullException("api_name");
    
            if (organization == null)
                throw new System.ArgumentNullException("organization");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/organizations/{organization}/tasks/{api_name}/actions/run");
            urlBuilder_.Replace("{api_name}", System.Uri.EscapeDataString(ConvertToString(api_name, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{organization}", System.Uri.EscapeDataString(ConvertToString(organization, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Run_task_success_response>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "404") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Run_task_failed_response>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Run_task_failed_response>("Failed to run the task.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Run_task_success_response);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Use this endpoint to create a batch task.</summary>
        /// <param name="model">Parameter represesnts model for creating a batch task</param>
        /// <param name="enable_after_creation">Parameter represents if the task should be enabled after creation</param>
        /// <returns>The batch task was successfully created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Create_export_task_success_example_response> CreateBatchTaskAsync(CreateBatchTaskApiRequestModel model, string organization, bool? enable_after_creation = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (organization == null)
                throw new System.ArgumentNullException("organization");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/organizations/{organization}/tasks/batch?");
            urlBuilder_.Replace("{organization}", System.Uri.EscapeDataString(ConvertToString(organization, System.Globalization.CultureInfo.InvariantCulture)));
            if (enable_after_creation != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("enable_after_creation") + "=").Append(System.Uri.EscapeDataString(ConvertToString(enable_after_creation, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(model, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Create_export_task_success_example_response>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Create_export_task_failed_example_response>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Create_export_task_failed_example_response>("Failed to create the batch task", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Create_export_task_success_example_response);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Use this endpoint to create an export Task</summary>
        /// <param name="model">Parameter represents model of export task</param>
        /// <param name="enable_after_creation">Parameter represents if the task should be enabled after creation</param>
        /// <returns>This endpoint will create new export task</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Create_export_task_success_example_response> CreateExportTaskAsync(CreateExportTaskApiRequestModel model, string organization, bool? enable_after_creation = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (organization == null)
                throw new System.ArgumentNullException("organization");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/organizations/{organization}/tasks/export?");
            urlBuilder_.Replace("{organization}", System.Uri.EscapeDataString(ConvertToString(organization, System.Globalization.CultureInfo.InvariantCulture)));
            if (enable_after_creation != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("enable_after_creation") + "=").Append(System.Uri.EscapeDataString(ConvertToString(enable_after_creation, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(model, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Create_export_task_success_example_response>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Create_export_task_failed_example_response>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Create_export_task_failed_example_response>("Export Task not created", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Create_export_task_success_example_response);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Use this endpoint to create an import Task</summary>
        /// <param name="model">Parameter represents model of import task</param>
        /// <param name="enable_after_creation">Parameter represents if the task should be enabled after creation</param>
        /// <returns>This endpoint will create new import task</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Create_export_task_success_example_response> CreateImportTaskAsync(CreateImportTaskApiRequestModel model, string organization, bool? enable_after_creation = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (organization == null)
                throw new System.ArgumentNullException("organization");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/organizations/{organization}/tasks/import?");
            urlBuilder_.Replace("{organization}", System.Uri.EscapeDataString(ConvertToString(organization, System.Globalization.CultureInfo.InvariantCulture)));
            if (enable_after_creation != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("enable_after_creation") + "=").Append(System.Uri.EscapeDataString(ConvertToString(enable_after_creation, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(model, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Create_export_task_success_example_response>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Create_export_task_failed_example_response>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Create_export_task_failed_example_response>("Import Task not created", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Create_export_task_success_example_response);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Use this endpoint to create a SQL Task</summary>
        /// <param name="model">Parameter represents model of SQL task</param>
        /// <param name="enable_after_creation">Parameter represents if the task should be enabled after creation</param>
        /// <returns>This endpoint will create new SQL task</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Create_export_task_success_example_response> CreateSqlTaskAsync(CreateSqlTaskApiRequestModel model, string organization, bool? enable_after_creation = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (organization == null)
                throw new System.ArgumentNullException("organization");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/organizations/{organization}/tasks/sql?");
            urlBuilder_.Replace("{organization}", System.Uri.EscapeDataString(ConvertToString(organization, System.Globalization.CultureInfo.InvariantCulture)));
            if (enable_after_creation != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("enable_after_creation") + "=").Append(System.Uri.EscapeDataString(ConvertToString(enable_after_creation, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(model, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Create_export_task_success_example_response>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Create_export_task_failed_example_response>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Create_export_task_failed_example_response>("SQL Task not created", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Create_export_task_success_example_response);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }
    
            public T Object { get; }
    
            public string Text { get; }
        }
    
        public bool ReadResponseAsString { get; set; }
        
        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }
        
            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }
    
        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value is System.Enum)
            {
                string name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }
                }
            }
            else if (value is bool) {
                return System.Convert.ToString(value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value != null && value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }
        
            return System.Convert.ToString(value, cultureInfo);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.1.6.0 (NJsonSchema v10.0.28.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class StatusClient : BaseSelligentClient
    {
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
    
        public StatusClient(SelligentClientConfiguration configuration) : base(configuration)
        {
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() => 
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
        }
    
        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets this instance</summary>
        /// <returns>This endpoint will only return an http-status-code. If this is 200, the API is up and running.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Status> GetAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Status");
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Status>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Status);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }
    
            public T Object { get; }
    
            public string Text { get; }
        }
    
        public bool ReadResponseAsString { get; set; }
        
        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }
        
            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }
    
        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value is System.Enum)
            {
                string name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }
                }
            }
            else if (value is bool) {
                return System.Convert.ToString(value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value != null && value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }
        
            return System.Convert.ToString(value, cultureInfo);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.1.6.0 (NJsonSchema v10.0.28.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class StoredProcedureClient : BaseSelligentClient
    {
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
    
        public StoredProcedureClient(SelligentClientConfiguration configuration) : base(configuration)
        {
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() => 
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
        }
    
        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Use this endpoint to get list of all stored procedures.</summary>
        /// <param name="filter">Optional parameter to filter stored procedures by type (General, Bounce or Journey).</param>
        /// <param name="search">Optional parameter to search stored procedures by name or description.</param>
        /// <param name="skip">Optional parameter to specify index to start picking stored procedure items from.</param>
        /// <param name="take">Optional parameter to specify count for the number of stored procedure items to be taken.</param>
        /// <returns>This endpoint will return a list of stored procedures defined on the given organization. Check “Model” for the object - structure.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Storedprocedures> GetStoredProceduresAsync(string filter = null, string search = null, int? skip = null, int? take = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/storedprocedures?");
            if (filter != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("filter") + "=").Append(System.Uri.EscapeDataString(ConvertToString(filter, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (search != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("search") + "=").Append(System.Uri.EscapeDataString(ConvertToString(search, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (skip != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("skip") + "=").Append(System.Uri.EscapeDataString(ConvertToString(skip, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (take != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("take") + "=").Append(System.Uri.EscapeDataString(ConvertToString(take, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Storedprocedures>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Storedprocedures);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Use this endpoint to create a stored procedure.</summary>
        /// <param name="model">Parameter to specify stored procedure details.</param>
        /// <returns>This endpoint will create a new stored procedure of the given type. Check “Model” for the object - structure.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Create_stored_procedure_success_response> CreateStoredProcedureAsync(CreateStoredProcedureModel model, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/storedprocedures");
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(model, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Create_stored_procedure_success_response>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Create_stored_procedure_failed_response>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Create_stored_procedure_failed_response>("Stored Procedure Not Created", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Create_stored_procedure_success_response);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Use this endpoint to get details of stored procedure by the specified name.</summary>
        /// <param name="name">Parameter represents name of the stored procedure</param>
        /// <returns>This endpoint will return a stored procedure-object defined on the given organization with the given api-name. Check “Model” for the object - structure.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<StoredProcedureDetailsResponseModel> GetStoredProcedureDetailsAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (name == null)
                throw new System.ArgumentNullException("name");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/storedprocedures/{name}");
            urlBuilder_.Replace("{name}", System.Uri.EscapeDataString(ConvertToString(name, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<StoredProcedureDetailsResponseModel>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(StoredProcedureDetailsResponseModel);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Use this endpoint to update an existing stored procedure.</summary>
        /// <param name="name">Parameter to specify store procedure name</param>
        /// <param name="model">Parameter to update stored procedure details for given name.</param>
        /// <returns>Calling this endpoint will update properties of the stored procedure with the given name.Check “Model” for the object - structure.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Update_stored_procedure_success_response> UpdateStoredProcedureAsync(string name, UpdateStoredProcedureModel model, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (name == null)
                throw new System.ArgumentNullException("name");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/storedprocedures/{name}");
            urlBuilder_.Replace("{name}", System.Uri.EscapeDataString(ConvertToString(name, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(model, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Update_stored_procedure_success_response>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Update_stored_procedure_failed_response>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Update_stored_procedure_failed_response>("Stored Procedure Not Created", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Update_stored_procedure_success_response);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Use this endpoint to delete a existing stored procedure.</summary>
        /// <param name="name">Parameter to specify existing stored procedure.</param>
        /// <returns>This endpoint will delete the existing stored procedure with the given name in the given organization.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Delete_stored_procedure_success_response> DeleteAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (name == null)
                throw new System.ArgumentNullException("name");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/storedprocedures/{name}");
            urlBuilder_.Replace("{name}", System.Uri.EscapeDataString(ConvertToString(name, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false))
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Delete_stored_procedure_success_response>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Delete_stored_procedure_failed_response>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Delete_stored_procedure_failed_response>("Represents a response for an unsuccessful delete of existing stored procedure.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Delete_stored_procedure_success_response);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }
    
            public T Object { get; }
    
            public string Text { get; }
        }
    
        public bool ReadResponseAsString { get; set; }
        
        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }
        
            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }
    
        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value is System.Enum)
            {
                string name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }
                }
            }
            else if (value is bool) {
                return System.Convert.ToString(value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value != null && value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }
        
            return System.Convert.ToString(value, cultureInfo);
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class JourneyDetailsResponseModel 
    {
        [Newtonsoft.Json.JsonConstructor]
        public JourneyDetailsResponseModel(string @api_name, string @description, string @name, string @type)
        {
            this.Type = @type;
            this.Name = @name;
            this.Api_name = @api_name;
            this.Description = @description;
        }
    
        /// <summary>Type of the journey.</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; }
    
        /// <summary>Name of the journey.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; }
    
        /// <summary>API name of the journey.</summary>
        [Newtonsoft.Json.JsonProperty("api_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Api_name { get; }
    
        /// <summary>Description of the journey.</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Delete_journey_success_response 
    {
        [Newtonsoft.Json.JsonConstructor]
        public Delete_journey_success_response(string @message, Delete_journey_success_responseResult_code? @result_code)
        {
            this.Result_code = @result_code;
            this.Message = @message;
        }
    
        [Newtonsoft.Json.JsonProperty("result_code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Delete_journey_success_responseResult_code? Result_code { get; }
    
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CreateSmsModel 
    {
        [Newtonsoft.Json.JsonConstructor]
        public CreateSmsModel(System.Collections.Generic.IDictionary<string, SmsContentModel> @content, CreateContentPropertyModel @properties)
        {
            this.Content = @content;
            this.Properties = @properties;
        }
    
        [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.IDictionary<string, SmsContentModel> Content { get; }
    
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public CreateContentPropertyModel Properties { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SmsContentModel 
    {
        [Newtonsoft.Json.JsonConstructor]
        public SmsContentModel(string @text)
        {
            this.Text = @text;
        }
    
        [Newtonsoft.Json.JsonProperty("text", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Text { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CreateContentPropertyModel 
    {
        [Newtonsoft.Json.JsonConstructor]
        public CreateContentPropertyModel(string @api_name, string @audience_api_name, string @default_language, string @description, string @empty_language, System.Collections.Generic.ICollection<string> @languages, string @name, System.Collections.Generic.ICollection<string> @tags)
        {
            this.Name = @name;
            this.Description = @description;
            this.Api_name = @api_name;
            this.Tags = @tags;
            this.Languages = @languages;
            this.Default_language = @default_language;
            this.Empty_language = @empty_language;
            this.Audience_api_name = @audience_api_name;
        }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; }
    
        [Newtonsoft.Json.JsonProperty("api_name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Api_name { get; }
    
        [Newtonsoft.Json.JsonProperty("tags", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Tags { get; }
    
        [Newtonsoft.Json.JsonProperty("languages", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> Languages { get; }
    
        [Newtonsoft.Json.JsonProperty("default_language", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Default_language { get; }
    
        [Newtonsoft.Json.JsonProperty("empty_language", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Empty_language { get; }
    
        [Newtonsoft.Json.JsonProperty("audience_api_name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Audience_api_name { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Create_sms_content_success_response 
    {
        [Newtonsoft.Json.JsonConstructor]
        public Create_sms_content_success_response(string @message, Create_sms_content_success_responseResult_code? @result_code)
        {
            this.Result_code = @result_code;
            this.Message = @message;
        }
    
        [Newtonsoft.Json.JsonProperty("result_code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Create_sms_content_success_responseResult_code? Result_code { get; }
    
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Create_sms_content_failed_response 
    {
        [Newtonsoft.Json.JsonConstructor]
        public Create_sms_content_failed_response(System.Collections.Generic.ICollection<Error_model> @errors, string @message, Create_sms_content_failed_responseResult_code? @result_code)
        {
            this.Errors = @errors;
            this.Result_code = @result_code;
            this.Message = @message;
        }
    
        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Error_model> Errors { get; }
    
        [Newtonsoft.Json.JsonProperty("result_code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Create_sms_content_failed_responseResult_code? Result_code { get; }
    
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Error_model 
    {
        [Newtonsoft.Json.JsonConstructor]
        public Error_model(string @description, string @error_code)
        {
            this.Error_code = @error_code;
            this.Description = @description;
        }
    
        [Newtonsoft.Json.JsonProperty("error_code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Error_code { get; }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CreateMobileMessageModel 
    {
        [Newtonsoft.Json.JsonConstructor]
        public CreateMobileMessageModel(System.Collections.Generic.IDictionary<string, MobileMessageContentModel> @content, CreateMobileMessagePropertyModel @mobile_properties, CreateContentPropertyModel @properties)
        {
            this.Mobile_properties = @mobile_properties;
            this.Content = @content;
            this.Properties = @properties;
        }
    
        [Newtonsoft.Json.JsonProperty("mobile_properties", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public CreateMobileMessagePropertyModel Mobile_properties { get; }
    
        [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.IDictionary<string, MobileMessageContentModel> Content { get; }
    
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public CreateContentPropertyModel Properties { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CreateMobileMessagePropertyModel 
    {
        [Newtonsoft.Json.JsonConstructor]
        public CreateMobileMessagePropertyModel(bool @custom_in_app_content, CreateMobileMessagePropertyModelDistribution_type @distribution_type, string @expiration_date, CreateMobileMessagePropertyModelIn_app_content_type? @in_app_content_type)
        {
            this.Distribution_type = @distribution_type;
            this.Custom_in_app_content = @custom_in_app_content;
            this.In_app_content_type = @in_app_content_type;
            this.Expiration_date = @expiration_date;
        }
    
        [Newtonsoft.Json.JsonProperty("distribution_type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CreateMobileMessagePropertyModelDistribution_type Distribution_type { get; }
    
        [Newtonsoft.Json.JsonProperty("custom_in_app_content", Required = Newtonsoft.Json.Required.Always)]
        public bool Custom_in_app_content { get; }
    
        [Newtonsoft.Json.JsonProperty("in_app_content_type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CreateMobileMessagePropertyModelIn_app_content_type? In_app_content_type { get; }
    
        [Newtonsoft.Json.JsonProperty("expiration_date", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Expiration_date { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MobileMessageContentModel 
    {
        [Newtonsoft.Json.JsonConstructor]
        public MobileMessageContentModel(InAppModel @in_app, MobilePushModel @mobile_push)
        {
            this.Mobile_push = @mobile_push;
            this.In_app = @in_app;
        }
    
        [Newtonsoft.Json.JsonProperty("mobile_push", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MobilePushModel Mobile_push { get; }
    
        [Newtonsoft.Json.JsonProperty("in_app", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public InAppModel In_app { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MobilePushModel 
    {
        [Newtonsoft.Json.JsonConstructor]
        public MobilePushModel(string @content, string @title)
        {
            this.Title = @title;
            this.Content = @content;
        }
    
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Title { get; }
    
        [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Content { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class InAppModel 
    {
        [Newtonsoft.Json.JsonConstructor]
        public InAppModel(InAppContentModel @content, string @title)
        {
            this.Title = @title;
            this.Content = @content;
        }
    
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; }
    
        [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public InAppContentModel Content { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class InAppContentModel 
    {
        [Newtonsoft.Json.JsonConstructor]
        public InAppContentModel(string @text, string @url)
        {
            this.Text = @text;
            this.Url = @url;
        }
    
        [Newtonsoft.Json.JsonProperty("text", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Text { get; }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Create_mobile_message_content_success_response 
    {
        [Newtonsoft.Json.JsonConstructor]
        public Create_mobile_message_content_success_response(string @message, Create_mobile_message_content_success_responseResult_code? @result_code)
        {
            this.Result_code = @result_code;
            this.Message = @message;
        }
    
        [Newtonsoft.Json.JsonProperty("result_code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Create_mobile_message_content_success_responseResult_code? Result_code { get; }
    
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Create_mobile_message_content_failed_response 
    {
        [Newtonsoft.Json.JsonConstructor]
        public Create_mobile_message_content_failed_response(System.Collections.Generic.ICollection<Error_model> @errors, string @message, Create_mobile_message_content_failed_responseResult_code? @result_code)
        {
            this.Errors = @errors;
            this.Result_code = @result_code;
            this.Message = @message;
        }
    
        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Error_model> Errors { get; }
    
        [Newtonsoft.Json.JsonProperty("result_code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Create_mobile_message_content_failed_responseResult_code? Result_code { get; }
    
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CreatePageModel 
    {
        [Newtonsoft.Json.JsonConstructor]
        public CreatePageModel(PageContentModel @content, CreateContentPropertyModel @properties)
        {
            this.Content = @content;
            this.Properties = @properties;
        }
    
        [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public PageContentModel Content { get; }
    
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public CreateContentPropertyModel Properties { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PageContentModel 
    {
        [Newtonsoft.Json.JsonConstructor]
        public PageContentModel(string @html)
        {
            this.Html = @html;
        }
    
        [Newtonsoft.Json.JsonProperty("html", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Html { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Create_page_content_success_response 
    {
        [Newtonsoft.Json.JsonConstructor]
        public Create_page_content_success_response(string @message, Create_page_content_success_responseResult_code? @result_code)
        {
            this.Result_code = @result_code;
            this.Message = @message;
        }
    
        [Newtonsoft.Json.JsonProperty("result_code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Create_page_content_success_responseResult_code? Result_code { get; }
    
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Create_page_content_failed_response 
    {
        [Newtonsoft.Json.JsonConstructor]
        public Create_page_content_failed_response(System.Collections.Generic.ICollection<Error_model> @errors, string @message, Create_page_content_failed_responseResult_code? @result_code)
        {
            this.Errors = @errors;
            this.Result_code = @result_code;
            this.Message = @message;
        }
    
        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Error_model> Errors { get; }
    
        [Newtonsoft.Json.JsonProperty("result_code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Create_page_content_failed_responseResult_code? Result_code { get; }
    
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CreateEmailMessageModel 
    {
        [Newtonsoft.Json.JsonConstructor]
        public CreateEmailMessageModel(EmailMessageContentModel @content, System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<EmailMessageHeaderModel>> @headers, CreateContentPropertyModel @properties)
        {
            this.Headers = @headers;
            this.Content = @content;
            this.Properties = @properties;
        }
    
        [Newtonsoft.Json.JsonProperty("headers", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<EmailMessageHeaderModel>> Headers { get; }
    
        [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public EmailMessageContentModel Content { get; }
    
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public CreateContentPropertyModel Properties { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class EmailMessageHeaderModel 
    {
        [Newtonsoft.Json.JsonConstructor]
        public EmailMessageHeaderModel(string @from_alias, string @from_domain, string @preheader, string @reply_alias, string @reply_email, string @subject, string @to_alias)
        {
            this.From_domain = @from_domain;
            this.From_alias = @from_alias;
            this.Reply_email = @reply_email;
            this.Reply_alias = @reply_alias;
            this.To_alias = @to_alias;
            this.Preheader = @preheader;
            this.Subject = @subject;
        }
    
        [Newtonsoft.Json.JsonProperty("from_domain", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string From_domain { get; }
    
        [Newtonsoft.Json.JsonProperty("from_alias", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string From_alias { get; }
    
        [Newtonsoft.Json.JsonProperty("reply_email", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Reply_email { get; }
    
        [Newtonsoft.Json.JsonProperty("reply_alias", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Reply_alias { get; }
    
        [Newtonsoft.Json.JsonProperty("to_alias", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string To_alias { get; }
    
        [Newtonsoft.Json.JsonProperty("preheader", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Preheader { get; }
    
        [Newtonsoft.Json.JsonProperty("subject", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Subject { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class EmailMessageContentModel 
    {
        [Newtonsoft.Json.JsonConstructor]
        public EmailMessageContentModel(string @html, string @text)
        {
            this.Text = @text;
            this.Html = @html;
        }
    
        [Newtonsoft.Json.JsonProperty("text", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Text { get; }
    
        [Newtonsoft.Json.JsonProperty("html", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Html { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Create_email_message_content_success_response 
    {
        [Newtonsoft.Json.JsonConstructor]
        public Create_email_message_content_success_response(string @message, Create_email_message_content_success_responseResult_code? @result_code)
        {
            this.Result_code = @result_code;
            this.Message = @message;
        }
    
        [Newtonsoft.Json.JsonProperty("result_code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Create_email_message_content_success_responseResult_code? Result_code { get; }
    
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Create_email_message_content_failed_response 
    {
        [Newtonsoft.Json.JsonConstructor]
        public Create_email_message_content_failed_response(System.Collections.Generic.ICollection<Error_model> @errors, string @message, Create_email_message_content_failed_responseResult_code? @result_code)
        {
            this.Errors = @errors;
            this.Result_code = @result_code;
            this.Message = @message;
        }
    
        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Error_model> Errors { get; }
    
        [Newtonsoft.Json.JsonProperty("result_code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Create_email_message_content_failed_responseResult_code? Result_code { get; }
    
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ContentDetailsResponseModel 
    {
        [Newtonsoft.Json.JsonConstructor]
        public ContentDetailsResponseModel(string @api_name, string @description, string @name, System.Collections.Generic.ICollection<string> @tags, ContentDetailsResponseModelType? @type)
        {
            this.Name = @name;
            this.Description = @description;
            this.Api_name = @api_name;
            this.Tags = @tags;
            this.Type = @type;
        }
    
        /// <summary>Name of the Content.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; }
    
        /// <summary>Description of the Content.</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; }
    
        /// <summary>API name of the Content.</summary>
        [Newtonsoft.Json.JsonProperty("api_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Api_name { get; }
    
        /// <summary>Tags  of the Content.</summary>
        [Newtonsoft.Json.JsonProperty("tags", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Tags { get; }
    
        /// <summary>Channel type of the Content.</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ContentDetailsResponseModelType? Type { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Delete_content_success_response 
    {
        [Newtonsoft.Json.JsonConstructor]
        public Delete_content_success_response(string @message, Delete_content_success_responseResult_code? @result_code)
        {
            this.Result_code = @result_code;
            this.Message = @message;
        }
    
        [Newtonsoft.Json.JsonProperty("result_code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Delete_content_success_responseResult_code? Result_code { get; }
    
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Journey_entry_point_info_response 
    {
        [Newtonsoft.Json.JsonConstructor]
        public Journey_entry_point_info_response(Journey_entry_point_info @model, string @system_info)
        {
            this.System_info = @system_info;
            this.Model = @model;
        }
    
        /// <summary>Can contain some important system information.</summary>
        [Newtonsoft.Json.JsonProperty("system_info", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string System_info { get; }
    
        /// <summary>The response data when retrieving information about the resource.</summary>
        [Newtonsoft.Json.JsonProperty("model", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Journey_entry_point_info Model { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Journey_entry_point_info 
    {
        [Newtonsoft.Json.JsonConstructor]
        public Journey_entry_point_info(string @api_name, string @entry_point_type, string @name)
        {
            this.Entry_point_type = @entry_point_type;
            this.Name = @name;
            this.Api_name = @api_name;
        }
    
        /// <summary>The type of entry point.</summary>
        [Newtonsoft.Json.JsonProperty("entry_point_type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Entry_point_type { get; }
    
        /// <summary>The name of entry point.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; }
    
        /// <summary>The api indentifier of the entry point.</summary>
        [Newtonsoft.Json.JsonProperty("api_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Api_name { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Journey_entry_point_response 
    {
        [Newtonsoft.Json.JsonConstructor]
        public Journey_entry_point_response(Journey_entry_point @model, string @system_info)
        {
            this.System_info = @system_info;
            this.Model = @model;
        }
    
        /// <summary>Can contain some important system information.</summary>
        [Newtonsoft.Json.JsonProperty("system_info", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string System_info { get; }
    
        /// <summary>The response data when retrieving information about the resource.</summary>
        [Newtonsoft.Json.JsonProperty("model", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Journey_entry_point Model { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Journey_entry_point 
    {
        [Newtonsoft.Json.JsonConstructor]
        public Journey_entry_point(string @api_name, string @entry_point_type, string @name, System.Collections.Generic.ICollection<Journey_entry_point_parameter> @parameters)
        {
            this.Entry_point_type = @entry_point_type;
            this.Name = @name;
            this.Api_name = @api_name;
            this.Parameters = @parameters;
        }
    
        /// <summary>The type of entry point.</summary>
        [Newtonsoft.Json.JsonProperty("entry_point_type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Entry_point_type { get; }
    
        /// <summary>The name of entry point.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; }
    
        /// <summary>The api indentifier of the entry point.</summary>
        [Newtonsoft.Json.JsonProperty("api_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Api_name { get; }
    
        /// <summary>The parameters that the entry point expects when it is used to be triggerd.</summary>
        [Newtonsoft.Json.JsonProperty("parameters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Journey_entry_point_parameter> Parameters { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Journey_entry_point_parameter 
    {
        [Newtonsoft.Json.JsonConstructor]
        public Journey_entry_point_parameter(string @name, bool? @required)
        {
            this.Name = @name;
            this.Required = @required;
        }
    
        /// <summary>The name of the parameter.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; }
    
        /// <summary>An indicator on wheter the parameter is required or not when used to trigger the entry point.</summary>
        [Newtonsoft.Json.JsonProperty("required", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Required { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Trigger_journey_entry_points_request 
    {
        [Newtonsoft.Json.JsonConstructor]
        public Trigger_journey_entry_points_request(System.Collections.Generic.IDictionary<string, string> @parameter_values, long? @user_id)
        {
            this.User_id = @user_id;
            this.Parameter_values = @parameter_values;
        }
    
        /// <summary>The id of the user on the current context (eg. default 0, same as Anonymous)</summary>
        [Newtonsoft.Json.JsonProperty("user_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? User_id { get; }
    
        /// <summary>The parameter and the value of that parameter that needs to be processed.</summary>
        [Newtonsoft.Json.JsonProperty("parameter_values", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string> Parameter_values { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Trigger_journey_entry_point_response 
    {
        [Newtonsoft.Json.JsonConstructor]
        public Trigger_journey_entry_point_response(string @body, Trigger_journey_entry_point_responseResult_code? @result_code, Trigger_journey_entry_point_responseResult_type? @result_type)
        {
            this.Result_code = @result_code;
            this.Result_type = @result_type;
            this.Body = @body;
        }
    
        /// <summary>A generic code indicating what the state of the request is.</summary>
        [Newtonsoft.Json.JsonProperty("result_code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Trigger_journey_entry_point_responseResult_code? Result_code { get; }
    
        /// <summary>The type of result the body may contain when the call is succesful</summary>
        [Newtonsoft.Json.JsonProperty("result_type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Trigger_journey_entry_point_responseResult_type? Result_type { get; }
    
        /// <summary>The result of the current request when succeeded.</summary>
        [Newtonsoft.Json.JsonProperty("body", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Body { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Trigger_journey_entry_point_failed_response 
    {
        [Newtonsoft.Json.JsonConstructor]
        public Trigger_journey_entry_point_failed_response(System.Collections.Generic.ICollection<Error_model> @errors, string @message, Trigger_journey_entry_point_failed_responseResult_code? @result_code)
        {
            this.Message = @message;
            this.Errors = @errors;
            this.Result_code = @result_code;
        }
    
        /// <summary>A description on what has failed.</summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; }
    
        /// <summary>Detailed information about 1 or more errors that occured during the request.</summary>
        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Error_model> Errors { get; }
    
        /// <summary>A generic code indicating what the state of the request is.</summary>
        [Newtonsoft.Json.JsonProperty("result_code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Trigger_journey_entry_point_failed_responseResult_code? Result_code { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class LoadDataResponseModel 
    {
        [Newtonsoft.Json.JsonConstructor]
        public LoadDataResponseModel(System.Collections.Generic.ICollection<ErrorDTO> @errors, System.Collections.Generic.ICollection<InvalidRecordModel> @invalid_records, long? @number_of_deleted_records, long? @number_of_duplicate_records, long? @number_of_failed_records, long? @number_of_inserted_records, long? @number_of_records_not_found, long? @number_of_updated_records, LoadDataResponseModelResult_code? @result_code)
        {
            this.Errors = @errors;
            this.Result_code = @result_code;
            this.Number_of_inserted_records = @number_of_inserted_records;
            this.Number_of_failed_records = @number_of_failed_records;
            this.Number_of_updated_records = @number_of_updated_records;
            this.Number_of_duplicate_records = @number_of_duplicate_records;
            this.Number_of_records_not_found = @number_of_records_not_found;
            this.Invalid_records = @invalid_records;
            this.Number_of_deleted_records = @number_of_deleted_records;
        }
    
        /// <summary>In case loading the data fails, this property contains the list of validation errors.</summary>
        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ErrorDTO> Errors { get; }
    
        /// <summary>Indicates the resultCode for the request</summary>
        [Newtonsoft.Json.JsonProperty("result_code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LoadDataResponseModelResult_code? Result_code { get; }
    
        /// <summary>When the data load succeeded, this property contains the number of inserted records</summary>
        [Newtonsoft.Json.JsonProperty("number_of_inserted_records", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Number_of_inserted_records { get; }
    
        /// <summary>When the data load partially succeeded, this property contains the number of failed records</summary>
        [Newtonsoft.Json.JsonProperty("number_of_failed_records", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Number_of_failed_records { get; }
    
        /// <summary>When the data load succeeded, this property contains the number of updated records</summary>
        [Newtonsoft.Json.JsonProperty("number_of_updated_records", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Number_of_updated_records { get; }
    
        /// <summary>When the data load succeeded, this property contains the number of duplicate records</summary>
        [Newtonsoft.Json.JsonProperty("number_of_duplicate_records", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Number_of_duplicate_records { get; }
    
        /// <summary>When the data load succeeded, this property contains the number of records not found</summary>
        [Newtonsoft.Json.JsonProperty("number_of_records_not_found", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Number_of_records_not_found { get; }
    
        /// <summary>When the data load partially succeeded, this property contains information about the invalid records</summary>
        [Newtonsoft.Json.JsonProperty("invalid_records", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<InvalidRecordModel> Invalid_records { get; }
    
        /// <summary>When the data delete succeeded, this property contains information about the deleted records</summary>
        [Newtonsoft.Json.JsonProperty("number_of_deleted_records", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Number_of_deleted_records { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ErrorDTO 
    {
        [Newtonsoft.Json.JsonConstructor]
        public ErrorDTO(string @description, string @error_code)
        {
            this.Error_code = @error_code;
            this.Description = @description;
        }
    
        [Newtonsoft.Json.JsonProperty("error_code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Error_code { get; }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class InvalidRecordModel 
    {
        [Newtonsoft.Json.JsonConstructor]
        public InvalidRecordModel(string @field_name, string @message, int? @record_index, InvalidRecordModelValidation_code? @validation_code)
        {
            this.Record_index = @record_index;
            this.Field_name = @field_name;
            this.Message = @message;
            this.Validation_code = @validation_code;
        }
    
        /// <summary>Index of the invalid record</summary>
        [Newtonsoft.Json.JsonProperty("record_index", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Record_index { get; }
    
        /// <summary>Name of the field that contains the invalid data</summary>
        [Newtonsoft.Json.JsonProperty("field_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Field_name { get; }
    
        /// <summary>Message containing information about the error</summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; }
    
        /// <summary>Validation code indicating the error.</summary>
        [Newtonsoft.Json.JsonProperty("validation_code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InvalidRecordModelValidation_code? Validation_code { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SearchDataRequestModel 
    {
        [Newtonsoft.Json.JsonConstructor]
        public SearchDataRequestModel(System.Collections.Generic.ICollection<string> @fields, System.Collections.Generic.ICollection<SearchDataFilterDTO> @filters, string @order_by, string @order_by_direction, int? @skip, int? @take)
        {
            this.Fields = @fields;
            this.Filters = @filters;
            this.Skip = @skip;
            this.Take = @take;
            this.Order_by = @order_by;
            this.Order_by_direction = @order_by_direction;
        }
    
        [Newtonsoft.Json.JsonProperty("fields", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> Fields { get; }
    
        [Newtonsoft.Json.JsonProperty("filters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SearchDataFilterDTO> Filters { get; }
    
        [Newtonsoft.Json.JsonProperty("skip", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Skip { get; }
    
        [Newtonsoft.Json.JsonProperty("take", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Take { get; }
    
        [Newtonsoft.Json.JsonProperty("order_by", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Order_by { get; }
    
        [Newtonsoft.Json.JsonProperty("order_by_direction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Order_by_direction { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SearchDataFilterDTO 
    {
        [Newtonsoft.Json.JsonConstructor]
        public SearchDataFilterDTO(string @field_name, string @field_value, SearchDataFilterDTOOperator? @operator)
        {
            this.Field_name = @field_name;
            this.Operator = @operator;
            this.Field_value = @field_value;
        }
    
        [Newtonsoft.Json.JsonProperty("field_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Field_name { get; }
    
        [Newtonsoft.Json.JsonProperty("operator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SearchDataFilterDTOOperator? Operator { get; }
    
        [Newtonsoft.Json.JsonProperty("field_value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Field_value { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SearchDataResponseModel 
    {
        [Newtonsoft.Json.JsonConstructor]
        public SearchDataResponseModel(long? @count, System.Collections.Generic.ICollection<System.Collections.Generic.ICollection<object>> @data, System.Collections.Generic.ICollection<ErrorDTO> @errors, System.Collections.Generic.ICollection<string> @fields, SearchDataResponseModelResult_code? @result_code, long? @total_count)
        {
            this.Fields = @fields;
            this.Data = @data;
            this.Result_code = @result_code;
            this.Errors = @errors;
            this.Count = @count;
            this.Total_count = @total_count;
        }
    
        [Newtonsoft.Json.JsonProperty("fields", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Fields { get; }
    
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<System.Collections.Generic.ICollection<object>> Data { get; }
    
        [Newtonsoft.Json.JsonProperty("result_code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SearchDataResponseModelResult_code? Result_code { get; }
    
        /// <summary>In case loading the data fails, this property contains the list of validation errors.</summary>
        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ErrorDTO> Errors { get; }
    
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Count { get; }
    
        [Newtonsoft.Json.JsonProperty("total_count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Total_count { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DeleteDataResponseModel 
    {
        [Newtonsoft.Json.JsonConstructor]
        public DeleteDataResponseModel(System.Collections.Generic.ICollection<ErrorDTO> @errors, System.Collections.Generic.ICollection<InvalidRecordModel> @invalid_records, long? @number_of_deleted_records, long? @number_of_duplicate_records, long? @number_of_failed_records, long? @number_of_records_not_found, DeleteDataResponseModelResult_code? @result_code)
        {
            this.Errors = @errors;
            this.Result_code = @result_code;
            this.Number_of_deleted_records = @number_of_deleted_records;
            this.Number_of_duplicate_records = @number_of_duplicate_records;
            this.Number_of_failed_records = @number_of_failed_records;
            this.Number_of_records_not_found = @number_of_records_not_found;
            this.Invalid_records = @invalid_records;
        }
    
        /// <summary>In case deleting the data fails, this property contains the list of validation errors.</summary>
        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ErrorDTO> Errors { get; }
    
        /// <summary>Indicates the resultCode for the request</summary>
        [Newtonsoft.Json.JsonProperty("result_code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DeleteDataResponseModelResult_code? Result_code { get; }
    
        /// <summary>When the data deletion succeeded, this property contains the number of deleted records</summary>
        [Newtonsoft.Json.JsonProperty("number_of_deleted_records", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Number_of_deleted_records { get; }
    
        /// <summary>When the data deletion succeeded, this property contains the number of duplicate records</summary>
        [Newtonsoft.Json.JsonProperty("number_of_duplicate_records", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Number_of_duplicate_records { get; }
    
        /// <summary>When the data deletion partially succeeded, this property contains the number of failed records</summary>
        [Newtonsoft.Json.JsonProperty("number_of_failed_records", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Number_of_failed_records { get; }
    
        [Newtonsoft.Json.JsonProperty("number_of_records_not_found", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Number_of_records_not_found { get; }
    
        /// <summary>When the data deletion partially succeeded, this property contains information about the invalid records</summary>
        [Newtonsoft.Json.JsonProperty("invalid_records", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<InvalidRecordModel> Invalid_records { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Save_list_data_responsed 
    {
        [Newtonsoft.Json.JsonConstructor]
        public Save_list_data_responsed(string @message, Save_list_data_responsedResult_code? @result_code)
        {
            this.Result_code = @result_code;
            this.Message = @message;
        }
    
        [Newtonsoft.Json.JsonProperty("result_code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Save_list_data_responsedResult_code? Result_code { get; }
    
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Clear_static_segment_data_success_response 
    {
        [Newtonsoft.Json.JsonConstructor]
        public Clear_static_segment_data_success_response(string @message, Clear_static_segment_data_success_responseResult_code? @result_code)
        {
            this.Result_code = @result_code;
            this.Message = @message;
        }
    
        [Newtonsoft.Json.JsonProperty("result_code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Clear_static_segment_data_success_responseResult_code? Result_code { get; }
    
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Clear_static_segment_data_failed_response 
    {
        [Newtonsoft.Json.JsonConstructor]
        public Clear_static_segment_data_failed_response(System.Collections.Generic.ICollection<Error_model> @errors, string @message, Clear_static_segment_data_failed_responseResult_code? @result_code)
        {
            this.Errors = @errors;
            this.Result_code = @result_code;
            this.Message = @message;
        }
    
        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Error_model> Errors { get; }
    
        [Newtonsoft.Json.JsonProperty("result_code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Clear_static_segment_data_failed_responseResult_code? Result_code { get; }
    
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Delete_data_export_success_response 
    {
        [Newtonsoft.Json.JsonConstructor]
        public Delete_data_export_success_response(string @message, Delete_data_export_success_responseResult_code? @result_code)
        {
            this.Result_code = @result_code;
            this.Message = @message;
        }
    
        [Newtonsoft.Json.JsonProperty("result_code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Delete_data_export_success_responseResult_code? Result_code { get; }
    
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Delete_data_export_failed_response 
    {
        [Newtonsoft.Json.JsonConstructor]
        public Delete_data_export_failed_response(System.Collections.Generic.ICollection<Error_model> @errors, string @message, Delete_data_export_failed_responseResult_code? @result_code)
        {
            this.Errors = @errors;
            this.Result_code = @result_code;
            this.Message = @message;
        }
    
        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Error_model> Errors { get; }
    
        [Newtonsoft.Json.JsonProperty("result_code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Delete_data_export_failed_responseResult_code? Result_code { get; }
    
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Delete_data_import_success_response 
    {
        [Newtonsoft.Json.JsonConstructor]
        public Delete_data_import_success_response(string @message, Delete_data_import_success_responseResult_code? @result_code)
        {
            this.Result_code = @result_code;
            this.Message = @message;
        }
    
        [Newtonsoft.Json.JsonProperty("result_code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Delete_data_import_success_responseResult_code? Result_code { get; }
    
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Delete_data_import_failed_response 
    {
        [Newtonsoft.Json.JsonConstructor]
        public Delete_data_import_failed_response(System.Collections.Generic.ICollection<Error_model> @errors, string @message, Delete_data_import_failed_responseResult_code? @result_code)
        {
            this.Errors = @errors;
            this.Result_code = @result_code;
            this.Message = @message;
        }
    
        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Error_model> Errors { get; }
    
        [Newtonsoft.Json.JsonProperty("result_code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Delete_data_import_failed_responseResult_code? Result_code { get; }
    
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Journeys 
    {
        [Newtonsoft.Json.JsonConstructor]
        public Journeys(System.Collections.Generic.ICollection<Journey> @journeys)
        {
            this.Journeys1 = @journeys;
        }
    
        /// <summary>A collection of journeys</summary>
        [Newtonsoft.Json.JsonProperty("journeys", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Journey> Journeys1 { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Journey 
    {
        [Newtonsoft.Json.JsonConstructor]
        public Journey(string @api_name, JourneyType? @type)
        {
            this.Api_name = @api_name;
            this.Type = @type;
        }
    
        /// <summary>the api name for the journey</summary>
        [Newtonsoft.Json.JsonProperty("api_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Api_name { get; }
    
        /// <summary>the type of the journey</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public JourneyType? Type { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Lists 
    {
        [Newtonsoft.Json.JsonConstructor]
        public Lists(System.Collections.Generic.ICollection<List> @lists)
        {
            this.Lists1 = @lists;
        }
    
        /// <summary>Collection of lists.</summary>
        [Newtonsoft.Json.JsonProperty("lists", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<List> Lists1 { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class List 
    {
        [Newtonsoft.Json.JsonConstructor]
        public List(string @api_name, List_type? @list_type, string @name)
        {
            this.List_type = @list_type;
            this.Api_name = @api_name;
            this.Name = @name;
        }
    
        /// <summary>The type of the list.</summary>
        [Newtonsoft.Json.JsonProperty("list_type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public List_type? List_type { get; }
    
        /// <summary>The Api name for a list.</summary>
        [Newtonsoft.Json.JsonProperty("api_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Api_name { get; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CreateListRequestModel 
    {
        [Newtonsoft.Json.JsonConstructor]
        public CreateListRequestModel(string @api_name, string @description, bool? @enforce_segment_selection, string @name, CreateListRequestModelOptionlist_codetype? @optionlist_codetype, System.Collections.Generic.ICollection<string> @tags, CreateListRequestModelType @type)
        {
            this.Api_name = @api_name;
            this.Name = @name;
            this.Type = @type;
            this.Description = @description;
            this.Tags = @tags;
            this.Enforce_segment_selection = @enforce_segment_selection;
            this.Optionlist_codetype = @optionlist_codetype;
        }
    
        /// <summary>API name of the list.</summary>
        [Newtonsoft.Json.JsonProperty("api_name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Api_name { get; }
    
        /// <summary>Name of the list.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; }
    
        /// <summary>Type of the list.</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CreateListRequestModelType Type { get; }
    
        /// <summary>Description about the list.</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; }
    
        /// <summary>Tags associated with the list.</summary>
        [Newtonsoft.Json.JsonProperty("tags", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Tags { get; }
    
        /// <summary>Enforce segment selection for user lists (Only applicable for user lists)</summary>
        [Newtonsoft.Json.JsonProperty("enforce_segment_selection", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Enforce_segment_selection { get; }
    
        /// <summary>Option list code type for option lists (Only applicable for option lists)</summary>
        [Newtonsoft.Json.JsonProperty("optionlist_codetype", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CreateListRequestModelOptionlist_codetype? Optionlist_codetype { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Create_list_success_response 
    {
        [Newtonsoft.Json.JsonConstructor]
        public Create_list_success_response(string @message, Create_list_success_responseResult_code? @result_code)
        {
            this.Result_code = @result_code;
            this.Message = @message;
        }
    
        [Newtonsoft.Json.JsonProperty("result_code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Create_list_success_responseResult_code? Result_code { get; }
    
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Create_list_failed_response 
    {
        [Newtonsoft.Json.JsonConstructor]
        public Create_list_failed_response(System.Collections.Generic.ICollection<Error_model> @errors, string @message, Create_list_failed_responseResult_code? @result_code)
        {
            this.Errors = @errors;
            this.Result_code = @result_code;
            this.Message = @message;
        }
    
        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Error_model> Errors { get; }
    
        [Newtonsoft.Json.JsonProperty("result_code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Create_list_failed_responseResult_code? Result_code { get; }
    
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ListDetailsResponseModel 
    {
        [Newtonsoft.Json.JsonConstructor]
        public ListDetailsResponseModel(string @api_name, string @description, Get_list_details_email_quality @email_quality_response_example, ListDetailsResponseModelList_type? @list_type, string @name, bool? @require_segment, System.Collections.Generic.ICollection<string> @tags)
        {
            this.Api_name = @api_name;
            this.Name = @name;
            this.List_type = @list_type;
            this.Description = @description;
            this.Tags = @tags;
            this.Email_quality_response_example = @email_quality_response_example;
            this.Require_segment = @require_segment;
        }
    
        /// <summary>API name of the list</summary>
        [Newtonsoft.Json.JsonProperty("api_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Api_name { get; }
    
        /// <summary>Name of the list</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; }
    
        /// <summary>Type of the list</summary>
        [Newtonsoft.Json.JsonProperty("list_type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ListDetailsResponseModelList_type? List_type { get; }
    
        /// <summary>Description about the list.</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; }
    
        /// <summary>Tags associated with the list.</summary>
        [Newtonsoft.Json.JsonProperty("tags", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Tags { get; }
    
        /// <summary>Email quality configuration associated with the list.</summary>
        [Newtonsoft.Json.JsonProperty("email_quality_response_example", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Get_list_details_email_quality Email_quality_response_example { get; }
    
        /// <summary>Enforce segment selection</summary>
        [Newtonsoft.Json.JsonProperty("require_segment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Require_segment { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Get_list_details_email_quality 
    {
        [Newtonsoft.Json.JsonConstructor]
        public Get_list_details_email_quality(string @bounce_scope, System.Collections.Generic.ICollection<string> @bounce_stored_procedures, System.Collections.Generic.ICollection<Get_list_details_email_quality_action> @email_quality_actions, Get_list_details_email_qualityEmail_quality_type? @email_quality_type, int? @hard_bounce, int? @invalid_email_syntax, int? @non_existing_domain, int? @soft_bounce)
        {
            this.Email_quality_type = @email_quality_type;
            this.Invalid_email_syntax = @invalid_email_syntax;
            this.Non_existing_domain = @non_existing_domain;
            this.Hard_bounce = @hard_bounce;
            this.Soft_bounce = @soft_bounce;
            this.Bounce_scope = @bounce_scope;
            this.Email_quality_actions = @email_quality_actions;
            this.Bounce_stored_procedures = @bounce_stored_procedures;
        }
    
        [Newtonsoft.Json.JsonProperty("email_quality_type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Get_list_details_email_qualityEmail_quality_type? Email_quality_type { get; }
    
        [Newtonsoft.Json.JsonProperty("invalid_email_syntax", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Invalid_email_syntax { get; }
    
        [Newtonsoft.Json.JsonProperty("non_existing_domain", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Non_existing_domain { get; }
    
        [Newtonsoft.Json.JsonProperty("hard_bounce", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Hard_bounce { get; }
    
        [Newtonsoft.Json.JsonProperty("soft_bounce", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Soft_bounce { get; }
    
        [Newtonsoft.Json.JsonProperty("bounce_scope", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Bounce_scope { get; }
    
        [Newtonsoft.Json.JsonProperty("email_quality_actions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Get_list_details_email_quality_action> Email_quality_actions { get; }
    
        [Newtonsoft.Json.JsonProperty("bounce_stored_procedures", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Bounce_stored_procedures { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Get_list_details_email_quality_action 
    {
        [Newtonsoft.Json.JsonConstructor]
        public Get_list_details_email_quality_action(string @field_name, string @field_value)
        {
            this.Field_name = @field_name;
            this.Field_value = @field_value;
        }
    
        [Newtonsoft.Json.JsonProperty("field_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Field_name { get; }
    
        [Newtonsoft.Json.JsonProperty("field_value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Field_value { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class UpdateListRequestModel 
    {
        [Newtonsoft.Json.JsonConstructor]
        public UpdateListRequestModel(string @api_name, string @description, ApiEmailQualityModel @email_quality_configuration, bool? @enforce_segment_selection, string @name, System.Collections.Generic.ICollection<string> @tags)
        {
            this.Api_name = @api_name;
            this.Name = @name;
            this.Description = @description;
            this.Tags = @tags;
            this.Email_quality_configuration = @email_quality_configuration;
            this.Enforce_segment_selection = @enforce_segment_selection;
        }
    
        /// <summary>API name of the list.</summary>
        [Newtonsoft.Json.JsonProperty("api_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Api_name { get; }
    
        /// <summary>Name of the list.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; }
    
        /// <summary>Description about the list.</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; }
    
        /// <summary>Tags associated with the list.</summary>
        [Newtonsoft.Json.JsonProperty("tags", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Tags { get; }
    
        /// <summary>Email quality configuration for list</summary>
        [Newtonsoft.Json.JsonProperty("email_quality_configuration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ApiEmailQualityModel Email_quality_configuration { get; }
    
        /// <summary>Enforce segment selection</summary>
        [Newtonsoft.Json.JsonProperty("enforce_segment_selection", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Enforce_segment_selection { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ApiEmailQualityModel 
    {
        [Newtonsoft.Json.JsonConstructor]
        public ApiEmailQualityModel(System.Collections.Generic.ICollection<ApiEmailQualityActionModel> @actions, string @bounce_scope, System.Collections.Generic.ICollection<string> @bounce_stored_procedures, ApiEmailQualityModelType? @type)
        {
            this.Type = @type;
            this.Bounce_scope = @bounce_scope;
            this.Actions = @actions;
            this.Bounce_stored_procedures = @bounce_stored_procedures;
        }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ApiEmailQualityModelType? Type { get; }
    
        [Newtonsoft.Json.JsonProperty("bounce_scope", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Bounce_scope { get; }
    
        [Newtonsoft.Json.JsonProperty("actions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ApiEmailQualityActionModel> Actions { get; }
    
        [Newtonsoft.Json.JsonProperty("bounce_stored_procedures", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Bounce_stored_procedures { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ApiEmailQualityActionModel 
    {
        [Newtonsoft.Json.JsonConstructor]
        public ApiEmailQualityActionModel(string @name, string @value)
        {
            this.Name = @name;
            this.Value = @value;
        }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; }
    
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Update_list_success_response 
    {
        [Newtonsoft.Json.JsonConstructor]
        public Update_list_success_response(string @message, Update_list_success_responseResult_code? @result_code)
        {
            this.Result_code = @result_code;
            this.Message = @message;
        }
    
        [Newtonsoft.Json.JsonProperty("result_code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Update_list_success_responseResult_code? Result_code { get; }
    
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Update_list_failed_response 
    {
        [Newtonsoft.Json.JsonConstructor]
        public Update_list_failed_response(System.Collections.Generic.ICollection<Error_model> @errors, string @message, Update_list_failed_responseResult_code? @result_code)
        {
            this.Errors = @errors;
            this.Result_code = @result_code;
            this.Message = @message;
        }
    
        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Error_model> Errors { get; }
    
        [Newtonsoft.Json.JsonProperty("result_code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Update_list_failed_responseResult_code? Result_code { get; }
    
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Delete_list_success_response 
    {
        [Newtonsoft.Json.JsonConstructor]
        public Delete_list_success_response(string @message, Delete_list_success_responseResult_code? @result_code)
        {
            this.Result_code = @result_code;
            this.Message = @message;
        }
    
        [Newtonsoft.Json.JsonProperty("result_code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Delete_list_success_responseResult_code? Result_code { get; }
    
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Delete_list_failed_response 
    {
        [Newtonsoft.Json.JsonConstructor]
        public Delete_list_failed_response(System.Collections.Generic.ICollection<Error_model> @errors, string @message, Delete_list_failed_responseResult_code? @result_code)
        {
            this.Errors = @errors;
            this.Result_code = @result_code;
            this.Message = @message;
        }
    
        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Error_model> Errors { get; }
    
        [Newtonsoft.Json.JsonProperty("result_code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Delete_list_failed_responseResult_code? Result_code { get; }
    
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Fields 
    {
        [Newtonsoft.Json.JsonConstructor]
        public Fields(System.Collections.Generic.ICollection<Field> @fields)
        {
            this.Fields1 = @fields;
        }
    
        /// <summary>Collection of fields.</summary>
        [Newtonsoft.Json.JsonProperty("fields", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Field> Fields1 { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Field 
    {
        [Newtonsoft.Json.JsonConstructor]
        public Field(bool? @allow_null, FieldContent? @content, FieldData_type? @data_type, string @description, int? @length, string @name, string @optionlist, string @value_definition)
        {
            this.Name = @name;
            this.Length = @length;
            this.Data_type = @data_type;
            this.Description = @description;
            this.Allow_null = @allow_null;
            this.Content = @content;
            this.Optionlist = @optionlist;
            this.Value_definition = @value_definition;
        }
    
        /// <summary>The name of the field.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; }
    
        /// <summary>The length of the field</summary>
        [Newtonsoft.Json.JsonProperty("length", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Length { get; }
    
        /// <summary>Data type of the field</summary>
        [Newtonsoft.Json.JsonProperty("data_type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FieldData_type? Data_type { get; }
    
        /// <summary>Description about the field</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; }
    
        /// <summary>Allow null</summary>
        [Newtonsoft.Json.JsonProperty("allow_null", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Allow_null { get; }
    
        [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FieldContent? Content { get; }
    
        [Newtonsoft.Json.JsonProperty("optionlist", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Optionlist { get; }
    
        [Newtonsoft.Json.JsonProperty("value_definition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value_definition { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CreateListFieldsRequestModel 
    {
        [Newtonsoft.Json.JsonConstructor]
        public CreateListFieldsRequestModel(System.Collections.Generic.ICollection<ListFieldDTO> @fields)
        {
            this.Fields = @fields;
        }
    
        [Newtonsoft.Json.JsonProperty("fields", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<ListFieldDTO> Fields { get; }
    
    
    }
    
    /// <summary>Represents a list field.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ListFieldDTO 
    {
        [Newtonsoft.Json.JsonConstructor]
        public ListFieldDTO(bool? @allow_null, ListFieldDTOContent? @content, ListFieldDTOData_type @data_type, string @description, int? @length, string @name, string @optionlist, string @value_definition)
        {
            this.Name = @name;
            this.Data_type = @data_type;
            this.Length = @length;
            this.Description = @description;
            this.Allow_null = @allow_null;
            this.Content = @content;
            this.Optionlist = @optionlist;
            this.Value_definition = @value_definition;
        }
    
        /// <summary>Name of the list field.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; }
    
        /// <summary>Type of the list field.</summary>
        [Newtonsoft.Json.JsonProperty("data_type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ListFieldDTOData_type Data_type { get; }
    
        /// <summary>Length of list field.</summary>
        [Newtonsoft.Json.JsonProperty("length", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Length { get; }
    
        /// <summary>Description about the list field.</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; }
    
        /// <summary>Indicates whether the value of the field can be NULL.</summary>
        [Newtonsoft.Json.JsonProperty("allow_null", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Allow_null { get; }
    
        [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ListFieldDTOContent? Content { get; }
    
        [Newtonsoft.Json.JsonProperty("optionlist", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Optionlist { get; }
    
        [Newtonsoft.Json.JsonProperty("value_definition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value_definition { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Create_fields_success_response 
    {
        [Newtonsoft.Json.JsonConstructor]
        public Create_fields_success_response(string @message, Create_fields_success_responseResult_code? @result_code)
        {
            this.Result_code = @result_code;
            this.Message = @message;
        }
    
        [Newtonsoft.Json.JsonProperty("result_code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Create_fields_success_responseResult_code? Result_code { get; }
    
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Create_fields_failed_response 
    {
        [Newtonsoft.Json.JsonConstructor]
        public Create_fields_failed_response(System.Collections.Generic.ICollection<Error_model> @errors, string @message, Create_fields_failed_responseResult_code? @result_code)
        {
            this.Errors = @errors;
            this.Result_code = @result_code;
            this.Message = @message;
        }
    
        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Error_model> Errors { get; }
    
        [Newtonsoft.Json.JsonProperty("result_code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Create_fields_failed_responseResult_code? Result_code { get; }
    
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class UpdateListFieldRequestModel 
    {
        [Newtonsoft.Json.JsonConstructor]
        public UpdateListFieldRequestModel(UpdateListFieldRequestModelContent? @content, string @description, string @name, string @optionlist)
        {
            this.Name = @name;
            this.Description = @description;
            this.Content = @content;
            this.Optionlist = @optionlist;
        }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; }
    
        [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public UpdateListFieldRequestModelContent? Content { get; }
    
        [Newtonsoft.Json.JsonProperty("optionlist", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Optionlist { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Update_field_success_response 
    {
        [Newtonsoft.Json.JsonConstructor]
        public Update_field_success_response(string @message, Update_field_success_responseResult_code? @result_code)
        {
            this.Result_code = @result_code;
            this.Message = @message;
        }
    
        /// <summary>ResultCode</summary>
        [Newtonsoft.Json.JsonProperty("result_code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Update_field_success_responseResult_code? Result_code { get; }
    
        /// <summary>Message</summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Update_field_failed_response 
    {
        [Newtonsoft.Json.JsonConstructor]
        public Update_field_failed_response(System.Collections.Generic.ICollection<Error_model> @errors, string @message, Update_field_failed_responseResult_code? @result_code)
        {
            this.Errors = @errors;
            this.Result_code = @result_code;
            this.Message = @message;
        }
    
        /// <summary>Error information</summary>
        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Error_model> Errors { get; }
    
        /// <summary>ResultCode</summary>
        [Newtonsoft.Json.JsonProperty("result_code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Update_field_failed_responseResult_code? Result_code { get; }
    
        /// <summary>Message</summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Delete_list_field_success_response 
    {
        [Newtonsoft.Json.JsonConstructor]
        public Delete_list_field_success_response(string @message, Delete_list_field_success_responseResult_code? @result_code)
        {
            this.Result_code = @result_code;
            this.Message = @message;
        }
    
        [Newtonsoft.Json.JsonProperty("result_code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Delete_list_field_success_responseResult_code? Result_code { get; }
    
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Delete_list_field_failed_response 
    {
        [Newtonsoft.Json.JsonConstructor]
        public Delete_list_field_failed_response(System.Collections.Generic.ICollection<Error_model> @errors, string @message, Delete_list_field_failed_responseResult_code? @result_code)
        {
            this.Errors = @errors;
            this.Result_code = @result_code;
            this.Message = @message;
        }
    
        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Error_model> Errors { get; }
    
        [Newtonsoft.Json.JsonProperty("result_code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Delete_list_field_failed_responseResult_code? Result_code { get; }
    
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Relations 
    {
        [Newtonsoft.Json.JsonConstructor]
        public Relations(System.Collections.Generic.ICollection<Relation> @relations)
        {
            this.Relations1 = @relations;
        }
    
        /// <summary>Collection of relations.</summary>
        [Newtonsoft.Json.JsonProperty("relations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Relation> Relations1 { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Relation 
    {
        [Newtonsoft.Json.JsonConstructor]
        public Relation(string @destination_list_api_name, string @scope, string @source_list_api_name, RelationType? @type)
        {
            this.Type = @type;
            this.Scope = @scope;
            this.Source_list_api_name = @source_list_api_name;
            this.Destination_list_api_name = @destination_list_api_name;
        }
    
        /// <summary>The type of the relation.</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RelationType? Type { get; }
    
        /// <summary>The scope name for a relation.</summary>
        [Newtonsoft.Json.JsonProperty("scope", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Scope { get; }
    
        /// <summary>Api name of the source list</summary>
        [Newtonsoft.Json.JsonProperty("source_list_api_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Source_list_api_name { get; }
    
        /// <summary>Api name of the destination list</summary>
        [Newtonsoft.Json.JsonProperty("destination_list_api_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Destination_list_api_name { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CreateListRelationsRequestModel 
    {
        [Newtonsoft.Json.JsonConstructor]
        public CreateListRelationsRequestModel(System.Collections.Generic.ICollection<RelationDetailsDTO> @relations)
        {
            this.Relations = @relations;
        }
    
        [Newtonsoft.Json.JsonProperty("relations", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<RelationDetailsDTO> Relations { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class RelationDetailsDTO 
    {
        [Newtonsoft.Json.JsonConstructor]
        public RelationDetailsDTO(System.Collections.Generic.ICollection<RelationCustomFiltersDTO> @constraints, string @masterlist_field_name, string @scope, string @slavelist_api_name, string @slavelist_field_name, RelationDetailsDTOType @type)
        {
            this.Scope = @scope;
            this.Type = @type;
            this.Masterlist_field_name = @masterlist_field_name;
            this.Slavelist_api_name = @slavelist_api_name;
            this.Slavelist_field_name = @slavelist_field_name;
            this.Constraints = @constraints;
        }
    
        [Newtonsoft.Json.JsonProperty("scope", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Scope { get; }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RelationDetailsDTOType Type { get; }
    
        [Newtonsoft.Json.JsonProperty("masterlist_field_name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Masterlist_field_name { get; }
    
        [Newtonsoft.Json.JsonProperty("slavelist_api_name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Slavelist_api_name { get; }
    
        [Newtonsoft.Json.JsonProperty("slavelist_field_name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Slavelist_field_name { get; }
    
        [Newtonsoft.Json.JsonProperty("constraints", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<RelationCustomFiltersDTO> Constraints { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class RelationCustomFiltersDTO 
    {
        [Newtonsoft.Json.JsonConstructor]
        public RelationCustomFiltersDTO(string @field1, string @field2, string @list1, string @list2, RelationCustomFiltersDTOOperator? @operator, string @value)
        {
            this.List1 = @list1;
            this.Field1 = @field1;
            this.Operator = @operator;
            this.List2 = @list2;
            this.Field2 = @field2;
            this.Value = @value;
        }
    
        [Newtonsoft.Json.JsonProperty("list1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string List1 { get; }
    
        [Newtonsoft.Json.JsonProperty("field1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Field1 { get; }
    
        [Newtonsoft.Json.JsonProperty("operator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RelationCustomFiltersDTOOperator? Operator { get; }
    
        [Newtonsoft.Json.JsonProperty("list2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string List2 { get; }
    
        [Newtonsoft.Json.JsonProperty("field2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Field2 { get; }
    
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Create_list_relations_success_response 
    {
        [Newtonsoft.Json.JsonConstructor]
        public Create_list_relations_success_response(System.Collections.Generic.ICollection<Error_model> @errors, string @message, Create_list_relations_success_responseResult_code? @result_code)
        {
            this.Errors = @errors;
            this.Result_code = @result_code;
            this.Message = @message;
        }
    
        /// <summary>Error information</summary>
        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Error_model> Errors { get; }
    
        /// <summary>ResultCode</summary>
        [Newtonsoft.Json.JsonProperty("result_code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Create_list_relations_success_responseResult_code? Result_code { get; }
    
        /// <summary>Message</summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Create_list_relations_failed_response 
    {
        [Newtonsoft.Json.JsonConstructor]
        public Create_list_relations_failed_response(System.Collections.Generic.ICollection<Error_model> @errors, string @message, Create_list_relations_failed_responseResult_code? @result_code)
        {
            this.Errors = @errors;
            this.Result_code = @result_code;
            this.Message = @message;
        }
    
        /// <summary>Error information</summary>
        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Error_model> Errors { get; }
    
        /// <summary>ResultCode</summary>
        [Newtonsoft.Json.JsonProperty("result_code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Create_list_relations_failed_responseResult_code? Result_code { get; }
    
        /// <summary>Message</summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class RelationDetailsModel 
    {
        [Newtonsoft.Json.JsonConstructor]
        public RelationDetailsModel(System.Collections.Generic.ICollection<Get_list_relation_custome_filters_request> @constraints, string @master_list_api_name, string @master_list_field_name, RelationDetailsModelRelation_type? @relation_type, string @scope_name, string @slave_list_api_name, string @slave_list_field_name)
        {
            this.Scope_name = @scope_name;
            this.Relation_type = @relation_type;
            this.Master_list_api_name = @master_list_api_name;
            this.Master_list_field_name = @master_list_field_name;
            this.Slave_list_api_name = @slave_list_api_name;
            this.Slave_list_field_name = @slave_list_field_name;
            this.Constraints = @constraints;
        }
    
        /// <summary>Name of the relation.</summary>
        [Newtonsoft.Json.JsonProperty("scope_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Scope_name { get; }
    
        /// <summary>Type of the relation.</summary>
        [Newtonsoft.Json.JsonProperty("relation_type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RelationDetailsModelRelation_type? Relation_type { get; }
    
        /// <summary>API name of master list.</summary>
        [Newtonsoft.Json.JsonProperty("master_list_api_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Master_list_api_name { get; }
    
        /// <summary>Field name of master list.</summary>
        [Newtonsoft.Json.JsonProperty("master_list_field_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Master_list_field_name { get; }
    
        /// <summary>API name of slave list.</summary>
        [Newtonsoft.Json.JsonProperty("slave_list_api_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Slave_list_api_name { get; }
    
        /// <summary>Field name of the slave list.</summary>
        [Newtonsoft.Json.JsonProperty("slave_list_field_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Slave_list_field_name { get; }
    
        /// <summary>Constraints of the relation.</summary>
        [Newtonsoft.Json.JsonProperty("constraints", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Get_list_relation_custome_filters_request> Constraints { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Get_list_relation_custome_filters_request 
    {
        [Newtonsoft.Json.JsonConstructor]
        public Get_list_relation_custome_filters_request(string @destination_field, string @destination_list, string @field_value, Get_list_relation_custome_filters_requestOperator? @operator, string @source_field, string @source_list)
        {
            this.Source_list = @source_list;
            this.Source_field = @source_field;
            this.Operator = @operator;
            this.Destination_list = @destination_list;
            this.Destination_field = @destination_field;
            this.Field_value = @field_value;
        }
    
        /// <summary>Source list for constraint.</summary>
        [Newtonsoft.Json.JsonProperty("source_list", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Source_list { get; }
    
        /// <summary>Source field for constraint.</summary>
        [Newtonsoft.Json.JsonProperty("source_field", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Source_field { get; }
    
        /// <summary>Operator on the constraint.</summary>
        [Newtonsoft.Json.JsonProperty("operator", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Get_list_relation_custome_filters_requestOperator? Operator { get; }
    
        /// <summary>Destination list for constraint.</summary>
        [Newtonsoft.Json.JsonProperty("destination_list", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Destination_list { get; }
    
        /// <summary>Destination field for constraint.</summary>
        [Newtonsoft.Json.JsonProperty("destination_field", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Destination_field { get; }
    
        /// <summary>Value of source field of the constraint.</summary>
        [Newtonsoft.Json.JsonProperty("field_value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Field_value { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class UpdateListRelationRequest 
    {
        [Newtonsoft.Json.JsonConstructor]
        public UpdateListRelationRequest(System.Collections.Generic.ICollection<RelationCustomFiltersDTO> @constraints, string @masterlist_field_name, string @scope, string @slavelist_api_name, string @slavelist_field_name, UpdateListRelationRequestType? @type)
        {
            this.Scope = @scope;
            this.Type = @type;
            this.Masterlist_field_name = @masterlist_field_name;
            this.Slavelist_api_name = @slavelist_api_name;
            this.Slavelist_field_name = @slavelist_field_name;
            this.Constraints = @constraints;
        }
    
        [Newtonsoft.Json.JsonProperty("scope", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Scope { get; }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public UpdateListRelationRequestType? Type { get; }
    
        [Newtonsoft.Json.JsonProperty("masterlist_field_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Masterlist_field_name { get; }
    
        [Newtonsoft.Json.JsonProperty("slavelist_api_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Slavelist_api_name { get; }
    
        [Newtonsoft.Json.JsonProperty("slavelist_field_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Slavelist_field_name { get; }
    
        [Newtonsoft.Json.JsonProperty("constraints", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<RelationCustomFiltersDTO> Constraints { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Update_list_relation_success_response 
    {
        [Newtonsoft.Json.JsonConstructor]
        public Update_list_relation_success_response(string @message, Update_list_relation_success_responseResult_code? @result_code)
        {
            this.Result_code = @result_code;
            this.Message = @message;
        }
    
        /// <summary>ResultCode</summary>
        [Newtonsoft.Json.JsonProperty("result_code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Update_list_relation_success_responseResult_code? Result_code { get; }
    
        /// <summary>Message</summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Update_list_relation_failed_response 
    {
        [Newtonsoft.Json.JsonConstructor]
        public Update_list_relation_failed_response(System.Collections.Generic.ICollection<Error_model> @errors, string @message, Update_list_relation_failed_responseResult_code? @result_code)
        {
            this.Errors = @errors;
            this.Result_code = @result_code;
            this.Message = @message;
        }
    
        /// <summary>Error information</summary>
        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Error_model> Errors { get; }
    
        /// <summary>ResultCode</summary>
        [Newtonsoft.Json.JsonProperty("result_code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Update_list_relation_failed_responseResult_code? Result_code { get; }
    
        /// <summary>Message</summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Delete_list_relation_success_response 
    {
        [Newtonsoft.Json.JsonConstructor]
        public Delete_list_relation_success_response(string @message, Delete_list_relation_success_responseResult_code? @result_code)
        {
            this.Result_code = @result_code;
            this.Message = @message;
        }
    
        [Newtonsoft.Json.JsonProperty("result_code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Delete_list_relation_success_responseResult_code? Result_code { get; }
    
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Delete_list_relation_failed_response 
    {
        [Newtonsoft.Json.JsonConstructor]
        public Delete_list_relation_failed_response(System.Collections.Generic.ICollection<Error_model> @errors, string @message, Delete_list_relation_failed_responseResult_code? @result_code)
        {
            this.Errors = @errors;
            this.Result_code = @result_code;
            this.Message = @message;
        }
    
        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Error_model> Errors { get; }
    
        [Newtonsoft.Json.JsonProperty("result_code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Delete_list_relation_failed_responseResult_code? Result_code { get; }
    
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Delete_list_record_success_response 
    {
        [Newtonsoft.Json.JsonConstructor]
        public Delete_list_record_success_response(Delete_list_record_success_responseResult_code? @result_code)
        {
            this.Result_code = @result_code;
        }
    
        [Newtonsoft.Json.JsonProperty("result_code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Delete_list_record_success_responseResult_code? Result_code { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Delete_list__record_failed_response 
    {
        [Newtonsoft.Json.JsonConstructor]
        public Delete_list__record_failed_response(System.Collections.Generic.ICollection<Error_model> @errors, string @message, Delete_list__record_failed_responseResult_code? @result_code)
        {
            this.Errors = @errors;
            this.Result_code = @result_code;
            this.Message = @message;
        }
    
        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Error_model> Errors { get; }
    
        [Newtonsoft.Json.JsonProperty("result_code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Delete_list__record_failed_responseResult_code? Result_code { get; }
    
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class List_records_count_success_response 
    {
        [Newtonsoft.Json.JsonConstructor]
        public List_records_count_success_response(int? @count)
        {
            this.Count = @count;
        }
    
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Segments 
    {
        [Newtonsoft.Json.JsonConstructor]
        public Segments(int? @segment_count, System.Collections.Generic.ICollection<Segment> @segments)
        {
            this.Segments1 = @segments;
            this.Segment_count = @segment_count;
        }
    
        /// <summary>Collection of segments.</summary>
        [Newtonsoft.Json.JsonProperty("segments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Segment> Segments1 { get; }
    
        [Newtonsoft.Json.JsonProperty("segment_count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Segment_count { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Segment 
    {
        [Newtonsoft.Json.JsonConstructor]
        public Segment(string @api_name, Segment_type? @segment_type)
        {
            this.Segment_type = @segment_type;
            this.Api_name = @api_name;
        }
    
        /// <summary>Type of the segment.</summary>
        [Newtonsoft.Json.JsonProperty("segment_type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Segment_type? Segment_type { get; }
    
        /// <summary>Segment API name.</summary>
        [Newtonsoft.Json.JsonProperty("api_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Api_name { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SegmentDetailsModel 
    {
        [Newtonsoft.Json.JsonConstructor]
        public SegmentDetailsModel(string @api_name, string @description, string @name, SegmentDetailsModelType? @type)
        {
            this.Type = @type;
            this.Api_name = @api_name;
            this.Name = @name;
            this.Description = @description;
        }
    
        /// <summary>Type of the segment.</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SegmentDetailsModelType? Type { get; }
    
        /// <summary>Segment API name.</summary>
        [Newtonsoft.Json.JsonProperty("api_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Api_name { get; }
    
        /// <summary>Name of the segment.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; }
    
        /// <summary>Description of the segment.</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Delete_segment_success_response 
    {
        [Newtonsoft.Json.JsonConstructor]
        public Delete_segment_success_response(string @message, Delete_segment_success_responseResult_code? @result_code)
        {
            this.Result_code = @result_code;
            this.Message = @message;
        }
    
        [Newtonsoft.Json.JsonProperty("result_code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Delete_segment_success_responseResult_code? Result_code { get; }
    
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Delete_segment_failed_response 
    {
        [Newtonsoft.Json.JsonConstructor]
        public Delete_segment_failed_response(System.Collections.Generic.ICollection<Error_model> @errors, string @message, Delete_segment_failed_responseResult_code? @result_code)
        {
            this.Errors = @errors;
            this.Result_code = @result_code;
            this.Message = @message;
        }
    
        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Error_model> Errors { get; }
    
        [Newtonsoft.Json.JsonProperty("result_code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Delete_segment_failed_responseResult_code? Result_code { get; }
    
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CreateSegmentRequestModel 
    {
        [Newtonsoft.Json.JsonConstructor]
        public CreateSegmentRequestModel(string @api_name, string @description, string @name, System.Collections.Generic.ICollection<string> @tags)
        {
            this.Api_name = @api_name;
            this.Name = @name;
            this.Description = @description;
            this.Tags = @tags;
        }
    
        /// <summary>API name of the segment.</summary>
        [Newtonsoft.Json.JsonProperty("api_name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Api_name { get; }
    
        /// <summary>Name of the segment.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; }
    
        /// <summary>Description about the segment.</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; }
    
        /// <summary>Tags associated with the segment.</summary>
        [Newtonsoft.Json.JsonProperty("tags", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Tags { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Create_segment_success_response 
    {
        [Newtonsoft.Json.JsonConstructor]
        public Create_segment_success_response(string @message, Create_segment_success_responseResult_code? @result_code)
        {
            this.Result_code = @result_code;
            this.Message = @message;
        }
    
        [Newtonsoft.Json.JsonProperty("result_code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Create_segment_success_responseResult_code? Result_code { get; }
    
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Create_segment_failed_response 
    {
        [Newtonsoft.Json.JsonConstructor]
        public Create_segment_failed_response(System.Collections.Generic.ICollection<Error_model> @errors, string @message, Create_segment_failed_responseResult_code? @result_code)
        {
            this.Errors = @errors;
            this.Result_code = @result_code;
            this.Message = @message;
        }
    
        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Error_model> Errors { get; }
    
        [Newtonsoft.Json.JsonProperty("result_code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Create_segment_failed_responseResult_code? Result_code { get; }
    
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CustomEvents 
    {
        [Newtonsoft.Json.JsonConstructor]
        public CustomEvents(System.Collections.Generic.ICollection<Retrieve_all_customEvents_success_response> @custom_events)
        {
            this.Custom_events = @custom_events;
        }
    
        [Newtonsoft.Json.JsonProperty("custom_events", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Retrieve_all_customEvents_success_response> Custom_events { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Retrieve_all_customEvents_success_response 
    {
        [Newtonsoft.Json.JsonConstructor]
        public Retrieve_all_customEvents_success_response(string @name)
        {
            this.Name = @name;
        }
    
        /// <summary>Name of the custom event</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CreateCustomEventRequestModel 
    {
        [Newtonsoft.Json.JsonConstructor]
        public CreateCustomEventRequestModel(string @description, string @name, System.Collections.Generic.ICollection<string> @tags)
        {
            this.Name = @name;
            this.Description = @description;
            this.Tags = @tags;
        }
    
        /// <summary>Name of the custom event.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; }
    
        /// <summary>Description about the custom event.</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; }
    
        /// <summary>Tags associated with the custom event.</summary>
        [Newtonsoft.Json.JsonProperty("tags", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Tags { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Create_custom_event_success_example_response 
    {
        [Newtonsoft.Json.JsonConstructor]
        public Create_custom_event_success_example_response(string @message, Create_custom_event_success_example_responseResult_code? @result_code)
        {
            this.Result_code = @result_code;
            this.Message = @message;
        }
    
        [Newtonsoft.Json.JsonProperty("result_code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Create_custom_event_success_example_responseResult_code? Result_code { get; }
    
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Create_custom_event_failed_example_response 
    {
        [Newtonsoft.Json.JsonConstructor]
        public Create_custom_event_failed_example_response(System.Collections.Generic.ICollection<Error_model> @errors, string @message, Create_custom_event_failed_example_responseResult_code? @result_code)
        {
            this.Errors = @errors;
            this.Result_code = @result_code;
            this.Message = @message;
        }
    
        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Error_model> Errors { get; }
    
        [Newtonsoft.Json.JsonProperty("result_code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Create_custom_event_failed_example_responseResult_code? Result_code { get; }
    
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Delete_custom_event_success_response 
    {
        [Newtonsoft.Json.JsonConstructor]
        public Delete_custom_event_success_response(string @message, Delete_custom_event_success_responseResult_code? @result_code)
        {
            this.Result_code = @result_code;
            this.Message = @message;
        }
    
        [Newtonsoft.Json.JsonProperty("result_code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Delete_custom_event_success_responseResult_code? Result_code { get; }
    
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Delete_custom_event_failed_response 
    {
        [Newtonsoft.Json.JsonConstructor]
        public Delete_custom_event_failed_response(System.Collections.Generic.ICollection<Error_model> @errors, string @message, Delete_custom_event_failed_responseResult_code? @result_code)
        {
            this.Errors = @errors;
            this.Result_code = @result_code;
            this.Message = @message;
        }
    
        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Error_model> Errors { get; }
    
        [Newtonsoft.Json.JsonProperty("result_code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Delete_custom_event_failed_responseResult_code? Result_code { get; }
    
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Retrieve_custom_event_success_response 
    {
        [Newtonsoft.Json.JsonConstructor]
        public Retrieve_custom_event_success_response(Custom_event @custom_event)
        {
            this.Custom_event = @custom_event;
        }
    
        [Newtonsoft.Json.JsonProperty("custom_event", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Custom_event Custom_event { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Custom_event 
    {
        [Newtonsoft.Json.JsonConstructor]
        public Custom_event(string @description, string @name, string @transaction_field)
        {
            this.Name = @name;
            this.Description = @description;
            this.Transaction_field = @transaction_field;
        }
    
        /// <summary>Name of the custom event</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; }
    
        /// <summary>Description of the custom event</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; }
    
        /// <summary>Description of the custom event</summary>
        [Newtonsoft.Json.JsonProperty("transaction_field", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Transaction_field { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class UpdateCustomEventRequestModel 
    {
        [Newtonsoft.Json.JsonConstructor]
        public UpdateCustomEventRequestModel(string @description, string @name, System.Collections.Generic.ICollection<string> @tags, string @transaction_field)
        {
            this.Name = @name;
            this.Description = @description;
            this.Tags = @tags;
            this.Transaction_field = @transaction_field;
        }
    
        /// <summary>Name of the custom event.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; }
    
        /// <summary>Description about the custom event.</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; }
    
        /// <summary>Tags associated with the custom event.</summary>
        [Newtonsoft.Json.JsonProperty("tags", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Tags { get; }
    
        /// <summary>Represents Transaction Field of the custom event</summary>
        [Newtonsoft.Json.JsonProperty("transaction_field", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Transaction_field { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Update_custom_event_success_example_response 
    {
        [Newtonsoft.Json.JsonConstructor]
        public Update_custom_event_success_example_response(string @message, Update_custom_event_success_example_responseResult_code? @result_code)
        {
            this.Result_code = @result_code;
            this.Message = @message;
        }
    
        [Newtonsoft.Json.JsonProperty("result_code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Update_custom_event_success_example_responseResult_code? Result_code { get; }
    
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Update_custom_event_failed_example_response 
    {
        [Newtonsoft.Json.JsonConstructor]
        public Update_custom_event_failed_example_response(System.Collections.Generic.ICollection<Error_model> @errors, string @message, Update_custom_event_failed_example_responseResult_code? @result_code)
        {
            this.Errors = @errors;
            this.Result_code = @result_code;
            this.Message = @message;
        }
    
        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Error_model> Errors { get; }
    
        [Newtonsoft.Json.JsonProperty("result_code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Update_custom_event_failed_example_responseResult_code? Result_code { get; }
    
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Fields2 
    {
        [Newtonsoft.Json.JsonConstructor]
        public Fields2(System.Collections.Generic.ICollection<Retrieve_all_custom_event_fields_success_response> @fields)
        {
            this.Fields = @fields;
        }
    
        /// <summary>Collection of fields.</summary>
        [Newtonsoft.Json.JsonProperty("fields", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Retrieve_all_custom_event_fields_success_response> Fields { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Retrieve_all_custom_event_fields_success_response 
    {
        [Newtonsoft.Json.JsonConstructor]
        public Retrieve_all_custom_event_fields_success_response(bool? @allow_null, Retrieve_all_custom_event_fields_success_responseContent? @content, Retrieve_all_custom_event_fields_success_responseData_type? @data_type, string @description, int? @length, string @name, string @optionlist, string @value_definition)
        {
            this.Name = @name;
            this.Length = @length;
            this.Data_type = @data_type;
            this.Description = @description;
            this.Allow_null = @allow_null;
            this.Content = @content;
            this.Optionlist = @optionlist;
            this.Value_definition = @value_definition;
        }
    
        /// <summary>The name of the field.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; }
    
        /// <summary>The length of the field</summary>
        [Newtonsoft.Json.JsonProperty("length", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Length { get; }
    
        /// <summary>Data type of the field</summary>
        [Newtonsoft.Json.JsonProperty("data_type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Retrieve_all_custom_event_fields_success_responseData_type? Data_type { get; }
    
        /// <summary>Description about the field</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; }
    
        /// <summary>Allow null</summary>
        [Newtonsoft.Json.JsonProperty("allow_null", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Allow_null { get; }
    
        /// <summary>Content</summary>
        [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Retrieve_all_custom_event_fields_success_responseContent? Content { get; }
    
        /// <summary>Option list</summary>
        [Newtonsoft.Json.JsonProperty("optionlist", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Optionlist { get; }
    
        /// <summary>Value definition</summary>
        [Newtonsoft.Json.JsonProperty("value_definition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value_definition { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CreateCustomEventFieldsRequestModel 
    {
        [Newtonsoft.Json.JsonConstructor]
        public CreateCustomEventFieldsRequestModel(System.Collections.Generic.ICollection<CustomEventFieldDTO> @fields)
        {
            this.Fields = @fields;
        }
    
        [Newtonsoft.Json.JsonProperty("fields", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<CustomEventFieldDTO> Fields { get; }
    
    
    }
    
    /// <summary>Represents a custom event field.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CustomEventFieldDTO 
    {
        [Newtonsoft.Json.JsonConstructor]
        public CustomEventFieldDTO(bool? @allow_null, CustomEventFieldDTOContent? @content, CustomEventFieldDTOData_type @data_type, string @description, int? @length, string @name, string @optionlist, string @value_definition)
        {
            this.Name = @name;
            this.Data_type = @data_type;
            this.Length = @length;
            this.Description = @description;
            this.Allow_null = @allow_null;
            this.Content = @content;
            this.Optionlist = @optionlist;
            this.Value_definition = @value_definition;
        }
    
        /// <summary>Name of the custom event field.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; }
    
        /// <summary>Type of the custom event field.</summary>
        [Newtonsoft.Json.JsonProperty("data_type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CustomEventFieldDTOData_type Data_type { get; }
    
        /// <summary>Length of custom event field.</summary>
        [Newtonsoft.Json.JsonProperty("length", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Length { get; }
    
        /// <summary>Description about the custom event field.</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; }
    
        /// <summary>Indicates whether the value of the field can be NULL.</summary>
        [Newtonsoft.Json.JsonProperty("allow_null", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Allow_null { get; }
    
        /// <summary>Option type of custom event field</summary>
        [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CustomEventFieldDTOContent? Content { get; }
    
        /// <summary>Option list name of custom event field</summary>
        [Newtonsoft.Json.JsonProperty("optionlist", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Optionlist { get; }
    
        /// <summary>Value definition of custom event field</summary>
        [Newtonsoft.Json.JsonProperty("value_definition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value_definition { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Create_custom_event_fields_success_response 
    {
        [Newtonsoft.Json.JsonConstructor]
        public Create_custom_event_fields_success_response(string @message, Create_custom_event_fields_success_responseResult_code? @result_code)
        {
            this.Result_code = @result_code;
            this.Message = @message;
        }
    
        [Newtonsoft.Json.JsonProperty("result_code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Create_custom_event_fields_success_responseResult_code? Result_code { get; }
    
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Create_custom_event_fields_failed_response 
    {
        [Newtonsoft.Json.JsonConstructor]
        public Create_custom_event_fields_failed_response(System.Collections.Generic.ICollection<Error_model> @errors, string @message, Create_custom_event_fields_failed_responseResult_code? @result_code)
        {
            this.Errors = @errors;
            this.Result_code = @result_code;
            this.Message = @message;
        }
    
        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Error_model> Errors { get; }
    
        [Newtonsoft.Json.JsonProperty("result_code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Create_custom_event_fields_failed_responseResult_code? Result_code { get; }
    
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Delete_custom_event_field_success_response 
    {
        [Newtonsoft.Json.JsonConstructor]
        public Delete_custom_event_field_success_response(string @message, Delete_custom_event_field_success_responseResult_code? @result_code)
        {
            this.Result_code = @result_code;
            this.Message = @message;
        }
    
        [Newtonsoft.Json.JsonProperty("result_code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Delete_custom_event_field_success_responseResult_code? Result_code { get; }
    
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Delete_custom_event_field_failed_response 
    {
        [Newtonsoft.Json.JsonConstructor]
        public Delete_custom_event_field_failed_response(System.Collections.Generic.ICollection<Error_model> @errors, string @message, Delete_custom_event_field_failed_responseResult_code? @result_code)
        {
            this.Errors = @errors;
            this.Result_code = @result_code;
            this.Message = @message;
        }
    
        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Error_model> Errors { get; }
    
        [Newtonsoft.Json.JsonProperty("result_code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Delete_custom_event_field_failed_responseResult_code? Result_code { get; }
    
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class UpdateCustomEventFieldRequestModel 
    {
        [Newtonsoft.Json.JsonConstructor]
        public UpdateCustomEventFieldRequestModel(UpdateCustomEventFieldRequestModelContent? @content, string @description, string @name, string @optionlist)
        {
            this.Name = @name;
            this.Description = @description;
            this.Content = @content;
            this.Optionlist = @optionlist;
        }
    
        /// <summary>Name of the custom event field.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; }
    
        /// <summary>Description about the custom event field.</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; }
    
        /// <summary>Type of the custom event field.</summary>
        [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public UpdateCustomEventFieldRequestModelContent? Content { get; }
    
        /// <summary>Associated Optionlist for custom event field of type Single/Multi.</summary>
        [Newtonsoft.Json.JsonProperty("optionlist", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Optionlist { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Update_custom_event_field_success_response 
    {
        [Newtonsoft.Json.JsonConstructor]
        public Update_custom_event_field_success_response(string @message, Update_custom_event_field_success_responseResult_code? @result_code)
        {
            this.Result_code = @result_code;
            this.Message = @message;
        }
    
        [Newtonsoft.Json.JsonProperty("result_code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Update_custom_event_field_success_responseResult_code? Result_code { get; }
    
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Update_custom_event_field_failed_response 
    {
        [Newtonsoft.Json.JsonConstructor]
        public Update_custom_event_field_failed_response(System.Collections.Generic.ICollection<Error_model> @errors, string @message, Update_custom_event_field_failed_responseResult_code? @result_code)
        {
            this.Errors = @errors;
            this.Result_code = @result_code;
            this.Message = @message;
        }
    
        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Error_model> Errors { get; }
    
        [Newtonsoft.Json.JsonProperty("result_code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Update_custom_event_field_failed_responseResult_code? Result_code { get; }
    
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Mediums 
    {
        [Newtonsoft.Json.JsonConstructor]
        public Mediums(System.Collections.Generic.ICollection<Retrieve_all_mediums_success_response> @mediums)
        {
            this.Mediums1 = @mediums;
        }
    
        /// <summary>Collection of lists.</summary>
        [Newtonsoft.Json.JsonProperty("mediums", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Retrieve_all_mediums_success_response> Mediums1 { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Retrieve_all_mediums_success_response 
    {
        [Newtonsoft.Json.JsonConstructor]
        public Retrieve_all_mediums_success_response(string @api_name, Retrieve_all_mediums_success_responseType? @type)
        {
            this.Type = @type;
            this.Api_name = @api_name;
        }
    
        /// <summary>The type of the list.</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Retrieve_all_mediums_success_responseType? Type { get; }
    
        /// <summary>The Api name for a list.</summary>
        [Newtonsoft.Json.JsonProperty("api_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Api_name { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Retrieve_all_mediums_failed_response 
    {
        [Newtonsoft.Json.JsonConstructor]
        public Retrieve_all_mediums_failed_response(System.Collections.Generic.ICollection<Error_model> @errors, string @message, Retrieve_all_mediums_failed_responseResult_code? @result_code)
        {
            this.Errors = @errors;
            this.Result_code = @result_code;
            this.Message = @message;
        }
    
        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Error_model> Errors { get; }
    
        [Newtonsoft.Json.JsonProperty("result_code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Retrieve_all_mediums_failed_responseResult_code? Result_code { get; }
    
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CreateFtpMediumApiRequestModel 
    {
        [Newtonsoft.Json.JsonConstructor]
        public CreateFtpMediumApiRequestModel(string @api_name, string @description, CreateFtpMediumApiRequestModelFtp_type @ftp_type, string @login, string @name, System.Collections.Generic.ICollection<string> @organizations, string @password, string @server, string @subfolder)
        {
            this.Ftp_type = @ftp_type;
            this.Server = @server;
            this.Login = @login;
            this.Password = @password;
            this.Subfolder = @subfolder;
            this.Api_name = @api_name;
            this.Name = @name;
            this.Organizations = @organizations;
            this.Description = @description;
        }
    
        /// <summary>Type of Ftp Medium - FTPS, SFTP, FTPSImplicit</summary>
        [Newtonsoft.Json.JsonProperty("ftp_type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CreateFtpMediumApiRequestModelFtp_type Ftp_type { get; }
    
        /// <summary>Address of the FTP server</summary>
        [Newtonsoft.Json.JsonProperty("server", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Server { get; }
    
        /// <summary>Login for accessing FTP server</summary>
        [Newtonsoft.Json.JsonProperty("login", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Login { get; }
    
        /// <summary>Password associated with the Login to access the FTP server</summary>
        [Newtonsoft.Json.JsonProperty("password", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Password { get; }
    
        /// <summary>Path of a subfolder on FTP server</summary>
        [Newtonsoft.Json.JsonProperty("subfolder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Subfolder { get; }
    
        /// <summary>API Name associated with the medium</summary>
        [Newtonsoft.Json.JsonProperty("api_name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Api_name { get; }
    
        /// <summary>Name of the medium</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; }
    
        /// <summary>List of organizations linked to the medium</summary>
        [Newtonsoft.Json.JsonProperty("organizations", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> Organizations { get; }
    
        /// <summary>Description of the medium</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Create_medium_success_example_response 
    {
        [Newtonsoft.Json.JsonConstructor]
        public Create_medium_success_example_response(string @message, Create_medium_success_example_responseResult_code? @result_code)
        {
            this.Result_code = @result_code;
            this.Message = @message;
        }
    
        [Newtonsoft.Json.JsonProperty("result_code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Create_medium_success_example_responseResult_code? Result_code { get; }
    
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Create_medium_failed_example_response 
    {
        [Newtonsoft.Json.JsonConstructor]
        public Create_medium_failed_example_response(System.Collections.Generic.ICollection<Error_model> @errors, string @message, Create_medium_failed_example_responseResult_code? @result_code)
        {
            this.Errors = @errors;
            this.Result_code = @result_code;
            this.Message = @message;
        }
    
        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Error_model> Errors { get; }
    
        [Newtonsoft.Json.JsonProperty("result_code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Create_medium_failed_example_responseResult_code? Result_code { get; }
    
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class UpdateFtpMediumApiRequestModel 
    {
        [Newtonsoft.Json.JsonConstructor]
        public UpdateFtpMediumApiRequestModel(string @api_name, string @description, UpdateFtpMediumApiRequestModelFtp_type? @ftp_type, string @login, string @name, System.Collections.Generic.ICollection<string> @organizations, string @password, string @server, string @subfolder)
        {
            this.Ftp_type = @ftp_type;
            this.Server = @server;
            this.Login = @login;
            this.Password = @password;
            this.Subfolder = @subfolder;
            this.Api_name = @api_name;
            this.Name = @name;
            this.Organizations = @organizations;
            this.Description = @description;
        }
    
        /// <summary>Type of Ftp Medium - FTPS, SFTP, FTPSImplicit</summary>
        [Newtonsoft.Json.JsonProperty("ftp_type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public UpdateFtpMediumApiRequestModelFtp_type? Ftp_type { get; }
    
        /// <summary>Address of the FTP server</summary>
        [Newtonsoft.Json.JsonProperty("server", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Server { get; }
    
        /// <summary>Login for accessing FTP server</summary>
        [Newtonsoft.Json.JsonProperty("login", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Login { get; }
    
        /// <summary>Password associated with the Login to access the FTP server</summary>
        [Newtonsoft.Json.JsonProperty("password", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Password { get; }
    
        /// <summary>Path of a subfolder on FTP server</summary>
        [Newtonsoft.Json.JsonProperty("subfolder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Subfolder { get; }
    
        /// <summary>API Name associated with the medium</summary>
        [Newtonsoft.Json.JsonProperty("api_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Api_name { get; }
    
        /// <summary>Name of the medium</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; }
    
        /// <summary>List of organizations linked to the medium</summary>
        [Newtonsoft.Json.JsonProperty("organizations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Organizations { get; }
    
        /// <summary>Description of the medium</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Update_medium_success_response 
    {
        [Newtonsoft.Json.JsonConstructor]
        public Update_medium_success_response(string @message, Update_medium_success_responseResult_code? @result_code)
        {
            this.Result_code = @result_code;
            this.Message = @message;
        }
    
        [Newtonsoft.Json.JsonProperty("result_code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Update_medium_success_responseResult_code? Result_code { get; }
    
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Update_medium_failed_response 
    {
        [Newtonsoft.Json.JsonConstructor]
        public Update_medium_failed_response(System.Collections.Generic.ICollection<Error_model> @errors, string @message, Update_medium_failed_responseResult_code? @result_code)
        {
            this.Errors = @errors;
            this.Result_code = @result_code;
            this.Message = @message;
        }
    
        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Error_model> Errors { get; }
    
        [Newtonsoft.Json.JsonProperty("result_code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Update_medium_failed_responseResult_code? Result_code { get; }
    
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CreateRepositoryMediumApiRequestModel 
    {
        [Newtonsoft.Json.JsonConstructor]
        public CreateRepositoryMediumApiRequestModel(string @api_name, string @description, string @name, System.Collections.Generic.ICollection<string> @organizations, string @subfolder)
        {
            this.Subfolder = @subfolder;
            this.Api_name = @api_name;
            this.Name = @name;
            this.Organizations = @organizations;
            this.Description = @description;
        }
    
        [Newtonsoft.Json.JsonProperty("subfolder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Subfolder { get; }
    
        /// <summary>API Name associated with the medium</summary>
        [Newtonsoft.Json.JsonProperty("api_name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Api_name { get; }
    
        /// <summary>Name of the medium</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; }
    
        /// <summary>List of organizations linked to the medium</summary>
        [Newtonsoft.Json.JsonProperty("organizations", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> Organizations { get; }
    
        /// <summary>Description of the medium</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class UpdateRepositoryMediumApiRequestModel 
    {
        [Newtonsoft.Json.JsonConstructor]
        public UpdateRepositoryMediumApiRequestModel(string @api_name, string @description, string @name, System.Collections.Generic.ICollection<string> @organizations, string @subfolder)
        {
            this.Subfolder = @subfolder;
            this.Api_name = @api_name;
            this.Name = @name;
            this.Organizations = @organizations;
            this.Description = @description;
        }
    
        [Newtonsoft.Json.JsonProperty("subfolder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Subfolder { get; }
    
        /// <summary>API Name associated with the medium</summary>
        [Newtonsoft.Json.JsonProperty("api_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Api_name { get; }
    
        /// <summary>Name of the medium</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; }
    
        /// <summary>List of organizations linked to the medium</summary>
        [Newtonsoft.Json.JsonProperty("organizations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Organizations { get; }
    
        /// <summary>Description of the medium</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CreateUrlMediumApiRequestModel 
    {
        [Newtonsoft.Json.JsonConstructor]
        public CreateUrlMediumApiRequestModel(string @api_name, string @description, string @login, string @name, System.Collections.Generic.ICollection<string> @organizations, string @password, string @url)
        {
            this.Url = @url;
            this.Login = @login;
            this.Password = @password;
            this.Api_name = @api_name;
            this.Name = @name;
            this.Organizations = @organizations;
            this.Description = @description;
        }
    
        /// <summary>URL for accessing server</summary>
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Url { get; }
    
        /// <summary>Login for accessing server</summary>
        [Newtonsoft.Json.JsonProperty("login", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Login { get; }
    
        /// <summary>Password associated with the Login to access the server</summary>
        [Newtonsoft.Json.JsonProperty("password", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Password { get; }
    
        /// <summary>API Name associated with the medium</summary>
        [Newtonsoft.Json.JsonProperty("api_name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Api_name { get; }
    
        /// <summary>Name of the medium</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; }
    
        /// <summary>List of organizations linked to the medium</summary>
        [Newtonsoft.Json.JsonProperty("organizations", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> Organizations { get; }
    
        /// <summary>Description of the medium</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class UpdateUrlMediumApiRequestModel 
    {
        [Newtonsoft.Json.JsonConstructor]
        public UpdateUrlMediumApiRequestModel(string @api_name, string @description, string @login, string @name, System.Collections.Generic.ICollection<string> @organizations, string @password, string @url)
        {
            this.Url = @url;
            this.Login = @login;
            this.Password = @password;
            this.Api_name = @api_name;
            this.Name = @name;
            this.Organizations = @organizations;
            this.Description = @description;
        }
    
        /// <summary>URL for accessing server</summary>
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; }
    
        /// <summary>Login for accessing server</summary>
        [Newtonsoft.Json.JsonProperty("login", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Login { get; }
    
        /// <summary>Password associated with the Login to access the server</summary>
        [Newtonsoft.Json.JsonProperty("password", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Password { get; }
    
        /// <summary>API Name associated with the medium</summary>
        [Newtonsoft.Json.JsonProperty("api_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Api_name { get; }
    
        /// <summary>Name of the medium</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; }
    
        /// <summary>List of organizations linked to the medium</summary>
        [Newtonsoft.Json.JsonProperty("organizations", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Organizations { get; }
    
        /// <summary>Description of the medium</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Delete_medium_success_response 
    {
        [Newtonsoft.Json.JsonConstructor]
        public Delete_medium_success_response(string @message, Delete_medium_success_responseResult_code? @result_code)
        {
            this.Result_code = @result_code;
            this.Message = @message;
        }
    
        [Newtonsoft.Json.JsonProperty("result_code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Delete_medium_success_responseResult_code? Result_code { get; }
    
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Retrieve_medium_success_response 
    {
        [Newtonsoft.Json.JsonConstructor]
        public Retrieve_medium_success_response(FtpMediumModel @ftp_medium_model, RepositoryMediumModel @repository_medium_model, UrlMediumModel @url_medium_model)
        {
            this.Ftp_medium_model = @ftp_medium_model;
            this.Repository_medium_model = @repository_medium_model;
            this.Url_medium_model = @url_medium_model;
        }
    
        [Newtonsoft.Json.JsonProperty("ftp_medium_model", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FtpMediumModel Ftp_medium_model { get; }
    
        [Newtonsoft.Json.JsonProperty("repository_medium_model", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RepositoryMediumModel Repository_medium_model { get; }
    
        [Newtonsoft.Json.JsonProperty("url_medium_model", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UrlMediumModel Url_medium_model { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class FtpMediumModel 
    {
        [Newtonsoft.Json.JsonConstructor]
        public FtpMediumModel(string @api_name, string @description, FtpMediumModelFtp_type? @ftp_type, string @login, string @name, string @server, string @subfolder, FtpMediumModelType? @type)
        {
            this.Type = @type;
            this.Api_name = @api_name;
            this.Name = @name;
            this.Description = @description;
            this.Ftp_type = @ftp_type;
            this.Server = @server;
            this.Login = @login;
            this.Subfolder = @subfolder;
        }
    
        /// <summary>Type of the Medium (FTP / REPOSITORY / URL).</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FtpMediumModelType? Type { get; }
    
        /// <summary>API name of the Medium.</summary>
        [Newtonsoft.Json.JsonProperty("api_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Api_name { get; }
    
        /// <summary>Name of the Medium.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; }
    
        /// <summary>Description</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; }
    
        /// <summary>Type of ftp mediums (FTPS / FTPSIMPLICIT / SFTP)</summary>
        [Newtonsoft.Json.JsonProperty("ftp_type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FtpMediumModelFtp_type? Ftp_type { get; }
    
        /// <summary>Name of server</summary>
        [Newtonsoft.Json.JsonProperty("server", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Server { get; }
    
        /// <summary>Name of login user</summary>
        [Newtonsoft.Json.JsonProperty("login", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Login { get; }
    
        /// <summary>subfolder path</summary>
        [Newtonsoft.Json.JsonProperty("subfolder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Subfolder { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class RepositoryMediumModel 
    {
        [Newtonsoft.Json.JsonConstructor]
        public RepositoryMediumModel(string @api_name, RepositoryMediumModelData_exchange_type? @data_exchange_type, string @description, string @name, string @subfolder, RepositoryMediumModelType? @type)
        {
            this.Type = @type;
            this.Api_name = @api_name;
            this.Name = @name;
            this.Description = @description;
            this.Data_exchange_type = @data_exchange_type;
            this.Subfolder = @subfolder;
        }
    
        /// <summary>Type of the Medium (FTP / REPOSITORY / URL).</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RepositoryMediumModelType? Type { get; }
    
        /// <summary>API name of the Medium.</summary>
        [Newtonsoft.Json.JsonProperty("api_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Api_name { get; }
    
        /// <summary>Name of the Medium.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; }
    
        /// <summary>Description</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; }
    
        /// <summary>Data exchange type</summary>
        [Newtonsoft.Json.JsonProperty("data_exchange_type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RepositoryMediumModelData_exchange_type? Data_exchange_type { get; }
    
        /// <summary>subfolder path</summary>
        [Newtonsoft.Json.JsonProperty("subfolder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Subfolder { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class UrlMediumModel 
    {
        [Newtonsoft.Json.JsonConstructor]
        public UrlMediumModel(string @api_name, string @description, string @login, string @name, UrlMediumModelType? @type, string @url_link)
        {
            this.Type = @type;
            this.Api_name = @api_name;
            this.Name = @name;
            this.Description = @description;
            this.Url_link = @url_link;
            this.Login = @login;
        }
    
        /// <summary>Type of the Medium (FTP / REPOSITORY / URL).</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public UrlMediumModelType? Type { get; }
    
        /// <summary>API name of the Medium.</summary>
        [Newtonsoft.Json.JsonProperty("api_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Api_name { get; }
    
        /// <summary>Name of the Medium.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; }
    
        /// <summary>Description</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; }
    
        /// <summary>url link details</summary>
        [Newtonsoft.Json.JsonProperty("url_link", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url_link { get; }
    
        /// <summary>Name of login user</summary>
        [Newtonsoft.Json.JsonProperty("login", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Login { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Retrieve_all_notification_groups_success_example_response 
    {
        [Newtonsoft.Json.JsonConstructor]
        public Retrieve_all_notification_groups_success_example_response(System.Collections.Generic.ICollection<Notificationgroups> @notification_groups)
        {
            this.Notification_groups = @notification_groups;
        }
    
        /// <summary>Collection of notification groups.</summary>
        [Newtonsoft.Json.JsonProperty("notification_groups", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Notificationgroups> Notification_groups { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Notificationgroups 
    {
        [Newtonsoft.Json.JsonConstructor]
        public Notificationgroups(string @api_name)
        {
            this.Api_name = @api_name;
        }
    
        /// <summary>The Api name for a notification groups.</summary>
        [Newtonsoft.Json.JsonProperty("api_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Api_name { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CreateNotificationGroupApiRequestModel 
    {
        [Newtonsoft.Json.JsonConstructor]
        public CreateNotificationGroupApiRequestModel(string @api_name, System.Collections.Generic.ICollection<string> @email_addresses, string @name)
        {
            this.Name = @name;
            this.Api_name = @api_name;
            this.Email_addresses = @email_addresses;
        }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; }
    
        [Newtonsoft.Json.JsonProperty("api_name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Api_name { get; }
    
        [Newtonsoft.Json.JsonProperty("email_addresses", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Email_addresses { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Create_notification_group_success_example_response 
    {
        [Newtonsoft.Json.JsonConstructor]
        public Create_notification_group_success_example_response(string @message, Create_notification_group_success_example_responseResult_code? @result_code)
        {
            this.Result_code = @result_code;
            this.Message = @message;
        }
    
        [Newtonsoft.Json.JsonProperty("result_code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Create_notification_group_success_example_responseResult_code? Result_code { get; }
    
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Create_notification_group_failed_example_response 
    {
        [Newtonsoft.Json.JsonConstructor]
        public Create_notification_group_failed_example_response(System.Collections.Generic.ICollection<Error_model> @errors, string @message, Create_notification_group_failed_example_responseResult_code? @result_code)
        {
            this.Errors = @errors;
            this.Result_code = @result_code;
            this.Message = @message;
        }
    
        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Error_model> Errors { get; }
    
        [Newtonsoft.Json.JsonProperty("result_code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Create_notification_group_failed_example_responseResult_code? Result_code { get; }
    
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class UpdateNotificationGroupApiRequestModel 
    {
        [Newtonsoft.Json.JsonConstructor]
        public UpdateNotificationGroupApiRequestModel(string @api_name, System.Collections.Generic.ICollection<string> @email_addresses)
        {
            this.Api_name = @api_name;
            this.Email_addresses = @email_addresses;
        }
    
        [Newtonsoft.Json.JsonProperty("api_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Api_name { get; }
    
        [Newtonsoft.Json.JsonProperty("email_addresses", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Email_addresses { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Update_notification_group_success_example_response 
    {
        [Newtonsoft.Json.JsonConstructor]
        public Update_notification_group_success_example_response(string @message, Update_notification_group_success_example_responseResult_code? @result_code)
        {
            this.Result_code = @result_code;
            this.Message = @message;
        }
    
        [Newtonsoft.Json.JsonProperty("result_code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Update_notification_group_success_example_responseResult_code? Result_code { get; }
    
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Update_notification_group_failed_example_response 
    {
        [Newtonsoft.Json.JsonConstructor]
        public Update_notification_group_failed_example_response(System.Collections.Generic.ICollection<Error_model> @errors, string @message, Update_notification_group_failed_example_responseResult_code? @result_code)
        {
            this.Errors = @errors;
            this.Result_code = @result_code;
            this.Message = @message;
        }
    
        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Error_model> Errors { get; }
    
        [Newtonsoft.Json.JsonProperty("result_code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Update_notification_group_failed_example_responseResult_code? Result_code { get; }
    
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Delete_notification_group_success_response 
    {
        [Newtonsoft.Json.JsonConstructor]
        public Delete_notification_group_success_response(string @message, Delete_notification_group_success_responseResult_code? @result_code)
        {
            this.Result_code = @result_code;
            this.Message = @message;
        }
    
        [Newtonsoft.Json.JsonProperty("result_code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Delete_notification_group_success_responseResult_code? Result_code { get; }
    
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Delete_notification_group_failed_response 
    {
        [Newtonsoft.Json.JsonConstructor]
        public Delete_notification_group_failed_response(System.Collections.Generic.ICollection<Error_model> @errors, string @message, Delete_notification_group_failed_responseResult_code? @result_code)
        {
            this.Errors = @errors;
            this.Result_code = @result_code;
            this.Message = @message;
        }
    
        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Error_model> Errors { get; }
    
        [Newtonsoft.Json.JsonProperty("result_code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Delete_notification_group_failed_responseResult_code? Result_code { get; }
    
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Organization 
    {
        [Newtonsoft.Json.JsonConstructor]
        public Organization(string @image_reference, string @image_type, System.Collections.Generic.ICollection<Language> @languages, string @name)
        {
            this.Name = @name;
            this.Image_reference = @image_reference;
            this.Image_type = @image_type;
            this.Languages = @languages;
        }
    
        /// <summary>This is the name of the organization</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; }
    
        /// <summary>This is the image reference</summary>
        [Newtonsoft.Json.JsonProperty("image_reference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Image_reference { get; }
    
        /// <summary>This is the type of image</summary>
        [Newtonsoft.Json.JsonProperty("image_type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Image_type { get; }
    
        /// <summary>These are the languages supported by the organization</summary>
        [Newtonsoft.Json.JsonProperty("languages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Language> Languages { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Language 
    {
        [Newtonsoft.Json.JsonConstructor]
        public Language(string @code, string @locale, string @name)
        {
            this.Name = @name;
            this.Code = @code;
            this.Locale = @locale;
        }
    
        /// <summary>The name of the language</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; }
    
        /// <summary>The code of the language</summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code { get; }
    
        /// <summary>The locale of the language</summary>
        [Newtonsoft.Json.JsonProperty("locale", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Locale { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Singlebatches 
    {
        [Newtonsoft.Json.JsonConstructor]
        public Singlebatches(System.Collections.Generic.ICollection<Journey2> @journeys)
        {
            this.Journeys = @journeys;
        }
    
        /// <summary>A collection of journeys</summary>
        [Newtonsoft.Json.JsonProperty("journeys", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Journey2> Journeys { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Journey2 
    {
        [Newtonsoft.Json.JsonConstructor]
        public Journey2(string @api_name, Journey2Type? @type)
        {
            this.Api_name = @api_name;
            this.Type = @type;
        }
    
        /// <summary>The api_name of the journey</summary>
        [Newtonsoft.Json.JsonProperty("api_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Api_name { get; }
    
        /// <summary>The type of journey</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Journey2Type? Type { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CreateSingleBatchRequestModel 
    {
        [Newtonsoft.Json.JsonConstructor]
        public CreateSingleBatchRequestModel(CreateJourneyModel @journey, MessageDTO @message)
        {
            this.Message = @message;
            this.Journey = @journey;
        }
    
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public MessageDTO Message { get; }
    
        [Newtonsoft.Json.JsonProperty("journey", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public CreateJourneyModel Journey { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MessageDTO 
    {
        [Newtonsoft.Json.JsonConstructor]
        public MessageDTO(string @api_name, System.Collections.Generic.ICollection<ContentDTO> @content, System.Collections.Generic.ICollection<string> @language_codes, string @name)
        {
            this.Api_name = @api_name;
            this.Name = @name;
            this.Language_codes = @language_codes;
            this.Content = @content;
        }
    
        [Newtonsoft.Json.JsonProperty("api_name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Api_name { get; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; }
    
        [Newtonsoft.Json.JsonProperty("language_codes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Language_codes { get; }
    
        [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ContentDTO> Content { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CreateJourneyModel 
    {
        [Newtonsoft.Json.JsonConstructor]
        public CreateJourneyModel(string @api_name, string @audience_filter, string @campaign_analytics_tag, DeduplicationDTO @deduplication, CreateJourneyModelLaunch_state? @launch_state, string @message_analytics_tag, string @name, SchedulingDTO @scheduling, string @segment_api_name, WaveDTO @send_in_waves, TopDTO @sending_limit, CreateJourneyModelType? @type)
        {
            this.Segment_api_name = @segment_api_name;
            this.Audience_filter = @audience_filter;
            this.Api_name = @api_name;
            this.Name = @name;
            this.Launch_state = @launch_state;
            this.Scheduling = @scheduling;
            this.Type = @type;
            this.Campaign_analytics_tag = @campaign_analytics_tag;
            this.Message_analytics_tag = @message_analytics_tag;
            this.Deduplication = @deduplication;
            this.Send_in_waves = @send_in_waves;
            this.Sending_limit = @sending_limit;
        }
    
        [Newtonsoft.Json.JsonProperty("segment_api_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Segment_api_name { get; }
    
        [Newtonsoft.Json.JsonProperty("audience_filter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Audience_filter { get; }
    
        [Newtonsoft.Json.JsonProperty("api_name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Api_name { get; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; }
    
        [Newtonsoft.Json.JsonProperty("launch_state", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CreateJourneyModelLaunch_state? Launch_state { get; }
    
        [Newtonsoft.Json.JsonProperty("scheduling", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SchedulingDTO Scheduling { get; }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CreateJourneyModelType? Type { get; }
    
        [Newtonsoft.Json.JsonProperty("campaign_analytics_tag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Campaign_analytics_tag { get; }
    
        [Newtonsoft.Json.JsonProperty("message_analytics_tag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message_analytics_tag { get; }
    
        [Newtonsoft.Json.JsonProperty("deduplication", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DeduplicationDTO Deduplication { get; }
    
        [Newtonsoft.Json.JsonProperty("send_in_waves", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WaveDTO Send_in_waves { get; }
    
        [Newtonsoft.Json.JsonProperty("sending_limit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TopDTO Sending_limit { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ContentDTO 
    {
        [Newtonsoft.Json.JsonConstructor]
        public ContentDTO(System.Collections.Generic.ICollection<DataSelectionDTO> @data_selection_content, string @language_code)
        {
            this.Language_code = @language_code;
            this.Data_selection_content = @data_selection_content;
        }
    
        [Newtonsoft.Json.JsonProperty("language_code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Language_code { get; }
    
        [Newtonsoft.Json.JsonProperty("data_selection_content", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<DataSelectionDTO> Data_selection_content { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SchedulingDTO 
    {
        [Newtonsoft.Json.JsonConstructor]
        public SchedulingDTO(System.DateTimeOffset? @launch_date)
        {
            this.Launch_date = @launch_date;
        }
    
        [Newtonsoft.Json.JsonProperty("launch_date", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? Launch_date { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DeduplicationDTO 
    {
        [Newtonsoft.Json.JsonConstructor]
        public DeduplicationDTO(System.Collections.Generic.ICollection<string> @fields, bool @sort_descending, string @sort_field)
        {
            this.Fields = @fields;
            this.Sort_field = @sort_field;
            this.Sort_descending = @sort_descending;
        }
    
        [Newtonsoft.Json.JsonProperty("fields", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> Fields { get; }
    
        [Newtonsoft.Json.JsonProperty("sort_field", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Sort_field { get; }
    
        [Newtonsoft.Json.JsonProperty("sort_descending", Required = Newtonsoft.Json.Required.Always)]
        public bool Sort_descending { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class WaveDTO 
    {
        [Newtonsoft.Json.JsonConstructor]
        public WaveDTO(int @interval_in_minutes, int? @items_per_wave, int? @number_of_waves, string @type)
        {
            this.Number_of_waves = @number_of_waves;
            this.Items_per_wave = @items_per_wave;
            this.Interval_in_minutes = @interval_in_minutes;
            this.Type = @type;
        }
    
        [Newtonsoft.Json.JsonProperty("number_of_waves", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Number_of_waves { get; }
    
        [Newtonsoft.Json.JsonProperty("items_per_wave", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Items_per_wave { get; }
    
        [Newtonsoft.Json.JsonProperty("interval_in_minutes", Required = Newtonsoft.Json.Required.Always)]
        public int Interval_in_minutes { get; }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class TopDTO 
    {
        [Newtonsoft.Json.JsonConstructor]
        public TopDTO(int? @count, double? @percentage, bool? @sort_descending, string @sort_field, string @sort_selection, string @type)
        {
            this.Type = @type;
            this.Percentage = @percentage;
            this.Count = @count;
            this.Sort_selection = @sort_selection;
            this.Sort_field = @sort_field;
            this.Sort_descending = @sort_descending;
        }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; }
    
        [Newtonsoft.Json.JsonProperty("percentage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Percentage { get; }
    
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; }
    
        [Newtonsoft.Json.JsonProperty("sort_selection", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Sort_selection { get; }
    
        [Newtonsoft.Json.JsonProperty("sort_field", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sort_field { get; }
    
        [Newtonsoft.Json.JsonProperty("sort_descending", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Sort_descending { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DataSelectionDTO 
    {
        [Newtonsoft.Json.JsonConstructor]
        public DataSelectionDTO(System.Collections.Generic.ICollection<object> @insert_data, string @name, System.Collections.Generic.ICollection<string> @select_data)
        {
            this.Name = @name;
            this.Insert_data = @insert_data;
            this.Select_data = @select_data;
        }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; }
    
        [Newtonsoft.Json.JsonProperty("insert_data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<object> Insert_data { get; }
    
        [Newtonsoft.Json.JsonProperty("select_data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Select_data { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Create_single_batch_success_response 
    {
        [Newtonsoft.Json.JsonConstructor]
        public Create_single_batch_success_response(Journey3 @journey, string @result_code)
        {
            this.Journey = @journey;
            this.Result_code = @result_code;
        }
    
        /// <summary>Journey information</summary>
        [Newtonsoft.Json.JsonProperty("journey", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Journey3 Journey { get; }
    
        /// <summary>ResultCode</summary>
        [Newtonsoft.Json.JsonProperty("result_code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Result_code { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Journey3 
    {
        [Newtonsoft.Json.JsonConstructor]
        public Journey3(string @api_name, Deduplication @deduplication, Journey3Launch_state? @launch_state, string @name, Send_in_waves @send_in_waves, Sending_limit @sending_limit, Journey3Type? @type)
        {
            this.Api_name = @api_name;
            this.Name = @name;
            this.Launch_state = @launch_state;
            this.Type = @type;
            this.Deduplication = @deduplication;
            this.Send_in_waves = @send_in_waves;
            this.Sending_limit = @sending_limit;
        }
    
        /// <summary>The api_name of the journey</summary>
        [Newtonsoft.Json.JsonProperty("api_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Api_name { get; }
    
        /// <summary>The name of the journey</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; }
    
        /// <summary>The state of the journey</summary>
        [Newtonsoft.Json.JsonProperty("launch_state", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Journey3Launch_state? Launch_state { get; }
    
        /// <summary>The type of journey</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Journey3Type? Type { get; }
    
        [Newtonsoft.Json.JsonProperty("deduplication", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Deduplication Deduplication { get; }
    
        [Newtonsoft.Json.JsonProperty("send_in_waves", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Send_in_waves Send_in_waves { get; }
    
        [Newtonsoft.Json.JsonProperty("sending_limit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Sending_limit Sending_limit { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Deduplication 
    {
        [Newtonsoft.Json.JsonConstructor]
        public Deduplication(System.Collections.Generic.ICollection<string> @fields, bool? @sort_descending, string @sort_field)
        {
            this.Fields = @fields;
            this.Sort_field = @sort_field;
            this.Sort_descending = @sort_descending;
        }
    
        [Newtonsoft.Json.JsonProperty("fields", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Fields { get; }
    
        [Newtonsoft.Json.JsonProperty("sort_field", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sort_field { get; }
    
        [Newtonsoft.Json.JsonProperty("sort_descending", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Sort_descending { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Send_in_waves 
    {
        [Newtonsoft.Json.JsonConstructor]
        public Send_in_waves(int? @interval_in_minutes, int? @items_per_wave, int? @number_of_waves, string @type)
        {
            this.Number_of_waves = @number_of_waves;
            this.Items_per_wave = @items_per_wave;
            this.Interval_in_minutes = @interval_in_minutes;
            this.Type = @type;
        }
    
        [Newtonsoft.Json.JsonProperty("number_of_waves", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Number_of_waves { get; }
    
        [Newtonsoft.Json.JsonProperty("items_per_wave", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Items_per_wave { get; }
    
        [Newtonsoft.Json.JsonProperty("interval_in_minutes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Interval_in_minutes { get; }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Sending_limit 
    {
        [Newtonsoft.Json.JsonConstructor]
        public Sending_limit(int? @count, double? @percentage, bool? @sort_descending, string @sort_field, string @sort_selection, string @type)
        {
            this.Type = @type;
            this.Percentage = @percentage;
            this.Count = @count;
            this.Sort_selection = @sort_selection;
            this.Sort_field = @sort_field;
            this.Sort_descending = @sort_descending;
        }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; }
    
        [Newtonsoft.Json.JsonProperty("percentage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Percentage { get; }
    
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count { get; }
    
        [Newtonsoft.Json.JsonProperty("sort_selection", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sort_selection { get; }
    
        [Newtonsoft.Json.JsonProperty("sort_field", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sort_field { get; }
    
        [Newtonsoft.Json.JsonProperty("sort_descending", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Sort_descending { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Create_single_batch_failed_response 
    {
        [Newtonsoft.Json.JsonConstructor]
        public Create_single_batch_failed_response(System.Collections.Generic.ICollection<Error> @errors, Journey3 @journey, string @result_code)
        {
            this.Journey = @journey;
            this.Errors = @errors;
            this.Result_code = @result_code;
        }
    
        /// <summary>Journey information</summary>
        [Newtonsoft.Json.JsonProperty("journey", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Journey3 Journey { get; }
    
        /// <summary>Error information</summary>
        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Error> Errors { get; }
    
        /// <summary>ResultCode</summary>
        [Newtonsoft.Json.JsonProperty("result_code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Result_code { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Error 
    {
        [Newtonsoft.Json.JsonConstructor]
        public Error(string @description, string @error_code)
        {
            this.Error_code = @error_code;
            this.Description = @description;
        }
    
        /// <summary>Errorcode</summary>
        [Newtonsoft.Json.JsonProperty("error_code", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Error_code { get; }
    
        /// <summary>The description</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Get_single_batch_response 
    {
        [Newtonsoft.Json.JsonConstructor]
        public Get_single_batch_response(Journey4 @journey)
        {
            this.Journey = @journey;
        }
    
        /// <summary>Journey information</summary>
        [Newtonsoft.Json.JsonProperty("journey", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Journey4 Journey { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Journey4 
    {
        [Newtonsoft.Json.JsonConstructor]
        public Journey4(string @api_name, string @campaign_analytics_tag, Journey4Launch_state? @launch_state, string @message_analytics_tag, string @name, Journey4Type? @type)
        {
            this.Api_name = @api_name;
            this.Name = @name;
            this.Launch_state = @launch_state;
            this.Type = @type;
            this.Campaign_analytics_tag = @campaign_analytics_tag;
            this.Message_analytics_tag = @message_analytics_tag;
        }
    
        /// <summary>The api_name of the journey</summary>
        [Newtonsoft.Json.JsonProperty("api_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Api_name { get; }
    
        /// <summary>The name of the journey</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; }
    
        /// <summary>The state of the journey</summary>
        [Newtonsoft.Json.JsonProperty("launch_state", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Journey4Launch_state? Launch_state { get; }
    
        /// <summary>The type of journey</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Journey4Type? Type { get; }
    
        /// <summary>The campaign_analytics_tag of the journey</summary>
        [Newtonsoft.Json.JsonProperty("campaign_analytics_tag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Campaign_analytics_tag { get; }
    
        /// <summary>The message_analytics_tag of the journey</summary>
        [Newtonsoft.Json.JsonProperty("message_analytics_tag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message_analytics_tag { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class TriggerSingleBatchRequestModel 
    {
        [Newtonsoft.Json.JsonConstructor]
        public TriggerSingleBatchRequestModel(JourneyDTO @journey)
        {
            this.Journey = @journey;
        }
    
        [Newtonsoft.Json.JsonProperty("journey", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JourneyDTO Journey { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class JourneyDTO 
    {
        [Newtonsoft.Json.JsonConstructor]
        public JourneyDTO(string @api_name, string @campaign_analytics_tag, DeduplicationDTO @deduplication, JourneyDTOLaunch_state? @launch_state, string @message_analytics_tag, string @name, SchedulingDTO @scheduling, WaveDTO @send_in_waves, TopDTO @sending_limit, JourneyDTOType? @type)
        {
            this.Api_name = @api_name;
            this.Name = @name;
            this.Launch_state = @launch_state;
            this.Scheduling = @scheduling;
            this.Type = @type;
            this.Campaign_analytics_tag = @campaign_analytics_tag;
            this.Message_analytics_tag = @message_analytics_tag;
            this.Deduplication = @deduplication;
            this.Send_in_waves = @send_in_waves;
            this.Sending_limit = @sending_limit;
        }
    
        [Newtonsoft.Json.JsonProperty("api_name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Api_name { get; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; }
    
        [Newtonsoft.Json.JsonProperty("launch_state", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public JourneyDTOLaunch_state? Launch_state { get; }
    
        [Newtonsoft.Json.JsonProperty("scheduling", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SchedulingDTO Scheduling { get; }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public JourneyDTOType? Type { get; }
    
        [Newtonsoft.Json.JsonProperty("campaign_analytics_tag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Campaign_analytics_tag { get; }
    
        [Newtonsoft.Json.JsonProperty("message_analytics_tag", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message_analytics_tag { get; }
    
        [Newtonsoft.Json.JsonProperty("deduplication", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DeduplicationDTO Deduplication { get; }
    
        [Newtonsoft.Json.JsonProperty("send_in_waves", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WaveDTO Send_in_waves { get; }
    
        [Newtonsoft.Json.JsonProperty("sending_limit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TopDTO Sending_limit { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Trigger_single_batch_response 
    {
        [Newtonsoft.Json.JsonConstructor]
        public Trigger_single_batch_response(System.Collections.Generic.ICollection<Error2> @errors, Journey5 @journey, string @result_code)
        {
            this.Journey = @journey;
            this.Errors = @errors;
            this.Result_code = @result_code;
        }
    
        /// <summary>Journey information</summary>
        [Newtonsoft.Json.JsonProperty("journey", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Journey5 Journey { get; }
    
        /// <summary>Error information</summary>
        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Error2> Errors { get; }
    
        /// <summary>ResultCode</summary>
        [Newtonsoft.Json.JsonProperty("result_code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Result_code { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Journey5 
    {
        [Newtonsoft.Json.JsonConstructor]
        public Journey5(string @api_name, Journey5Launch_state? @launch_state, string @name, Scheduling @scheduling, Journey5Type? @type)
        {
            this.Api_name = @api_name;
            this.Name = @name;
            this.Launch_state = @launch_state;
            this.Type = @type;
            this.Scheduling = @scheduling;
        }
    
        /// <summary>The api_name of the journey</summary>
        [Newtonsoft.Json.JsonProperty("api_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Api_name { get; }
    
        /// <summary>The name of the journey</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; }
    
        /// <summary>The state of the journey</summary>
        [Newtonsoft.Json.JsonProperty("launch_state", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Journey5Launch_state? Launch_state { get; }
    
        /// <summary>The type of journey</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Journey5Type? Type { get; }
    
        /// <summary>Contains scheduling information</summary>
        [Newtonsoft.Json.JsonProperty("scheduling", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Scheduling Scheduling { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Error2 
    {
        [Newtonsoft.Json.JsonConstructor]
        public Error2(string @description, string @error_code)
        {
            this.Error_code = @error_code;
            this.Description = @description;
        }
    
        /// <summary>Errorcode</summary>
        [Newtonsoft.Json.JsonProperty("error_code", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Error_code { get; }
    
        /// <summary>The description</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Scheduling 
    {
        [Newtonsoft.Json.JsonConstructor]
        public Scheduling(System.DateTimeOffset? @launch_date)
        {
            this.Launch_date = @launch_date;
        }
    
        /// <summary>The datetime informations the journey should be scheduled</summary>
        [Newtonsoft.Json.JsonProperty("launch_date", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? Launch_date { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class LaunchSingleBatchRequestModel 
    {
        [Newtonsoft.Json.JsonConstructor]
        public LaunchSingleBatchRequestModel(LaunchSingleBatchRequestModelLaunch_state? @launch_state, SchedulingDTO @scheduling)
        {
            this.Launch_state = @launch_state;
            this.Scheduling = @scheduling;
        }
    
        [Newtonsoft.Json.JsonProperty("launch_state", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LaunchSingleBatchRequestModelLaunch_state? Launch_state { get; }
    
        [Newtonsoft.Json.JsonProperty("scheduling", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SchedulingDTO Scheduling { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Launch_single_batch_journey_success_response 
    {
        [Newtonsoft.Json.JsonConstructor]
        public Launch_single_batch_journey_success_response(string @message, Launch_single_batch_journey_success_responseResult_code? @result_code)
        {
            this.Result_code = @result_code;
            this.Message = @message;
        }
    
        [Newtonsoft.Json.JsonProperty("result_code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Launch_single_batch_journey_success_responseResult_code? Result_code { get; }
    
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Launch_single_batch_journey_failed_response 
    {
        [Newtonsoft.Json.JsonConstructor]
        public Launch_single_batch_journey_failed_response(System.Collections.Generic.ICollection<Error_model> @errors, string @message, Launch_single_batch_journey_failed_responseResult_code? @result_code)
        {
            this.Errors = @errors;
            this.Result_code = @result_code;
            this.Message = @message;
        }
    
        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Error_model> Errors { get; }
    
        [Newtonsoft.Json.JsonProperty("result_code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Launch_single_batch_journey_failed_responseResult_code? Result_code { get; }
    
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Cancel_single_batch_journey_success_response 
    {
        [Newtonsoft.Json.JsonConstructor]
        public Cancel_single_batch_journey_success_response(string @message, Cancel_single_batch_journey_success_responseResult_code? @result_code)
        {
            this.Result_code = @result_code;
            this.Message = @message;
        }
    
        [Newtonsoft.Json.JsonProperty("result_code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Cancel_single_batch_journey_success_responseResult_code? Result_code { get; }
    
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Cancel_single_batch_journey_failed_response 
    {
        [Newtonsoft.Json.JsonConstructor]
        public Cancel_single_batch_journey_failed_response(System.Collections.Generic.ICollection<Error_model> @errors, string @message, Cancel_single_batch_journey_failed_responseResult_code? @result_code)
        {
            this.Errors = @errors;
            this.Result_code = @result_code;
            this.Message = @message;
        }
    
        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Error_model> Errors { get; }
    
        [Newtonsoft.Json.JsonProperty("result_code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Cancel_single_batch_journey_failed_responseResult_code? Result_code { get; }
    
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CreateSingleBatchMessageRequestModel 
    {
        [Newtonsoft.Json.JsonConstructor]
        public CreateSingleBatchMessageRequestModel(CreateJourneyModel @journey_model, CreateEmailMessageModel @message_model)
        {
            this.Journey_model = @journey_model;
            this.Message_model = @message_model;
        }
    
        [Newtonsoft.Json.JsonProperty("journey_model", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public CreateJourneyModel Journey_model { get; }
    
        [Newtonsoft.Json.JsonProperty("message_model", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public CreateEmailMessageModel Message_model { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CreateSingleBatchMobilePushRequestModel 
    {
        [Newtonsoft.Json.JsonConstructor]
        public CreateSingleBatchMobilePushRequestModel(CreateJourneyModel @journey_model, CreateMobileMessageModel @mobile_message_model)
        {
            this.Journey_model = @journey_model;
            this.Mobile_message_model = @mobile_message_model;
        }
    
        [Newtonsoft.Json.JsonProperty("journey_model", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public CreateJourneyModel Journey_model { get; }
    
        [Newtonsoft.Json.JsonProperty("mobile_message_model", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public CreateMobileMessageModel Mobile_message_model { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CreateSingleBatchSmsRequestModel 
    {
        [Newtonsoft.Json.JsonConstructor]
        public CreateSingleBatchSmsRequestModel(CreateJourneyModel @journey_model, CreateSmsModel @sms_model)
        {
            this.Sms_model = @sms_model;
            this.Journey_model = @journey_model;
        }
    
        [Newtonsoft.Json.JsonProperty("sms_model", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public CreateSmsModel Sms_model { get; }
    
        [Newtonsoft.Json.JsonProperty("journey_model", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public CreateJourneyModel Journey_model { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Status 
    {
        [Newtonsoft.Json.JsonConstructor]
        public Status()
        {
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Storedprocedures 
    {
        [Newtonsoft.Json.JsonConstructor]
        public Storedprocedures(System.Collections.Generic.ICollection<Storedprocedure> @stored_procedures)
        {
            this.Stored_procedures = @stored_procedures;
        }
    
        /// <summary>Collection of stored procedure.</summary>
        [Newtonsoft.Json.JsonProperty("stored_procedures", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Storedprocedure> Stored_procedures { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Storedprocedure 
    {
        [Newtonsoft.Json.JsonConstructor]
        public Storedprocedure(string @name, StoredprocedureType? @type)
        {
            this.Type = @type;
            this.Name = @name;
        }
    
        /// <summary>The type of the storedProccdure.</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public StoredprocedureType? Type { get; }
    
        /// <summary>The name of a storedProcedure.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CreateStoredProcedureModel 
    {
        [Newtonsoft.Json.JsonConstructor]
        public CreateStoredProcedureModel(string @body, string @description, string @name, CreateStoredProcedureModelType @type)
        {
            this.Name = @name;
            this.Description = @description;
            this.Body = @body;
            this.Type = @type;
        }
    
        /// <summary>Name of stored procedure</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; }
    
        /// <summary>Description of stored procedure</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; }
    
        /// <summary>Body of stored procedure</summary>
        [Newtonsoft.Json.JsonProperty("body", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Body { get; }
    
        /// <summary>Type of stored procedure (General, Bounce and Journey)</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CreateStoredProcedureModelType Type { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Create_stored_procedure_success_response 
    {
        [Newtonsoft.Json.JsonConstructor]
        public Create_stored_procedure_success_response(string @message, Create_stored_procedure_success_responseResult_code? @result_code)
        {
            this.Result_code = @result_code;
            this.Message = @message;
        }
    
        [Newtonsoft.Json.JsonProperty("result_code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Create_stored_procedure_success_responseResult_code? Result_code { get; }
    
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Create_stored_procedure_failed_response 
    {
        [Newtonsoft.Json.JsonConstructor]
        public Create_stored_procedure_failed_response(System.Collections.Generic.ICollection<Error_model> @errors, string @message, Create_stored_procedure_failed_responseResult_code? @result_code)
        {
            this.Errors = @errors;
            this.Result_code = @result_code;
            this.Message = @message;
        }
    
        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Error_model> Errors { get; }
    
        [Newtonsoft.Json.JsonProperty("result_code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Create_stored_procedure_failed_responseResult_code? Result_code { get; }
    
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class StoredProcedureDetailsResponseModel 
    {
        [Newtonsoft.Json.JsonConstructor]
        public StoredProcedureDetailsResponseModel(string @body, string @description, string @name, StoredProcedureDetailsResponseModelType? @type)
        {
            this.Type = @type;
            this.Name = @name;
            this.Description = @description;
            this.Body = @body;
        }
    
        /// <summary>The type of the storedProccdure.</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public StoredProcedureDetailsResponseModelType? Type { get; }
    
        /// <summary>The name of a storedProcedure.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; }
    
        /// <summary>Description of the stored procedure.</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; }
    
        /// <summary>Body associated with a stored procedure.</summary>
        [Newtonsoft.Json.JsonProperty("body", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Body { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Delete_stored_procedure_success_response 
    {
        [Newtonsoft.Json.JsonConstructor]
        public Delete_stored_procedure_success_response(string @message, Delete_stored_procedure_success_responseResult_code? @result_code)
        {
            this.Result_code = @result_code;
            this.Message = @message;
        }
    
        [Newtonsoft.Json.JsonProperty("result_code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Delete_stored_procedure_success_responseResult_code? Result_code { get; }
    
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Delete_stored_procedure_failed_response 
    {
        [Newtonsoft.Json.JsonConstructor]
        public Delete_stored_procedure_failed_response(System.Collections.Generic.ICollection<Error_model> @errors, string @message, Delete_stored_procedure_failed_responseResult_code? @result_code)
        {
            this.Errors = @errors;
            this.Result_code = @result_code;
            this.Message = @message;
        }
    
        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Error_model> Errors { get; }
    
        [Newtonsoft.Json.JsonProperty("result_code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Delete_stored_procedure_failed_responseResult_code? Result_code { get; }
    
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class UpdateStoredProcedureModel 
    {
        [Newtonsoft.Json.JsonConstructor]
        public UpdateStoredProcedureModel(string @body, string @description)
        {
            this.Description = @description;
            this.Body = @body;
        }
    
        /// <summary>Description of stored procedure</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; }
    
        /// <summary>Body of stored procedure</summary>
        [Newtonsoft.Json.JsonProperty("body", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Body { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Update_stored_procedure_success_response 
    {
        [Newtonsoft.Json.JsonConstructor]
        public Update_stored_procedure_success_response(string @message, Update_stored_procedure_success_responseResult_code? @result_code)
        {
            this.Result_code = @result_code;
            this.Message = @message;
        }
    
        [Newtonsoft.Json.JsonProperty("result_code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Update_stored_procedure_success_responseResult_code? Result_code { get; }
    
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Update_stored_procedure_failed_response 
    {
        [Newtonsoft.Json.JsonConstructor]
        public Update_stored_procedure_failed_response(System.Collections.Generic.ICollection<Error_model> @errors, string @message, Update_stored_procedure_failed_responseResult_code? @result_code)
        {
            this.Errors = @errors;
            this.Result_code = @result_code;
            this.Message = @message;
        }
    
        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Error_model> Errors { get; }
    
        [Newtonsoft.Json.JsonProperty("result_code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Update_stored_procedure_failed_responseResult_code? Result_code { get; }
    
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Tasks 
    {
        [Newtonsoft.Json.JsonConstructor]
        public Tasks(System.Collections.Generic.ICollection<Task> @tasks)
        {
            this.Tasks1 = @tasks;
        }
    
        /// <summary>Collection of tasks.</summary>
        [Newtonsoft.Json.JsonProperty("tasks", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Task> Tasks1 { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Task 
    {
        [Newtonsoft.Json.JsonConstructor]
        public Task(string @api_name, TaskType? @type)
        {
            this.Type = @type;
            this.Api_name = @api_name;
        }
    
        /// <summary>The type of the task.</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TaskType? Type { get; }
    
        /// <summary>The Api name for a task.</summary>
        [Newtonsoft.Json.JsonProperty("api_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Api_name { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class TaskDetailsResponseModel 
    {
        [Newtonsoft.Json.JsonConstructor]
        public TaskDetailsResponseModel(string @api_name, string @description, TaskDetailsResponseModelExecution_status? @execution_status, System.DateTimeOffset? @last_execution, string @name, System.DateTimeOffset? @next_execution, System.Collections.Generic.ICollection<string> @tags, TaskDetailsResponseModelType? @type)
        {
            this.Api_name = @api_name;
            this.Name = @name;
            this.Description = @description;
            this.Type = @type;
            this.Tags = @tags;
            this.Execution_status = @execution_status;
            this.Last_execution = @last_execution;
            this.Next_execution = @next_execution;
        }
    
        /// <summary>API name of the task</summary>
        [Newtonsoft.Json.JsonProperty("api_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Api_name { get; }
    
        /// <summary>Name of the task</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; }
    
        /// <summary>Description about the task.</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; }
    
        /// <summary>Type of the task</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TaskDetailsResponseModelType? Type { get; }
    
        /// <summary>Tags associated with the task.</summary>
        [Newtonsoft.Json.JsonProperty("tags", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Tags { get; }
    
        /// <summary>Status of last execution of task.</summary>
        [Newtonsoft.Json.JsonProperty("execution_status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TaskDetailsResponseModelExecution_status? Execution_status { get; }
    
        /// <summary>Last Execution Date of the task.</summary>
        [Newtonsoft.Json.JsonProperty("last_execution", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? Last_execution { get; }
    
        /// <summary>Next Execution Date of the task.</summary>
        [Newtonsoft.Json.JsonProperty("next_execution", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? Next_execution { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Delete_task_success_response 
    {
        [Newtonsoft.Json.JsonConstructor]
        public Delete_task_success_response(string @message, Delete_task_success_responseResult_code? @result_code)
        {
            this.Result_code = @result_code;
            this.Message = @message;
        }
    
        [Newtonsoft.Json.JsonProperty("result_code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Delete_task_success_responseResult_code? Result_code { get; }
    
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Delete_task_failed_response 
    {
        [Newtonsoft.Json.JsonConstructor]
        public Delete_task_failed_response(System.Collections.Generic.ICollection<Error_model> @errors, string @message, Delete_task_failed_responseResult_code? @result_code)
        {
            this.Errors = @errors;
            this.Result_code = @result_code;
            this.Message = @message;
        }
    
        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Error_model> Errors { get; }
    
        [Newtonsoft.Json.JsonProperty("result_code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Delete_task_failed_responseResult_code? Result_code { get; }
    
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Enable_task_response_example 
    {
        [Newtonsoft.Json.JsonConstructor]
        public Enable_task_response_example(System.Collections.Generic.ICollection<ErrorDTO> @errors, string @message, Enable_task_response_exampleResult_code? @result_code)
        {
            this.Errors = @errors;
            this.Result_code = @result_code;
            this.Message = @message;
        }
    
        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ErrorDTO> Errors { get; }
    
        [Newtonsoft.Json.JsonProperty("result_code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Enable_task_response_exampleResult_code? Result_code { get; }
    
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Run_task_success_response 
    {
        [Newtonsoft.Json.JsonConstructor]
        public Run_task_success_response(string @message, Run_task_success_responseResult_code? @result_code)
        {
            this.Result_code = @result_code;
            this.Message = @message;
        }
    
        [Newtonsoft.Json.JsonProperty("result_code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Run_task_success_responseResult_code? Result_code { get; }
    
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Run_task_failed_response 
    {
        [Newtonsoft.Json.JsonConstructor]
        public Run_task_failed_response(System.Collections.Generic.ICollection<ErrorDTO> @errors, string @message, Run_task_failed_responseResult_code? @result_code)
        {
            this.Errors = @errors;
            this.Result_code = @result_code;
            this.Message = @message;
        }
    
        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ErrorDTO> Errors { get; }
    
        [Newtonsoft.Json.JsonProperty("result_code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Run_task_failed_responseResult_code? Result_code { get; }
    
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class TaskActions 
    {
        [Newtonsoft.Json.JsonConstructor]
        public TaskActions(System.Collections.Generic.ICollection<Taskaction> @taskaction)
        {
            this.Taskaction = @taskaction;
        }
    
        /// <summary>The actions of the task.</summary>
        [Newtonsoft.Json.JsonProperty("taskaction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<Taskaction> Taskaction { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Disable_task_response_example 
    {
        [Newtonsoft.Json.JsonConstructor]
        public Disable_task_response_example(System.Collections.Generic.ICollection<ErrorDTO> @errors, string @message, Disable_task_response_exampleResult_code? @result_code)
        {
            this.Errors = @errors;
            this.Result_code = @result_code;
            this.Message = @message;
        }
    
        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ErrorDTO> Errors { get; }
    
        [Newtonsoft.Json.JsonProperty("result_code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Disable_task_response_exampleResult_code? Result_code { get; }
    
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CreateExportTaskApiRequestModel 
    {
        [Newtonsoft.Json.JsonConstructor]
        public CreateExportTaskApiRequestModel(string @api_name, ApiExportTaskDataSourceModel @data_source, string @description, string @destination, string @name, System.Collections.Generic.ICollection<ApiNotificationModel> @notifications, ApiTaskAdvancedOptions @options, ApiExportTaskOutputModel @output, ApiScheduleModel @schedule, int? @scheduler, string @subfolder, System.Collections.Generic.ICollection<string> @tags, ApiTriggerFileModel @trigger_file, string @trigger_journey_after_execution, ApiZipAndEncryptModel @zip_and_encrypt)
        {
            this.Data_source = @data_source;
            this.Output = @output;
            this.Options = @options;
            this.Trigger_file = @trigger_file;
            this.Zip_and_encrypt = @zip_and_encrypt;
            this.Destination = @destination;
            this.Subfolder = @subfolder;
            this.Name = @name;
            this.Description = @description;
            this.Tags = @tags;
            this.Api_name = @api_name;
            this.Scheduler = @scheduler;
            this.Schedule = @schedule;
            this.Notifications = @notifications;
            this.Trigger_journey_after_execution = @trigger_journey_after_execution;
        }
    
        [Newtonsoft.Json.JsonProperty("data_source", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ApiExportTaskDataSourceModel Data_source { get; }
    
        [Newtonsoft.Json.JsonProperty("output", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ApiExportTaskOutputModel Output { get; }
    
        [Newtonsoft.Json.JsonProperty("options", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ApiTaskAdvancedOptions Options { get; }
    
        [Newtonsoft.Json.JsonProperty("trigger_file", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ApiTriggerFileModel Trigger_file { get; }
    
        [Newtonsoft.Json.JsonProperty("zip_and_encrypt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ApiZipAndEncryptModel Zip_and_encrypt { get; }
    
        [Newtonsoft.Json.JsonProperty("destination", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Destination { get; }
    
        [Newtonsoft.Json.JsonProperty("subfolder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Subfolder { get; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; }
    
        [Newtonsoft.Json.JsonProperty("tags", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Tags { get; }
    
        [Newtonsoft.Json.JsonProperty("api_name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Api_name { get; }
    
        [Newtonsoft.Json.JsonProperty("scheduler", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Scheduler { get; }
    
        [Newtonsoft.Json.JsonProperty("schedule", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ApiScheduleModel Schedule { get; }
    
        [Newtonsoft.Json.JsonProperty("notifications", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<ApiNotificationModel> Notifications { get; }
    
        [Newtonsoft.Json.JsonProperty("trigger_journey_after_execution", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Trigger_journey_after_execution { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ApiExportTaskDataSourceModel 
    {
        [Newtonsoft.Json.JsonConstructor]
        public ApiExportTaskDataSourceModel(ApiStoredProcedureFailConstraintModel @fail_constraint, bool? @include_selligent_id_column, System.Collections.Generic.ICollection<ApiStoredProcedureParameterValueModel> @parameter_values, string @selligent_id_column, string @sp_name)
        {
            this.Include_selligent_id_column = @include_selligent_id_column;
            this.Selligent_id_column = @selligent_id_column;
            this.Sp_name = @sp_name;
            this.Fail_constraint = @fail_constraint;
            this.Parameter_values = @parameter_values;
        }
    
        [Newtonsoft.Json.JsonProperty("include_selligent_id_column", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Include_selligent_id_column { get; }
    
        [Newtonsoft.Json.JsonProperty("selligent_id_column", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Selligent_id_column { get; }
    
        [Newtonsoft.Json.JsonProperty("sp_name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Sp_name { get; }
    
        [Newtonsoft.Json.JsonProperty("fail_constraint", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ApiStoredProcedureFailConstraintModel Fail_constraint { get; }
    
        [Newtonsoft.Json.JsonProperty("parameter_values", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ApiStoredProcedureParameterValueModel> Parameter_values { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ApiExportTaskOutputModel 
    {
        [Newtonsoft.Json.JsonConstructor]
        public ApiExportTaskOutputModel(string @file_name, ApiExportTaskFileOptionsModel @file_options)
        {
            this.File_name = @file_name;
            this.File_options = @file_options;
        }
    
        [Newtonsoft.Json.JsonProperty("file_name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string File_name { get; }
    
        [Newtonsoft.Json.JsonProperty("file_options", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ApiExportTaskFileOptionsModel File_options { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ApiTaskAdvancedOptions 
    {
        [Newtonsoft.Json.JsonConstructor]
        public ApiTaskAdvancedOptions(bool? @include_sequence_number, ApiTaskAdvancedOptionsNo_data_handling? @no_data_handling, bool? @overwrite_existing_file, int? @sequence_number)
        {
            this.Include_sequence_number = @include_sequence_number;
            this.Sequence_number = @sequence_number;
            this.Overwrite_existing_file = @overwrite_existing_file;
            this.No_data_handling = @no_data_handling;
        }
    
        [Newtonsoft.Json.JsonProperty("include_sequence_number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Include_sequence_number { get; }
    
        [Newtonsoft.Json.JsonProperty("sequence_number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Sequence_number { get; }
    
        [Newtonsoft.Json.JsonProperty("overwrite_existing_file", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Overwrite_existing_file { get; }
    
        [Newtonsoft.Json.JsonProperty("no_data_handling", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ApiTaskAdvancedOptionsNo_data_handling? No_data_handling { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ApiTriggerFileModel 
    {
        [Newtonsoft.Json.JsonConstructor]
        public ApiTriggerFileModel(ApiExportTaskDataSourceModel @data_source, string @extension, ApiExportTaskFileOptionsModel @file_options)
        {
            this.Data_source = @data_source;
            this.Extension = @extension;
            this.File_options = @file_options;
        }
    
        [Newtonsoft.Json.JsonProperty("data_source", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ApiExportTaskDataSourceModel Data_source { get; }
    
        [Newtonsoft.Json.JsonProperty("extension", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Extension { get; }
    
        [Newtonsoft.Json.JsonProperty("file_options", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ApiExportTaskFileOptionsModel File_options { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ApiZipAndEncryptModel 
    {
        [Newtonsoft.Json.JsonConstructor]
        public ApiZipAndEncryptModel(ApiZipAndEncryptModelMode? @mode, ApiPgpEncryptionModel @pgp_encryption, ApiZipArchiveModel @zip_archive)
        {
            this.Mode = @mode;
            this.Zip_archive = @zip_archive;
            this.Pgp_encryption = @pgp_encryption;
        }
    
        [Newtonsoft.Json.JsonProperty("mode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ApiZipAndEncryptModelMode? Mode { get; }
    
        [Newtonsoft.Json.JsonProperty("zip_archive", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ApiZipArchiveModel Zip_archive { get; }
    
        [Newtonsoft.Json.JsonProperty("pgp_encryption", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ApiPgpEncryptionModel Pgp_encryption { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ApiScheduleModel 
    {
        [Newtonsoft.Json.JsonConstructor]
        public ApiScheduleModel(System.Collections.Generic.ICollection<int> @days, System.DateTimeOffset? @end_date, System.Collections.Generic.ICollection<int> @hours, int @period, ApiScheduleModelSchedule_type @schedule_type, System.DateTimeOffset? @start_date, string @start_time)
        {
            this.Start_date = @start_date;
            this.End_date = @end_date;
            this.Schedule_type = @schedule_type;
            this.Hours = @hours;
            this.Days = @days;
            this.Start_time = @start_time;
            this.Period = @period;
        }
    
        [Newtonsoft.Json.JsonProperty("start_date", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? Start_date { get; }
    
        [Newtonsoft.Json.JsonProperty("end_date", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? End_date { get; }
    
        [Newtonsoft.Json.JsonProperty("schedule_type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ApiScheduleModelSchedule_type Schedule_type { get; }
    
        [Newtonsoft.Json.JsonProperty("hours", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<int> Hours { get; }
    
        [Newtonsoft.Json.JsonProperty("days", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<int> Days { get; }
    
        [Newtonsoft.Json.JsonProperty("start_time", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Start_time { get; }
    
        [Newtonsoft.Json.JsonProperty("period", Required = Newtonsoft.Json.Required.Always)]
        public int Period { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ApiNotificationModel 
    {
        [Newtonsoft.Json.JsonConstructor]
        public ApiNotificationModel(System.Collections.Generic.ICollection<string> @emails, System.Collections.Generic.ICollection<string> @groups, bool? @include_process_details, ApiNotificationModelType @type)
        {
            this.Type = @type;
            this.Groups = @groups;
            this.Emails = @emails;
            this.Include_process_details = @include_process_details;
        }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ApiNotificationModelType Type { get; }
    
        [Newtonsoft.Json.JsonProperty("groups", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Groups { get; }
    
        [Newtonsoft.Json.JsonProperty("emails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Emails { get; }
    
        [Newtonsoft.Json.JsonProperty("include_process_details", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Include_process_details { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ApiStoredProcedureFailConstraintModel 
    {
        [Newtonsoft.Json.JsonConstructor]
        public ApiStoredProcedureFailConstraintModel(ApiStoredProcedureFailConstraintModelOperator @operator, int @value)
        {
            this.Operator = @operator;
            this.Value = @value;
        }
    
        [Newtonsoft.Json.JsonProperty("operator", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ApiStoredProcedureFailConstraintModelOperator Operator { get; }
    
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        public int Value { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ApiStoredProcedureParameterValueModel 
    {
        [Newtonsoft.Json.JsonConstructor]
        public ApiStoredProcedureParameterValueModel(string @name, string @value)
        {
            this.Name = @name;
            this.Value = @value;
        }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; }
    
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Value { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ApiExportTaskFileOptionsModel 
    {
        [Newtonsoft.Json.JsonConstructor]
        public ApiExportTaskFileOptionsModel(string @delimiter, ApiExportTaskFileOptionsModelEncoding? @encoding, bool? @first_line_has_column_names, ApiExportTaskFileOptionsModelLine_break? @line_break, int? @max_file_size, bool? @skip_bom, bool? @use_text_quotes)
        {
            this.Skip_bom = @skip_bom;
            this.Encoding = @encoding;
            this.Delimiter = @delimiter;
            this.Use_text_quotes = @use_text_quotes;
            this.First_line_has_column_names = @first_line_has_column_names;
            this.Max_file_size = @max_file_size;
            this.Line_break = @line_break;
        }
    
        [Newtonsoft.Json.JsonProperty("skip_bom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Skip_bom { get; }
    
        [Newtonsoft.Json.JsonProperty("encoding", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ApiExportTaskFileOptionsModelEncoding? Encoding { get; }
    
        [Newtonsoft.Json.JsonProperty("delimiter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Delimiter { get; }
    
        [Newtonsoft.Json.JsonProperty("use_text_quotes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Use_text_quotes { get; }
    
        [Newtonsoft.Json.JsonProperty("first_line_has_column_names", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? First_line_has_column_names { get; }
    
        [Newtonsoft.Json.JsonProperty("max_file_size", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Max_file_size { get; }
    
        [Newtonsoft.Json.JsonProperty("line_break", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ApiExportTaskFileOptionsModelLine_break? Line_break { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ApiZipArchiveModel 
    {
        [Newtonsoft.Json.JsonConstructor]
        public ApiZipArchiveModel(string @file_name, bool? @generate_file_name)
        {
            this.Generate_file_name = @generate_file_name;
            this.File_name = @file_name;
        }
    
        [Newtonsoft.Json.JsonProperty("generate_file_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Generate_file_name { get; }
    
        [Newtonsoft.Json.JsonProperty("file_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string File_name { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ApiPgpEncryptionModel 
    {
        [Newtonsoft.Json.JsonConstructor]
        public ApiPgpEncryptionModel(string @recipient)
        {
            this.Recipient = @recipient;
        }
    
        [Newtonsoft.Json.JsonProperty("recipient", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Recipient { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Create_export_task_success_example_response 
    {
        [Newtonsoft.Json.JsonConstructor]
        public Create_export_task_success_example_response(string @message, Create_export_task_success_example_responseResult_code? @result_code)
        {
            this.Result_code = @result_code;
            this.Message = @message;
        }
    
        [Newtonsoft.Json.JsonProperty("result_code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Create_export_task_success_example_responseResult_code? Result_code { get; }
    
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Create_export_task_failed_example_response 
    {
        [Newtonsoft.Json.JsonConstructor]
        public Create_export_task_failed_example_response(System.Collections.Generic.ICollection<Error_model> @errors, string @message, Create_export_task_failed_example_responseResult_code? @result_code)
        {
            this.Errors = @errors;
            this.Result_code = @result_code;
            this.Message = @message;
        }
    
        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Error_model> Errors { get; }
    
        [Newtonsoft.Json.JsonProperty("result_code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Create_export_task_failed_example_responseResult_code? Result_code { get; }
    
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CreateImportTaskApiRequestModel 
    {
        [Newtonsoft.Json.JsonConstructor]
        public CreateImportTaskApiRequestModel(string @api_name, System.Collections.Generic.ICollection<ApiColumnMappingModel> @column_mapping, ApiImportTaskDataProcessingModel @data_processing, string @description, ApiImportTaskDestinationModel @destination, string @file_descriptor, ApiImportTaskFileOptionsModel @file_options, CreateImportTaskApiRequestModelFile_type? @file_type, string @name, System.Collections.Generic.ICollection<ApiNotificationModel> @notifications, ApiImportTaskAdvancedOptionsModel @options, ApiProcessingFoldersModel @processing_folders, ApiRejectManagementModel @reject_management, ApiScheduleModel @schedule, int? @scheduler, string @source, string @subfolder, System.Collections.Generic.ICollection<string> @tags, string @trigger_journey_after_execution, ApiUnzipAndDecryptModel @unzip_and_decrypt)
        {
            this.Source = @source;
            this.Subfolder = @subfolder;
            this.Options = @options;
            this.File_type = @file_type;
            this.File_options = @file_options;
            this.Column_mapping = @column_mapping;
            this.File_descriptor = @file_descriptor;
            this.Processing_folders = @processing_folders;
            this.Unzip_and_decrypt = @unzip_and_decrypt;
            this.Destination = @destination;
            this.Data_processing = @data_processing;
            this.Reject_management = @reject_management;
            this.Name = @name;
            this.Description = @description;
            this.Tags = @tags;
            this.Api_name = @api_name;
            this.Scheduler = @scheduler;
            this.Schedule = @schedule;
            this.Notifications = @notifications;
            this.Trigger_journey_after_execution = @trigger_journey_after_execution;
        }
    
        [Newtonsoft.Json.JsonProperty("source", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Source { get; }
    
        [Newtonsoft.Json.JsonProperty("subfolder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Subfolder { get; }
    
        [Newtonsoft.Json.JsonProperty("options", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ApiImportTaskAdvancedOptionsModel Options { get; }
    
        [Newtonsoft.Json.JsonProperty("file_type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CreateImportTaskApiRequestModelFile_type? File_type { get; }
    
        [Newtonsoft.Json.JsonProperty("file_options", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ApiImportTaskFileOptionsModel File_options { get; }
    
        [Newtonsoft.Json.JsonProperty("column_mapping", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ApiColumnMappingModel> Column_mapping { get; }
    
        [Newtonsoft.Json.JsonProperty("file_descriptor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string File_descriptor { get; }
    
        [Newtonsoft.Json.JsonProperty("processing_folders", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ApiProcessingFoldersModel Processing_folders { get; }
    
        [Newtonsoft.Json.JsonProperty("unzip_and_decrypt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ApiUnzipAndDecryptModel Unzip_and_decrypt { get; }
    
        [Newtonsoft.Json.JsonProperty("destination", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public ApiImportTaskDestinationModel Destination { get; }
    
        [Newtonsoft.Json.JsonProperty("data_processing", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ApiImportTaskDataProcessingModel Data_processing { get; }
    
        [Newtonsoft.Json.JsonProperty("reject_management", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ApiRejectManagementModel Reject_management { get; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; }
    
        [Newtonsoft.Json.JsonProperty("tags", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Tags { get; }
    
        [Newtonsoft.Json.JsonProperty("api_name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Api_name { get; }
    
        [Newtonsoft.Json.JsonProperty("scheduler", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Scheduler { get; }
    
        [Newtonsoft.Json.JsonProperty("schedule", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ApiScheduleModel Schedule { get; }
    
        [Newtonsoft.Json.JsonProperty("notifications", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<ApiNotificationModel> Notifications { get; }
    
        [Newtonsoft.Json.JsonProperty("trigger_journey_after_execution", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Trigger_journey_after_execution { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ApiImportTaskAdvancedOptionsModel 
    {
        [Newtonsoft.Json.JsonConstructor]
        public ApiImportTaskAdvancedOptionsModel(bool? @allow_multiple_imports, bool? @delete_after_processing, bool? @fail_if_empty_file, bool? @fail_if_no_file, string @file_filter, ApiImportTaskAdvancedOptionsModelInvalid_data_handling? @invalid_data_handling, bool? @process_files_one_by_one, string @trigger_file)
        {
            this.File_filter = @file_filter;
            this.Trigger_file = @trigger_file;
            this.Allow_multiple_imports = @allow_multiple_imports;
            this.Fail_if_no_file = @fail_if_no_file;
            this.Fail_if_empty_file = @fail_if_empty_file;
            this.Delete_after_processing = @delete_after_processing;
            this.Process_files_one_by_one = @process_files_one_by_one;
            this.Invalid_data_handling = @invalid_data_handling;
        }
    
        [Newtonsoft.Json.JsonProperty("file_filter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string File_filter { get; }
    
        [Newtonsoft.Json.JsonProperty("trigger_file", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Trigger_file { get; }
    
        [Newtonsoft.Json.JsonProperty("allow_multiple_imports", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Allow_multiple_imports { get; }
    
        [Newtonsoft.Json.JsonProperty("fail_if_no_file", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Fail_if_no_file { get; }
    
        [Newtonsoft.Json.JsonProperty("fail_if_empty_file", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Fail_if_empty_file { get; }
    
        [Newtonsoft.Json.JsonProperty("delete_after_processing", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Delete_after_processing { get; }
    
        [Newtonsoft.Json.JsonProperty("process_files_one_by_one", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Process_files_one_by_one { get; }
    
        [Newtonsoft.Json.JsonProperty("invalid_data_handling", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ApiImportTaskAdvancedOptionsModelInvalid_data_handling? Invalid_data_handling { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ApiImportTaskFileOptionsModel 
    {
        [Newtonsoft.Json.JsonConstructor]
        public ApiImportTaskFileOptionsModel(bool? @check_md5, string @delimiter, ApiImportTaskFileOptionsModelEncoding? @encoding, bool? @first_line_has_column_names, ApiImportTaskFileOptionsModelLine_break? @line_break, int? @max_column_count, int? @max_file_size, string @root_node, int? @rows_to_skip, string @sheet_name, bool? @use_text_quotes)
        {
            this.Check_md5 = @check_md5;
            this.Max_column_count = @max_column_count;
            this.Sheet_name = @sheet_name;
            this.Rows_to_skip = @rows_to_skip;
            this.Root_node = @root_node;
            this.Encoding = @encoding;
            this.Delimiter = @delimiter;
            this.Use_text_quotes = @use_text_quotes;
            this.First_line_has_column_names = @first_line_has_column_names;
            this.Max_file_size = @max_file_size;
            this.Line_break = @line_break;
        }
    
        [Newtonsoft.Json.JsonProperty("check_md5", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Check_md5 { get; }
    
        [Newtonsoft.Json.JsonProperty("max_column_count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Max_column_count { get; }
    
        [Newtonsoft.Json.JsonProperty("sheet_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sheet_name { get; }
    
        [Newtonsoft.Json.JsonProperty("rows_to_skip", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Rows_to_skip { get; }
    
        [Newtonsoft.Json.JsonProperty("root_node", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Root_node { get; }
    
        [Newtonsoft.Json.JsonProperty("encoding", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ApiImportTaskFileOptionsModelEncoding? Encoding { get; }
    
        [Newtonsoft.Json.JsonProperty("delimiter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Delimiter { get; }
    
        [Newtonsoft.Json.JsonProperty("use_text_quotes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Use_text_quotes { get; }
    
        [Newtonsoft.Json.JsonProperty("first_line_has_column_names", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? First_line_has_column_names { get; }
    
        [Newtonsoft.Json.JsonProperty("max_file_size", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Max_file_size { get; }
    
        [Newtonsoft.Json.JsonProperty("line_break", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ApiImportTaskFileOptionsModelLine_break? Line_break { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ApiColumnMappingModel 
    {
        [Newtonsoft.Json.JsonConstructor]
        public ApiColumnMappingModel(int? @length, string @name, ApiColumnMappingModelType @type)
        {
            this.Name = @name;
            this.Type = @type;
            this.Length = @length;
        }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ApiColumnMappingModelType Type { get; }
    
        [Newtonsoft.Json.JsonProperty("length", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Length { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ApiProcessingFoldersModel 
    {
        [Newtonsoft.Json.JsonConstructor]
        public ApiProcessingFoldersModel(string @completed, string @failed, string @processing)
        {
            this.Processing = @processing;
            this.Completed = @completed;
            this.Failed = @failed;
        }
    
        [Newtonsoft.Json.JsonProperty("processing", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Processing { get; }
    
        [Newtonsoft.Json.JsonProperty("completed", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Completed { get; }
    
        [Newtonsoft.Json.JsonProperty("failed", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Failed { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ApiUnzipAndDecryptModel 
    {
        [Newtonsoft.Json.JsonConstructor]
        public ApiUnzipAndDecryptModel(ApiUnzipAndDecryptModelMode @mode, ApiPgpDecryptionModel @pgp_decryption, string @unzip_filter)
        {
            this.Mode = @mode;
            this.Unzip_filter = @unzip_filter;
            this.Pgp_decryption = @pgp_decryption;
        }
    
        [Newtonsoft.Json.JsonProperty("mode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ApiUnzipAndDecryptModelMode Mode { get; }
    
        [Newtonsoft.Json.JsonProperty("unzip_filter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Unzip_filter { get; }
    
        [Newtonsoft.Json.JsonProperty("pgp_decryption", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ApiPgpDecryptionModel Pgp_decryption { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ApiImportTaskDestinationModel 
    {
        [Newtonsoft.Json.JsonConstructor]
        public ApiImportTaskDestinationModel(bool? @include_user_identified_column, string @table_name)
        {
            this.Table_name = @table_name;
            this.Include_user_identified_column = @include_user_identified_column;
        }
    
        [Newtonsoft.Json.JsonProperty("table_name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Table_name { get; }
    
        [Newtonsoft.Json.JsonProperty("include_user_identified_column", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Include_user_identified_column { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ApiImportTaskDataProcessingModel 
    {
        [Newtonsoft.Json.JsonConstructor]
        public ApiImportTaskDataProcessingModel(ApiStoredProcedureFailConstraintModel @fail_constraint, System.Collections.Generic.ICollection<ApiStoredProcedureParameterValueModel> @parameter_values, string @sp_name)
        {
            this.Sp_name = @sp_name;
            this.Fail_constraint = @fail_constraint;
            this.Parameter_values = @parameter_values;
        }
    
        [Newtonsoft.Json.JsonProperty("sp_name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Sp_name { get; }
    
        [Newtonsoft.Json.JsonProperty("fail_constraint", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ApiStoredProcedureFailConstraintModel Fail_constraint { get; }
    
        [Newtonsoft.Json.JsonProperty("parameter_values", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ApiStoredProcedureParameterValueModel> Parameter_values { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ApiRejectManagementModel 
    {
        [Newtonsoft.Json.JsonConstructor]
        public ApiRejectManagementModel(bool? @create_when_no_records_rejected, string @destination, ApiImportTaskFileOptionsModel @file_options, string @subfolder)
        {
            this.Destination = @destination;
            this.Subfolder = @subfolder;
            this.File_options = @file_options;
            this.Create_when_no_records_rejected = @create_when_no_records_rejected;
        }
    
        [Newtonsoft.Json.JsonProperty("destination", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Destination { get; }
    
        [Newtonsoft.Json.JsonProperty("subfolder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Subfolder { get; }
    
        [Newtonsoft.Json.JsonProperty("file_options", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ApiImportTaskFileOptionsModel File_options { get; }
    
        [Newtonsoft.Json.JsonProperty("create_when_no_records_rejected", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Create_when_no_records_rejected { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ApiPgpDecryptionModel 
    {
        [Newtonsoft.Json.JsonConstructor]
        public ApiPgpDecryptionModel(string @passphrase, string @recipient)
        {
            this.Recipient = @recipient;
            this.Passphrase = @passphrase;
        }
    
        [Newtonsoft.Json.JsonProperty("recipient", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Recipient { get; }
    
        [Newtonsoft.Json.JsonProperty("passphrase", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Passphrase { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CreateSqlTaskApiRequestModel 
    {
        [Newtonsoft.Json.JsonConstructor]
        public CreateSqlTaskApiRequestModel(string @api_name, string @description, string @name, System.Collections.Generic.ICollection<ApiNotificationModel> @notifications, System.Collections.Generic.ICollection<ApiSqlTaskStoredProcedureModel> @procedures, ApiScheduleModel @schedule, int? @scheduler, System.Collections.Generic.ICollection<string> @tags, string @trigger_journey_after_execution)
        {
            this.Procedures = @procedures;
            this.Name = @name;
            this.Description = @description;
            this.Tags = @tags;
            this.Api_name = @api_name;
            this.Scheduler = @scheduler;
            this.Schedule = @schedule;
            this.Notifications = @notifications;
            this.Trigger_journey_after_execution = @trigger_journey_after_execution;
        }
    
        [Newtonsoft.Json.JsonProperty("procedures", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<ApiSqlTaskStoredProcedureModel> Procedures { get; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; }
    
        [Newtonsoft.Json.JsonProperty("tags", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Tags { get; }
    
        [Newtonsoft.Json.JsonProperty("api_name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Api_name { get; }
    
        [Newtonsoft.Json.JsonProperty("scheduler", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Scheduler { get; }
    
        [Newtonsoft.Json.JsonProperty("schedule", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ApiScheduleModel Schedule { get; }
    
        [Newtonsoft.Json.JsonProperty("notifications", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<ApiNotificationModel> Notifications { get; }
    
        [Newtonsoft.Json.JsonProperty("trigger_journey_after_execution", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Trigger_journey_after_execution { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ApiSqlTaskStoredProcedureModel 
    {
        [Newtonsoft.Json.JsonConstructor]
        public ApiSqlTaskStoredProcedureModel(ApiStoredProcedureFailConstraintModel @fail_constraint, int @id, int? @on_fail, int? @on_success, System.Collections.Generic.ICollection<ApiStoredProcedureParameterValueModel> @parameter_values, string @sp_name)
        {
            this.Id = @id;
            this.On_success = @on_success;
            this.On_fail = @on_fail;
            this.Sp_name = @sp_name;
            this.Fail_constraint = @fail_constraint;
            this.Parameter_values = @parameter_values;
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public int Id { get; }
    
        [Newtonsoft.Json.JsonProperty("on_success", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? On_success { get; }
    
        [Newtonsoft.Json.JsonProperty("on_fail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? On_fail { get; }
    
        [Newtonsoft.Json.JsonProperty("sp_name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Sp_name { get; }
    
        [Newtonsoft.Json.JsonProperty("fail_constraint", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ApiStoredProcedureFailConstraintModel Fail_constraint { get; }
    
        [Newtonsoft.Json.JsonProperty("parameter_values", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ApiStoredProcedureParameterValueModel> Parameter_values { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CreateBatchTaskApiRequestModel 
    {
        [Newtonsoft.Json.JsonConstructor]
        public CreateBatchTaskApiRequestModel(string @api_name, string @description, string @name, System.Collections.Generic.ICollection<ApiNotificationModel> @notifications, ApiScheduleModel @schedule, int? @scheduler, System.Collections.Generic.ICollection<string> @tags, System.Collections.Generic.ICollection<ApiBatchTaskModel> @tasks, string @trigger_journey_after_execution)
        {
            this.Tasks = @tasks;
            this.Name = @name;
            this.Description = @description;
            this.Tags = @tags;
            this.Api_name = @api_name;
            this.Scheduler = @scheduler;
            this.Schedule = @schedule;
            this.Notifications = @notifications;
            this.Trigger_journey_after_execution = @trigger_journey_after_execution;
        }
    
        [Newtonsoft.Json.JsonProperty("tasks", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<ApiBatchTaskModel> Tasks { get; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; }
    
        [Newtonsoft.Json.JsonProperty("tags", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Tags { get; }
    
        [Newtonsoft.Json.JsonProperty("api_name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Api_name { get; }
    
        [Newtonsoft.Json.JsonProperty("scheduler", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Scheduler { get; }
    
        [Newtonsoft.Json.JsonProperty("schedule", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ApiScheduleModel Schedule { get; }
    
        [Newtonsoft.Json.JsonProperty("notifications", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<ApiNotificationModel> Notifications { get; }
    
        [Newtonsoft.Json.JsonProperty("trigger_journey_after_execution", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Trigger_journey_after_execution { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ApiBatchTaskModel 
    {
        [Newtonsoft.Json.JsonConstructor]
        public ApiBatchTaskModel(string @api_name, int @id, int @on_fail, int @on_success, ApiBatchTaskModelType? @type)
        {
            this.Id = @id;
            this.Api_name = @api_name;
            this.On_success = @on_success;
            this.On_fail = @on_fail;
            this.Type = @type;
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public int Id { get; }
    
        [Newtonsoft.Json.JsonProperty("api_name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Api_name { get; }
    
        [Newtonsoft.Json.JsonProperty("on_success", Required = Newtonsoft.Json.Required.Always)]
        public int On_success { get; }
    
        [Newtonsoft.Json.JsonProperty("on_fail", Required = Newtonsoft.Json.Required.Always)]
        public int On_fail { get; }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ApiBatchTaskModelType? Type { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Request 
    {
        [Newtonsoft.Json.JsonConstructor]
        public Request(System.Collections.Generic.ICollection<Item> @items)
        {
            this.Items = @items;
        }
    
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Item> Items { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Item 
    {
        [Newtonsoft.Json.JsonConstructor]
        public Item(object @data, System.Collections.Generic.ICollection<DataSelectionModel> @dtsdata, string @email, string @language, System.Collections.Generic.ICollection<Scope> @profile, string @recipient)
        {
            this.Email = @email;
            this.Recipient = @recipient;
            this.Profile = @profile;
            this.Language = @language;
            this.Data = @data;
            this.Dtsdata = @dtsdata;
        }
    
        /// <summary>[Deprecated] Use recipient instead.</summary>
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Email { get; }
    
        /// <summary>The recipient to which the content should be sent.</summary>
        [Newtonsoft.Json.JsonProperty("recipient", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Recipient { get; }
    
        /// <summary>A list of scopes that should be updated on the user profile.
        /// Currently only the MASTER scope is supported.</summary>
        [Newtonsoft.Json.JsonProperty("profile", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Scope> Profile { get; }
    
        /// <summary>The language in which the email should be sent.</summary>
        [Newtonsoft.Json.JsonProperty("language", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Language { get; }
    
        /// <summary>Optionally you can provide a json data object that should be merged into the email.
        /// The data object should contain a list of fields that are defined on the transactional execution.
        /// An example of an object is:
        /// data : {
        ///   "requiredStringField" : "requiredFieldValue",
        ///   "requiredFloatField" : 3.14,
        ///   "optionalStringField" : "some optional data",
        ///   "requiredArrayField" : [
        ///     {
        ///       "requiredNumericField" : 666,
        ///       "optionalBooleanField" : false
        ///     }
        ///   ]
        /// }</summary>
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Data { get; }
    
        [Newtonsoft.Json.JsonProperty("dtsdata", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<DataSelectionModel> Dtsdata { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Scope 
    {
        [Newtonsoft.Json.JsonConstructor]
        public Scope(object @fields, string @scope)
        {
            this.Scope1 = @scope;
            this.Fields = @fields;
        }
    
        /// <summary>Scope name, e.g.: MASTER</summary>
        [Newtonsoft.Json.JsonProperty("scope", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Scope1 { get; }
    
        /// <summary>A key/value list of key/vaue</summary>
        [Newtonsoft.Json.JsonProperty("fields", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Fields { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DataSelectionModel 
    {
        [Newtonsoft.Json.JsonConstructor]
        public DataSelectionModel(System.Collections.Generic.ICollection<System.Collections.Generic.IDictionary<string, object>> @content, string @data_selection)
        {
            this.Data_selection = @data_selection;
            this.Content = @content;
        }
    
        [Newtonsoft.Json.JsonProperty("data_selection", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Data_selection { get; }
    
        [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<System.Collections.Generic.IDictionary<string, object>> Content { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Update_profile_and_send_transactional_response 
    {
        [Newtonsoft.Json.JsonConstructor]
        public Update_profile_and_send_transactional_response(System.Collections.Generic.ICollection<Error_model> @errors, System.Collections.Generic.ICollection<Profile_update_and_transactional_send_response_data_message> @messages, System.Collections.Generic.ICollection<Update_profile_and_transactional_send_response_data> @response_data, Update_profile_and_send_transactional_responseResult_code? @result_code)
        {
            this.Result_code = @result_code;
            this.Errors = @errors;
            this.Response_data = @response_data;
            this.Messages = @messages;
        }
    
        [Newtonsoft.Json.JsonProperty("result_code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Update_profile_and_send_transactional_responseResult_code? Result_code { get; }
    
        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Error_model> Errors { get; }
    
        [Newtonsoft.Json.JsonProperty("response_data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Update_profile_and_transactional_send_response_data> Response_data { get; }
    
        [Newtonsoft.Json.JsonProperty("messages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Profile_update_and_transactional_send_response_data_message> Messages { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Update_profile_and_transactional_send_response_data 
    {
        [Newtonsoft.Json.JsonConstructor]
        public Update_profile_and_transactional_send_response_data(object @data, System.Collections.Generic.ICollection<Error_model> @errors, string @language, System.Collections.Generic.ICollection<Profile_update_and_transactional_send_response_data_message> @messages, string @recipient, Update_profile_and_transactional_send_response_dataResult_code? @result_code)
        {
            this.Data = @data;
            this.Recipient = @recipient;
            this.Language = @language;
            this.Result_code = @result_code;
            this.Errors = @errors;
            this.Messages = @messages;
        }
    
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Data { get; }
    
        [Newtonsoft.Json.JsonProperty("recipient", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Recipient { get; }
    
        [Newtonsoft.Json.JsonProperty("language", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Language { get; }
    
        [Newtonsoft.Json.JsonProperty("result_code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Update_profile_and_transactional_send_response_dataResult_code? Result_code { get; }
    
        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Error_model> Errors { get; }
    
        [Newtonsoft.Json.JsonProperty("messages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Profile_update_and_transactional_send_response_data_message> Messages { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Profile_update_and_transactional_send_response_data_message 
    {
        [Newtonsoft.Json.JsonConstructor]
        public Profile_update_and_transactional_send_response_data_message(string @id)
        {
            this.Id = @id;
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Transactionals 
    {
        [Newtonsoft.Json.JsonConstructor]
        public Transactionals(System.Collections.Generic.ICollection<Journey6> @journeys)
        {
            this.Journeys = @journeys;
        }
    
        /// <summary>A collection of journeys</summary>
        [Newtonsoft.Json.JsonProperty("journeys", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Journey6> Journeys { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Journey6 
    {
        [Newtonsoft.Json.JsonConstructor]
        public Journey6(string @api_name, Journey6Type? @type)
        {
            this.Api_name = @api_name;
            this.Type = @type;
        }
    
        [Newtonsoft.Json.JsonProperty("api_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Api_name { get; }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Journey6Type? Type { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class TransactionalResponseModel 
    {
        [Newtonsoft.Json.JsonConstructor]
        public TransactionalResponseModel(string @api_name, TransactionalResponseModelLaunch_state? @launch_state, string @name, TransactionalResponseModelType? @type)
        {
            this.Api_name = @api_name;
            this.Name = @name;
            this.Launch_state = @launch_state;
            this.Type = @type;
        }
    
        [Newtonsoft.Json.JsonProperty("api_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Api_name { get; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; }
    
        [Newtonsoft.Json.JsonProperty("launch_state", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TransactionalResponseModelLaunch_state? Launch_state { get; }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TransactionalResponseModelType? Type { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SendTransactionalRequestModel 
    {
        [Newtonsoft.Json.JsonConstructor]
        public SendTransactionalRequestModel(System.Collections.Generic.ICollection<TransactionalSendRequestDataModel> @items)
        {
            this.Items = @items;
        }
    
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TransactionalSendRequestDataModel> Items { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class TransactionalSendRequestDataModel 
    {
        [Newtonsoft.Json.JsonConstructor]
        public TransactionalSendRequestDataModel(object @data, System.Collections.Generic.ICollection<DataSelectionModel> @dtsdata, string @email, string @language, string @recipient)
        {
            this.Email = @email;
            this.Recipient = @recipient;
            this.Language = @language;
            this.Data = @data;
            this.Dtsdata = @dtsdata;
        }
    
        /// <summary>[Deprecated] Use recipient instead.</summary>
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Email { get; }
    
        /// <summary>The Recipient to which the content should be sent.</summary>
        [Newtonsoft.Json.JsonProperty("recipient", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Recipient { get; }
    
        /// <summary>The language in which the email should be sent.</summary>
        [Newtonsoft.Json.JsonProperty("language", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Language { get; }
    
        /// <summary>Optionally you can provide a json data object that should be merged into the email.
        /// The data object should contain a list of fields that are defined on the transactional execution.
        /// An example of an object is:
        /// data : {
        ///   "requiredStringField" : "requiredFieldValue",
        ///   "requiredFloatField" : 3.14,
        ///   "optionalStringField" : "some optional data",
        ///   "requiredArrayField" : [
        ///     {
        ///       "requiredNumericField" : 666,
        ///       "optionalBooleanField" : false
        ///     }
        ///   ]
        /// }</summary>
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Data { get; }
    
        [Newtonsoft.Json.JsonProperty("dtsdata", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<DataSelectionModel> Dtsdata { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Send_transactional_response 
    {
        [Newtonsoft.Json.JsonConstructor]
        public Send_transactional_response(System.Collections.Generic.ICollection<Error_model> @errors, System.Collections.Generic.ICollection<Transactional_send_response_data_message> @messages, System.Collections.Generic.ICollection<Transactional_send_response_data> @response_data, Send_transactional_responseResult_code? @result_code)
        {
            this.Result_code = @result_code;
            this.Errors = @errors;
            this.Response_data = @response_data;
            this.Messages = @messages;
        }
    
        [Newtonsoft.Json.JsonProperty("result_code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Send_transactional_responseResult_code? Result_code { get; }
    
        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Error_model> Errors { get; }
    
        [Newtonsoft.Json.JsonProperty("response_data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Transactional_send_response_data> Response_data { get; }
    
        [Newtonsoft.Json.JsonProperty("messages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Transactional_send_response_data_message> Messages { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Transactional_send_response_data 
    {
        [Newtonsoft.Json.JsonConstructor]
        public Transactional_send_response_data(object @data, System.Collections.Generic.ICollection<Error_model> @errors, string @language, string @recipient, Transactional_send_response_dataResult_code? @result_code)
        {
            this.Data = @data;
            this.Recipient = @recipient;
            this.Language = @language;
            this.Result_code = @result_code;
            this.Errors = @errors;
        }
    
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Data { get; }
    
        [Newtonsoft.Json.JsonProperty("recipient", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Recipient { get; }
    
        [Newtonsoft.Json.JsonProperty("language", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Language { get; }
    
        [Newtonsoft.Json.JsonProperty("result_code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Transactional_send_response_dataResult_code? Result_code { get; }
    
        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Error_model> Errors { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Transactional_send_response_data_message 
    {
        [Newtonsoft.Json.JsonConstructor]
        public Transactional_send_response_data_message(string @id)
        {
            this.Id = @id;
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Transactional_status_response 
    {
        [Newtonsoft.Json.JsonConstructor]
        public Transactional_status_response(string @id, int? @status, string @status_message)
        {
            this.Id = @id;
            this.Status = @status;
            this.Status_message = @status_message;
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; }
    
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Status { get; }
    
        [Newtonsoft.Json.JsonProperty("status_message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Status_message { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Transactional_status_by_id_response 
    {
        [Newtonsoft.Json.JsonConstructor]
        public Transactional_status_by_id_response(string @id, int? @status, string @status_message)
        {
            this.Id = @id;
            this.Status = @status;
            this.Status_message = @status_message;
        }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; }
    
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Status { get; }
    
        [Newtonsoft.Json.JsonProperty("status_message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Status_message { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Send_transactional_bulk_response 
    {
        [Newtonsoft.Json.JsonConstructor]
        public Send_transactional_bulk_response(System.Collections.Generic.ICollection<Error_model> @errors, Send_transactional_bulk_responseResult_code? @result_code)
        {
            this.Result_code = @result_code;
            this.Errors = @errors;
        }
    
        [Newtonsoft.Json.JsonProperty("result_code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Send_transactional_bulk_responseResult_code? Result_code { get; }
    
        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Error_model> Errors { get; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Delete_journey_success_responseResult_code
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Failed")]
        Failed = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Succeeded")]
        Succeeded = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PartiallySucceeded")]
        PartiallySucceeded = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ValidationFailed")]
        ValidationFailed = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Create_sms_content_success_responseResult_code
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Failed")]
        Failed = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Succeeded")]
        Succeeded = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PartiallySucceeded")]
        PartiallySucceeded = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ValidationFailed")]
        ValidationFailed = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Create_sms_content_failed_responseResult_code
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Failed")]
        Failed = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Succeeded")]
        Succeeded = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PartiallySucceeded")]
        PartiallySucceeded = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ValidationFailed")]
        ValidationFailed = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum CreateMobileMessagePropertyModelDistribution_type
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MobilePushAndInApp")]
        MobilePushAndInApp = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"InApp")]
        InApp = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"InAppIfPushUnavailable")]
        InAppIfPushUnavailable = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MobilePush")]
        MobilePush = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum CreateMobileMessagePropertyModelIn_app_content_type
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Text")]
        Text = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Url")]
        Url = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Image")]
        Image = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Page")]
        Page = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SmartBlock")]
        SmartBlock = 5,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Create_mobile_message_content_success_responseResult_code
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Failed")]
        Failed = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Succeeded")]
        Succeeded = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PartiallySucceeded")]
        PartiallySucceeded = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ValidationFailed")]
        ValidationFailed = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Create_mobile_message_content_failed_responseResult_code
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Failed")]
        Failed = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Succeeded")]
        Succeeded = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PartiallySucceeded")]
        PartiallySucceeded = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ValidationFailed")]
        ValidationFailed = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Create_page_content_success_responseResult_code
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Failed")]
        Failed = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Succeeded")]
        Succeeded = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PartiallySucceeded")]
        PartiallySucceeded = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ValidationFailed")]
        ValidationFailed = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Create_page_content_failed_responseResult_code
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Failed")]
        Failed = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Succeeded")]
        Succeeded = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PartiallySucceeded")]
        PartiallySucceeded = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ValidationFailed")]
        ValidationFailed = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Create_email_message_content_success_responseResult_code
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Failed")]
        Failed = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Succeeded")]
        Succeeded = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PartiallySucceeded")]
        PartiallySucceeded = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ValidationFailed")]
        ValidationFailed = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Create_email_message_content_failed_responseResult_code
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Failed")]
        Failed = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Succeeded")]
        Succeeded = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PartiallySucceeded")]
        PartiallySucceeded = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ValidationFailed")]
        ValidationFailed = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ContentDetailsResponseModelType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Email")]
        Email = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Page")]
        Page = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MobilePush")]
        MobilePush = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Sms")]
        Sms = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Delete_content_success_responseResult_code
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Failed")]
        Failed = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Succeeded")]
        Succeeded = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PartiallySucceeded")]
        PartiallySucceeded = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ValidationFailed")]
        ValidationFailed = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Trigger_journey_entry_point_responseResult_code
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Failed")]
        Failed = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Succeeded")]
        Succeeded = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PartiallySucceeded")]
        PartiallySucceeded = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ValidationFailed")]
        ValidationFailed = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Trigger_journey_entry_point_responseResult_type
    {
        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Content")]
        Content = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Redirect")]
        Redirect = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Validation")]
        Validation = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Error")]
        Error = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Trigger_journey_entry_point_failed_responseResult_code
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Failed")]
        Failed = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Succeeded")]
        Succeeded = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PartiallySucceeded")]
        PartiallySucceeded = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ValidationFailed")]
        ValidationFailed = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum LoadDataResponseModelResult_code
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Failed")]
        Failed = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Succeeded")]
        Succeeded = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PartiallySucceeded")]
        PartiallySucceeded = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ValidationFailed")]
        ValidationFailed = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum InvalidRecordModelValidation_code
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"InvalidFieldCount")]
        InvalidFieldCount = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MaxStringLengthExceeded")]
        MaxStringLengthExceeded = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"InvalidType")]
        InvalidType = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum SearchDataFilterDTOOperator
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EqualTo")]
        EqualTo = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NotEqualTo")]
        NotEqualTo = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"GreaterThan")]
        GreaterThan = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"GreaterThanOrEqualTo")]
        GreaterThanOrEqualTo = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LessThan")]
        LessThan = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LessThanOrEqualTo")]
        LessThanOrEqualTo = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Like")]
        Like = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IsNull")]
        IsNull = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IsNotNull")]
        IsNotNull = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IsEmpty")]
        IsEmpty = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IsNotEmpty")]
        IsNotEmpty = 11,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum SearchDataResponseModelResult_code
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Failed")]
        Failed = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Succeeded")]
        Succeeded = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PartiallySucceeded")]
        PartiallySucceeded = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ValidationFailed")]
        ValidationFailed = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum DeleteDataResponseModelResult_code
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Failed")]
        Failed = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Succeeded")]
        Succeeded = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PartiallySucceeded")]
        PartiallySucceeded = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ValidationFailed")]
        ValidationFailed = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Save_list_data_responsedResult_code
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Failed")]
        Failed = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Succeeded")]
        Succeeded = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PartiallySucceeded")]
        PartiallySucceeded = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ValidationFailed")]
        ValidationFailed = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Clear_static_segment_data_success_responseResult_code
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Failed")]
        Failed = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Succeeded")]
        Succeeded = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PartiallySucceeded")]
        PartiallySucceeded = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ValidationFailed")]
        ValidationFailed = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Clear_static_segment_data_failed_responseResult_code
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Failed")]
        Failed = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Succeeded")]
        Succeeded = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PartiallySucceeded")]
        PartiallySucceeded = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ValidationFailed")]
        ValidationFailed = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Delete_data_export_success_responseResult_code
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Failed")]
        Failed = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Succeeded")]
        Succeeded = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PartiallySucceeded")]
        PartiallySucceeded = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ValidationFailed")]
        ValidationFailed = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Delete_data_export_failed_responseResult_code
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Failed")]
        Failed = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Succeeded")]
        Succeeded = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PartiallySucceeded")]
        PartiallySucceeded = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ValidationFailed")]
        ValidationFailed = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Delete_data_import_success_responseResult_code
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Failed")]
        Failed = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Succeeded")]
        Succeeded = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PartiallySucceeded")]
        PartiallySucceeded = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ValidationFailed")]
        ValidationFailed = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Delete_data_import_failed_responseResult_code
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Failed")]
        Failed = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Succeeded")]
        Succeeded = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PartiallySucceeded")]
        PartiallySucceeded = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ValidationFailed")]
        ValidationFailed = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum JourneyType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"unknown")]
        Unknown = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"singlebatch")]
        Singlebatch = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"transactional")]
        Transactional = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ab")]
        Ab = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"recurring")]
        Recurring = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"custom")]
        Custom = 5,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum List_type
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Userlist")]
        Userlist = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Datalist")]
        Datalist = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DataSelectionList")]
        DataSelectionList = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Optionlist")]
        Optionlist = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Devicelist")]
        Devicelist = 5,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum CreateListRequestModelOptionlist_codetype
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Text")]
        Text = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Numeric")]
        Numeric = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum CreateListRequestModelType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Userlist")]
        Userlist = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Datalist")]
        Datalist = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DataSelectionList")]
        DataSelectionList = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Optionlist")]
        Optionlist = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Devicelist")]
        Devicelist = 5,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Create_list_success_responseResult_code
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Failed")]
        Failed = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Succeeded")]
        Succeeded = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PartiallySucceeded")]
        PartiallySucceeded = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ValidationFailed")]
        ValidationFailed = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Create_list_failed_responseResult_code
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Failed")]
        Failed = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Succeeded")]
        Succeeded = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PartiallySucceeded")]
        PartiallySucceeded = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ValidationFailed")]
        ValidationFailed = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ListDetailsResponseModelList_type
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Userlist")]
        Userlist = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Datalist")]
        Datalist = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DataSelectionList")]
        DataSelectionList = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Optionlist")]
        Optionlist = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Devicelist")]
        Devicelist = 5,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Get_list_details_email_qualityEmail_quality_type
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Defensive")]
        Defensive = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Normal")]
        Normal = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Aggressive")]
        Aggressive = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Custom")]
        Custom = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ApiEmailQualityModelType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Defensive")]
        Defensive = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Normal")]
        Normal = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Aggressive")]
        Aggressive = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Custom")]
        Custom = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Update_list_success_responseResult_code
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Failed")]
        Failed = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Succeeded")]
        Succeeded = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PartiallySucceeded")]
        PartiallySucceeded = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ValidationFailed")]
        ValidationFailed = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Update_list_failed_responseResult_code
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Failed")]
        Failed = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Succeeded")]
        Succeeded = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PartiallySucceeded")]
        PartiallySucceeded = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ValidationFailed")]
        ValidationFailed = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Delete_list_success_responseResult_code
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Failed")]
        Failed = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Succeeded")]
        Succeeded = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PartiallySucceeded")]
        PartiallySucceeded = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ValidationFailed")]
        ValidationFailed = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Delete_list_failed_responseResult_code
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Failed")]
        Failed = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Succeeded")]
        Succeeded = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PartiallySucceeded")]
        PartiallySucceeded = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ValidationFailed")]
        ValidationFailed = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum FieldContent
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Free")]
        Free = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Single")]
        Single = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Multi")]
        Multi = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ComputedNonPersisted")]
        ComputedNonPersisted = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ComputedPersisted")]
        ComputedPersisted = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Lookup")]
        Lookup = 6,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum FieldData_type
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Boolean")]
        Boolean = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Numeric")]
        Numeric = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Long")]
        Long = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Float")]
        Float = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Date")]
        Date = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DateTime")]
        DateTime = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Text")]
        Text = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LongText")]
        LongText = 8,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ListFieldDTOContent
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Free")]
        Free = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Single")]
        Single = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Multi")]
        Multi = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ComputedNonPersisted")]
        ComputedNonPersisted = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ComputedPersisted")]
        ComputedPersisted = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Lookup")]
        Lookup = 6,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ListFieldDTOData_type
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Boolean")]
        Boolean = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Numeric")]
        Numeric = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Long")]
        Long = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Float")]
        Float = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Date")]
        Date = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DateTime")]
        DateTime = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Text")]
        Text = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LongText")]
        LongText = 8,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Create_fields_success_responseResult_code
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Failed")]
        Failed = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Succeeded")]
        Succeeded = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PartiallySucceeded")]
        PartiallySucceeded = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ValidationFailed")]
        ValidationFailed = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Create_fields_failed_responseResult_code
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Failed")]
        Failed = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Succeeded")]
        Succeeded = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PartiallySucceeded")]
        PartiallySucceeded = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ValidationFailed")]
        ValidationFailed = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum UpdateListFieldRequestModelContent
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Free")]
        Free = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Single")]
        Single = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Multi")]
        Multi = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ComputedNonPersisted")]
        ComputedNonPersisted = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ComputedPersisted")]
        ComputedPersisted = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Lookup")]
        Lookup = 6,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Update_field_success_responseResult_code
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Failed")]
        Failed = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Succeeded")]
        Succeeded = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PartiallySucceeded")]
        PartiallySucceeded = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ValidationFailed")]
        ValidationFailed = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Update_field_failed_responseResult_code
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Failed")]
        Failed = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Succeeded")]
        Succeeded = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PartiallySucceeded")]
        PartiallySucceeded = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ValidationFailed")]
        ValidationFailed = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Delete_list_field_success_responseResult_code
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Failed")]
        Failed = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Succeeded")]
        Succeeded = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PartiallySucceeded")]
        PartiallySucceeded = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ValidationFailed")]
        ValidationFailed = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Delete_list_field_failed_responseResult_code
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Failed")]
        Failed = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Succeeded")]
        Succeeded = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PartiallySucceeded")]
        PartiallySucceeded = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ValidationFailed")]
        ValidationFailed = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum RelationType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"OneToOne")]
        OneToOne = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"OneToMany")]
        OneToMany = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ManyToOne")]
        ManyToOne = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum RelationDetailsDTOType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"OneToOne")]
        OneToOne = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"OneToMany")]
        OneToMany = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ManyToOne")]
        ManyToOne = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum RelationCustomFiltersDTOOperator
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EqualTo")]
        EqualTo = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NotEqualTo")]
        NotEqualTo = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"GreaterThan")]
        GreaterThan = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"GreaterThanOrEqualTo")]
        GreaterThanOrEqualTo = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LessThan")]
        LessThan = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LessThanOrEqualTo")]
        LessThanOrEqualTo = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Like")]
        Like = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IsNull")]
        IsNull = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IsNotNull")]
        IsNotNull = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IsEmpty")]
        IsEmpty = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IsNotEmpty")]
        IsNotEmpty = 11,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Create_list_relations_success_responseResult_code
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Failed")]
        Failed = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Succeeded")]
        Succeeded = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PartiallySucceeded")]
        PartiallySucceeded = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ValidationFailed")]
        ValidationFailed = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Create_list_relations_failed_responseResult_code
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Failed")]
        Failed = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Succeeded")]
        Succeeded = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PartiallySucceeded")]
        PartiallySucceeded = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ValidationFailed")]
        ValidationFailed = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum RelationDetailsModelRelation_type
    {
        [System.Runtime.Serialization.EnumMember(Value = @"OneToOne")]
        OneToOne = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"OneToMany")]
        OneToMany = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ManyToOne")]
        ManyToOne = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Get_list_relation_custome_filters_requestOperator
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EqualTo")]
        EqualTo = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NotEqualTo")]
        NotEqualTo = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"GreaterThan")]
        GreaterThan = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"GreaterThanOrEqualTo")]
        GreaterThanOrEqualTo = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LessThan")]
        LessThan = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LessThanOrEqualTo")]
        LessThanOrEqualTo = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Like")]
        Like = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IsNull")]
        IsNull = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IsNotNull")]
        IsNotNull = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IsEmpty")]
        IsEmpty = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IsNotEmpty")]
        IsNotEmpty = 11,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum UpdateListRelationRequestType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"OneToOne")]
        OneToOne = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"OneToMany")]
        OneToMany = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ManyToOne")]
        ManyToOne = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Update_list_relation_success_responseResult_code
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Failed")]
        Failed = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Succeeded")]
        Succeeded = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PartiallySucceeded")]
        PartiallySucceeded = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ValidationFailed")]
        ValidationFailed = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Update_list_relation_failed_responseResult_code
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Failed")]
        Failed = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Succeeded")]
        Succeeded = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PartiallySucceeded")]
        PartiallySucceeded = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ValidationFailed")]
        ValidationFailed = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Delete_list_relation_success_responseResult_code
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Failed")]
        Failed = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Succeeded")]
        Succeeded = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PartiallySucceeded")]
        PartiallySucceeded = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ValidationFailed")]
        ValidationFailed = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Delete_list_relation_failed_responseResult_code
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Failed")]
        Failed = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Succeeded")]
        Succeeded = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PartiallySucceeded")]
        PartiallySucceeded = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ValidationFailed")]
        ValidationFailed = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Delete_list_record_success_responseResult_code
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Failed")]
        Failed = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Succeeded")]
        Succeeded = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PartiallySucceeded")]
        PartiallySucceeded = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ValidationFailed")]
        ValidationFailed = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Delete_list__record_failed_responseResult_code
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Failed")]
        Failed = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Succeeded")]
        Succeeded = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PartiallySucceeded")]
        PartiallySucceeded = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ValidationFailed")]
        ValidationFailed = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Segment_type
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Dynamic")]
        Dynamic = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Static")]
        Static = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"External")]
        External = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum SegmentDetailsModelType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Dynamic")]
        Dynamic = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Static")]
        Static = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"External")]
        External = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Delete_segment_success_responseResult_code
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Failed")]
        Failed = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Succeeded")]
        Succeeded = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PartiallySucceeded")]
        PartiallySucceeded = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ValidationFailed")]
        ValidationFailed = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Delete_segment_failed_responseResult_code
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Failed")]
        Failed = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Succeeded")]
        Succeeded = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PartiallySucceeded")]
        PartiallySucceeded = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ValidationFailed")]
        ValidationFailed = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Create_segment_success_responseResult_code
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Failed")]
        Failed = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Succeeded")]
        Succeeded = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PartiallySucceeded")]
        PartiallySucceeded = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ValidationFailed")]
        ValidationFailed = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Create_segment_failed_responseResult_code
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Failed")]
        Failed = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Succeeded")]
        Succeeded = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PartiallySucceeded")]
        PartiallySucceeded = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ValidationFailed")]
        ValidationFailed = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Create_custom_event_success_example_responseResult_code
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Failed")]
        Failed = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Succeeded")]
        Succeeded = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PartiallySucceeded")]
        PartiallySucceeded = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ValidationFailed")]
        ValidationFailed = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Create_custom_event_failed_example_responseResult_code
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Failed")]
        Failed = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Succeeded")]
        Succeeded = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PartiallySucceeded")]
        PartiallySucceeded = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ValidationFailed")]
        ValidationFailed = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Delete_custom_event_success_responseResult_code
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Failed")]
        Failed = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Succeeded")]
        Succeeded = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PartiallySucceeded")]
        PartiallySucceeded = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ValidationFailed")]
        ValidationFailed = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Delete_custom_event_failed_responseResult_code
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Failed")]
        Failed = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Succeeded")]
        Succeeded = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PartiallySucceeded")]
        PartiallySucceeded = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ValidationFailed")]
        ValidationFailed = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Update_custom_event_success_example_responseResult_code
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Failed")]
        Failed = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Succeeded")]
        Succeeded = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PartiallySucceeded")]
        PartiallySucceeded = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ValidationFailed")]
        ValidationFailed = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Update_custom_event_failed_example_responseResult_code
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Failed")]
        Failed = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Succeeded")]
        Succeeded = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PartiallySucceeded")]
        PartiallySucceeded = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ValidationFailed")]
        ValidationFailed = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Retrieve_all_custom_event_fields_success_responseContent
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Free")]
        Free = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Single")]
        Single = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Multi")]
        Multi = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ComputedNonPersisted")]
        ComputedNonPersisted = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ComputedPersisted")]
        ComputedPersisted = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Lookup")]
        Lookup = 6,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Retrieve_all_custom_event_fields_success_responseData_type
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Boolean")]
        Boolean = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Numeric")]
        Numeric = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Long")]
        Long = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Float")]
        Float = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Date")]
        Date = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DateTime")]
        DateTime = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Text")]
        Text = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LongText")]
        LongText = 8,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum CustomEventFieldDTOContent
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Free")]
        Free = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Single")]
        Single = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Multi")]
        Multi = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ComputedNonPersisted")]
        ComputedNonPersisted = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ComputedPersisted")]
        ComputedPersisted = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Lookup")]
        Lookup = 6,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum CustomEventFieldDTOData_type
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Boolean")]
        Boolean = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Numeric")]
        Numeric = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Long")]
        Long = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Float")]
        Float = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Date")]
        Date = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DateTime")]
        DateTime = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Text")]
        Text = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LongText")]
        LongText = 8,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Create_custom_event_fields_success_responseResult_code
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Failed")]
        Failed = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Succeeded")]
        Succeeded = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PartiallySucceeded")]
        PartiallySucceeded = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ValidationFailed")]
        ValidationFailed = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Create_custom_event_fields_failed_responseResult_code
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Failed")]
        Failed = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Succeeded")]
        Succeeded = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PartiallySucceeded")]
        PartiallySucceeded = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ValidationFailed")]
        ValidationFailed = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Delete_custom_event_field_success_responseResult_code
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Failed")]
        Failed = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Succeeded")]
        Succeeded = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PartiallySucceeded")]
        PartiallySucceeded = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ValidationFailed")]
        ValidationFailed = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Delete_custom_event_field_failed_responseResult_code
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Failed")]
        Failed = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Succeeded")]
        Succeeded = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PartiallySucceeded")]
        PartiallySucceeded = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ValidationFailed")]
        ValidationFailed = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum UpdateCustomEventFieldRequestModelContent
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Free")]
        Free = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Single")]
        Single = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Multi")]
        Multi = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ComputedNonPersisted")]
        ComputedNonPersisted = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ComputedPersisted")]
        ComputedPersisted = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Lookup")]
        Lookup = 6,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Update_custom_event_field_success_responseResult_code
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Failed")]
        Failed = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Succeeded")]
        Succeeded = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PartiallySucceeded")]
        PartiallySucceeded = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ValidationFailed")]
        ValidationFailed = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Update_custom_event_field_failed_responseResult_code
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Failed")]
        Failed = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Succeeded")]
        Succeeded = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PartiallySucceeded")]
        PartiallySucceeded = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ValidationFailed")]
        ValidationFailed = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Retrieve_all_mediums_success_responseType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Ftp")]
        Ftp = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Repository")]
        Repository = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Url")]
        Url = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Retrieve_all_mediums_failed_responseResult_code
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Failed")]
        Failed = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Succeeded")]
        Succeeded = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PartiallySucceeded")]
        PartiallySucceeded = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ValidationFailed")]
        ValidationFailed = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum CreateFtpMediumApiRequestModelFtp_type
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Ftps")]
        Ftps = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"FtpsImplicit")]
        FtpsImplicit = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Sftp")]
        Sftp = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Create_medium_success_example_responseResult_code
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Failed")]
        Failed = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Succeeded")]
        Succeeded = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PartiallySucceeded")]
        PartiallySucceeded = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ValidationFailed")]
        ValidationFailed = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Create_medium_failed_example_responseResult_code
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Failed")]
        Failed = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Succeeded")]
        Succeeded = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PartiallySucceeded")]
        PartiallySucceeded = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ValidationFailed")]
        ValidationFailed = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum UpdateFtpMediumApiRequestModelFtp_type
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Ftps")]
        Ftps = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"FtpsImplicit")]
        FtpsImplicit = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Sftp")]
        Sftp = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Update_medium_success_responseResult_code
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Failed")]
        Failed = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Succeeded")]
        Succeeded = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PartiallySucceeded")]
        PartiallySucceeded = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ValidationFailed")]
        ValidationFailed = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Update_medium_failed_responseResult_code
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Failed")]
        Failed = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Succeeded")]
        Succeeded = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PartiallySucceeded")]
        PartiallySucceeded = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ValidationFailed")]
        ValidationFailed = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Delete_medium_success_responseResult_code
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Failed")]
        Failed = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Succeeded")]
        Succeeded = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PartiallySucceeded")]
        PartiallySucceeded = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ValidationFailed")]
        ValidationFailed = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum FtpMediumModelFtp_type
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Ftps")]
        Ftps = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"FtpsImplicit")]
        FtpsImplicit = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Sftp")]
        Sftp = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum FtpMediumModelType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Ftp")]
        Ftp = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Repository")]
        Repository = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Url")]
        Url = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum RepositoryMediumModelData_exchange_type
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Selligent")]
        Selligent = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DataOut")]
        DataOut = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DataIn")]
        DataIn = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum RepositoryMediumModelType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Ftp")]
        Ftp = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Repository")]
        Repository = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Url")]
        Url = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum UrlMediumModelType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Ftp")]
        Ftp = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Repository")]
        Repository = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Url")]
        Url = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Create_notification_group_success_example_responseResult_code
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Failed")]
        Failed = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Succeeded")]
        Succeeded = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PartiallySucceeded")]
        PartiallySucceeded = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ValidationFailed")]
        ValidationFailed = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Create_notification_group_failed_example_responseResult_code
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Failed")]
        Failed = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Succeeded")]
        Succeeded = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PartiallySucceeded")]
        PartiallySucceeded = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ValidationFailed")]
        ValidationFailed = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Update_notification_group_success_example_responseResult_code
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Failed")]
        Failed = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Succeeded")]
        Succeeded = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PartiallySucceeded")]
        PartiallySucceeded = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ValidationFailed")]
        ValidationFailed = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Update_notification_group_failed_example_responseResult_code
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Failed")]
        Failed = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Succeeded")]
        Succeeded = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PartiallySucceeded")]
        PartiallySucceeded = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ValidationFailed")]
        ValidationFailed = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Delete_notification_group_success_responseResult_code
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Failed")]
        Failed = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Succeeded")]
        Succeeded = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PartiallySucceeded")]
        PartiallySucceeded = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ValidationFailed")]
        ValidationFailed = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Delete_notification_group_failed_responseResult_code
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Failed")]
        Failed = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Succeeded")]
        Succeeded = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PartiallySucceeded")]
        PartiallySucceeded = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ValidationFailed")]
        ValidationFailed = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Journey2Type
    {
        [System.Runtime.Serialization.EnumMember(Value = @"unknown")]
        Unknown = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"singlebatch")]
        Singlebatch = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"transactional")]
        Transactional = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ab")]
        Ab = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"recurring")]
        Recurring = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"custom")]
        Custom = 5,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum CreateJourneyModelLaunch_state
    {
        [System.Runtime.Serialization.EnumMember(Value = @"none")]
        None = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"launch")]
        Launch = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"schedule")]
        Schedule = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum CreateJourneyModelType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"unknown")]
        Unknown = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"singlebatch")]
        Singlebatch = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"transactional")]
        Transactional = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ab")]
        Ab = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"recurring")]
        Recurring = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"custom")]
        Custom = 5,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Journey3Launch_state
    {
        [System.Runtime.Serialization.EnumMember(Value = @"none")]
        None = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"launch")]
        Launch = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"schedule")]
        Schedule = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Journey3Type
    {
        [System.Runtime.Serialization.EnumMember(Value = @"unknown")]
        Unknown = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"singlebatch")]
        Singlebatch = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"transactional")]
        Transactional = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ab")]
        Ab = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"recurring")]
        Recurring = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"custom")]
        Custom = 5,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Journey4Launch_state
    {
        [System.Runtime.Serialization.EnumMember(Value = @"none")]
        None = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"launch")]
        Launch = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"schedule")]
        Schedule = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Journey4Type
    {
        [System.Runtime.Serialization.EnumMember(Value = @"unknown")]
        Unknown = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"singlebatch")]
        Singlebatch = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"transactional")]
        Transactional = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ab")]
        Ab = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"recurring")]
        Recurring = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"custom")]
        Custom = 5,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum JourneyDTOLaunch_state
    {
        [System.Runtime.Serialization.EnumMember(Value = @"none")]
        None = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"launch")]
        Launch = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"schedule")]
        Schedule = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum JourneyDTOType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"unknown")]
        Unknown = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"singlebatch")]
        Singlebatch = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"transactional")]
        Transactional = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ab")]
        Ab = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"recurring")]
        Recurring = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"custom")]
        Custom = 5,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Journey5Launch_state
    {
        [System.Runtime.Serialization.EnumMember(Value = @"none")]
        None = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"launch")]
        Launch = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"schedule")]
        Schedule = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Journey5Type
    {
        [System.Runtime.Serialization.EnumMember(Value = @"unknown")]
        Unknown = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"singlebatch")]
        Singlebatch = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"transactional")]
        Transactional = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ab")]
        Ab = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"recurring")]
        Recurring = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"custom")]
        Custom = 5,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum LaunchSingleBatchRequestModelLaunch_state
    {
        [System.Runtime.Serialization.EnumMember(Value = @"none")]
        None = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"launch")]
        Launch = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"schedule")]
        Schedule = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Launch_single_batch_journey_success_responseResult_code
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Failed")]
        Failed = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Succeeded")]
        Succeeded = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PartiallySucceeded")]
        PartiallySucceeded = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ValidationFailed")]
        ValidationFailed = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Launch_single_batch_journey_failed_responseResult_code
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Failed")]
        Failed = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Succeeded")]
        Succeeded = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PartiallySucceeded")]
        PartiallySucceeded = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ValidationFailed")]
        ValidationFailed = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Cancel_single_batch_journey_success_responseResult_code
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Failed")]
        Failed = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Succeeded")]
        Succeeded = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PartiallySucceeded")]
        PartiallySucceeded = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ValidationFailed")]
        ValidationFailed = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Cancel_single_batch_journey_failed_responseResult_code
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Failed")]
        Failed = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Succeeded")]
        Succeeded = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PartiallySucceeded")]
        PartiallySucceeded = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ValidationFailed")]
        ValidationFailed = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum StoredprocedureType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"General")]
        General = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Bounce")]
        Bounce = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum CreateStoredProcedureModelType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"General")]
        General = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Bounce")]
        Bounce = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Create_stored_procedure_success_responseResult_code
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Failed")]
        Failed = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Succeeded")]
        Succeeded = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PartiallySucceeded")]
        PartiallySucceeded = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ValidationFailed")]
        ValidationFailed = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Create_stored_procedure_failed_responseResult_code
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Failed")]
        Failed = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Succeeded")]
        Succeeded = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PartiallySucceeded")]
        PartiallySucceeded = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ValidationFailed")]
        ValidationFailed = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum StoredProcedureDetailsResponseModelType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"General")]
        General = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Bounce")]
        Bounce = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Delete_stored_procedure_success_responseResult_code
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Failed")]
        Failed = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Succeeded")]
        Succeeded = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PartiallySucceeded")]
        PartiallySucceeded = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ValidationFailed")]
        ValidationFailed = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Delete_stored_procedure_failed_responseResult_code
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Failed")]
        Failed = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Succeeded")]
        Succeeded = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PartiallySucceeded")]
        PartiallySucceeded = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ValidationFailed")]
        ValidationFailed = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Update_stored_procedure_success_responseResult_code
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Failed")]
        Failed = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Succeeded")]
        Succeeded = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PartiallySucceeded")]
        PartiallySucceeded = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ValidationFailed")]
        ValidationFailed = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Update_stored_procedure_failed_responseResult_code
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Failed")]
        Failed = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Succeeded")]
        Succeeded = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PartiallySucceeded")]
        PartiallySucceeded = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ValidationFailed")]
        ValidationFailed = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum TaskType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Sql")]
        Sql = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Export")]
        Export = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Import")]
        Import = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Batch")]
        Batch = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum TaskDetailsResponseModelExecution_status
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Failed")]
        Failed = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Success")]
        Success = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Running")]
        Running = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum TaskDetailsResponseModelType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Sql")]
        Sql = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Export")]
        Export = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Import")]
        Import = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Batch")]
        Batch = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Delete_task_success_responseResult_code
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Failed")]
        Failed = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Succeeded")]
        Succeeded = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PartiallySucceeded")]
        PartiallySucceeded = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ValidationFailed")]
        ValidationFailed = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Delete_task_failed_responseResult_code
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Failed")]
        Failed = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Succeeded")]
        Succeeded = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PartiallySucceeded")]
        PartiallySucceeded = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ValidationFailed")]
        ValidationFailed = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Enable_task_response_exampleResult_code
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Failed")]
        Failed = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Succeeded")]
        Succeeded = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PartiallySucceeded")]
        PartiallySucceeded = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ValidationFailed")]
        ValidationFailed = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Run_task_success_responseResult_code
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Failed")]
        Failed = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Succeeded")]
        Succeeded = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PartiallySucceeded")]
        PartiallySucceeded = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ValidationFailed")]
        ValidationFailed = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Run_task_failed_responseResult_code
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Failed")]
        Failed = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Succeeded")]
        Succeeded = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PartiallySucceeded")]
        PartiallySucceeded = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ValidationFailed")]
        ValidationFailed = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Taskaction
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Run")]
        Run = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Enable")]
        Enable = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Disable")]
        Disable = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Disable_task_response_exampleResult_code
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Failed")]
        Failed = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Succeeded")]
        Succeeded = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PartiallySucceeded")]
        PartiallySucceeded = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ValidationFailed")]
        ValidationFailed = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ApiTaskAdvancedOptionsNo_data_handling
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Continue")]
        Continue = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Skip")]
        Skip = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Fail")]
        Fail = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ApiZipAndEncryptModelMode
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Zip")]
        Zip = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Encrypt")]
        Encrypt = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ZipAndEncrypt")]
        ZipAndEncrypt = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EncryptAndZip")]
        EncryptAndZip = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ApiScheduleModelSchedule_type
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Daily")]
        Daily = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Weekly")]
        Weekly = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Monthly")]
        Monthly = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Periodically")]
        Periodically = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ApiNotificationModelType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NoFile")]
        NoFile = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Error")]
        Error = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Failure")]
        Failure = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Complete")]
        Complete = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ApiStoredProcedureFailConstraintModelOperator
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EqualTo")]
        EqualTo = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NotEqualTo")]
        NotEqualTo = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"GreaterThan")]
        GreaterThan = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"GreaterThanOrEqualTo")]
        GreaterThanOrEqualTo = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LessThan")]
        LessThan = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LessThanOrEqualTo")]
        LessThanOrEqualTo = 6,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ApiExportTaskFileOptionsModelEncoding
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BIG5")]
        BIG5 = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CP866")]
        CP866 = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CP875")]
        CP875 = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EUC_JP")]
        EUC_JP = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EUC_KR")]
        EUC_KR = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"GB2312")]
        GB2312 = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IBM037")]
        IBM037 = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IBM1026")]
        IBM1026 = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IBM290")]
        IBM290 = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IBM437")]
        IBM437 = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IBM500")]
        IBM500 = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IBM737")]
        IBM737 = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IBM775")]
        IBM775 = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IBM850")]
        IBM850 = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IBM852")]
        IBM852 = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IBM855")]
        IBM855 = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IBM857")]
        IBM857 = 17,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IBM860")]
        IBM860 = 18,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IBM861")]
        IBM861 = 19,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IBM863")]
        IBM863 = 20,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IBM865")]
        IBM865 = 21,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IBM869")]
        IBM869 = 22,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ISO_2022_JP")]
        ISO_2022_JP = 23,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ISO_8859_1")]
        ISO_8859_1 = 24,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ISO_8859_13")]
        ISO_8859_13 = 25,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ISO_8859_15")]
        ISO_8859_15 = 26,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ISO_8859_2")]
        ISO_8859_2 = 27,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ISO_8859_4")]
        ISO_8859_4 = 28,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ISO_8859_5")]
        ISO_8859_5 = 29,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ISO_8859_7")]
        ISO_8859_7 = 30,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ISO_8859_9")]
        ISO_8859_9 = 31,
    
        [System.Runtime.Serialization.EnumMember(Value = @"JOHAB")]
        JOHAB = 32,
    
        [System.Runtime.Serialization.EnumMember(Value = @"KOI8_R")]
        KOI8_R = 33,
    
        [System.Runtime.Serialization.EnumMember(Value = @"KOI8_U")]
        KOI8_U = 34,
    
        [System.Runtime.Serialization.EnumMember(Value = @"KS_C_5601_1987")]
        KS_C_5601_1987 = 35,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MACINTOSH")]
        MACINTOSH = 36,
    
        [System.Runtime.Serialization.EnumMember(Value = @"UNICODEFFFE")]
        UNICODEFFFE = 37,
    
        [System.Runtime.Serialization.EnumMember(Value = @"US_ASCII")]
        US_ASCII = 38,
    
        [System.Runtime.Serialization.EnumMember(Value = @"UTF_16")]
        UTF_16 = 39,
    
        [System.Runtime.Serialization.EnumMember(Value = @"UTF_8")]
        UTF_8 = 40,
    
        [System.Runtime.Serialization.EnumMember(Value = @"WINDOWS_1250")]
        WINDOWS_1250 = 41,
    
        [System.Runtime.Serialization.EnumMember(Value = @"WINDOWS_1251")]
        WINDOWS_1251 = 42,
    
        [System.Runtime.Serialization.EnumMember(Value = @"WINDOWS_1252")]
        WINDOWS_1252 = 43,
    
        [System.Runtime.Serialization.EnumMember(Value = @"WINDOWS_1253")]
        WINDOWS_1253 = 44,
    
        [System.Runtime.Serialization.EnumMember(Value = @"WINDOWS_1254")]
        WINDOWS_1254 = 45,
    
        [System.Runtime.Serialization.EnumMember(Value = @"WINDOWS_1255")]
        WINDOWS_1255 = 46,
    
        [System.Runtime.Serialization.EnumMember(Value = @"WINDOWS_1256")]
        WINDOWS_1256 = 47,
    
        [System.Runtime.Serialization.EnumMember(Value = @"WINDOWS_1257")]
        WINDOWS_1257 = 48,
    
        [System.Runtime.Serialization.EnumMember(Value = @"WINDOWS_1258")]
        WINDOWS_1258 = 49,
    
        [System.Runtime.Serialization.EnumMember(Value = @"WINDOWS_874")]
        WINDOWS_874 = 50,
    
        [System.Runtime.Serialization.EnumMember(Value = @"X_CHINESE_CNS")]
        X_CHINESE_CNS = 51,
    
        [System.Runtime.Serialization.EnumMember(Value = @"X_CP20261")]
        X_CP20261 = 52,
    
        [System.Runtime.Serialization.EnumMember(Value = @"X_CP20936")]
        X_CP20936 = 53,
    
        [System.Runtime.Serialization.EnumMember(Value = @"X_CP20949")]
        X_CP20949 = 54,
    
        [System.Runtime.Serialization.EnumMember(Value = @"X_CP21027")]
        X_CP21027 = 55,
    
        [System.Runtime.Serialization.EnumMember(Value = @"X_MAC_CE")]
        X_MAC_CE = 56,
    
        [System.Runtime.Serialization.EnumMember(Value = @"X_MAC_CHINESESIMP")]
        X_MAC_CHINESESIMP = 57,
    
        [System.Runtime.Serialization.EnumMember(Value = @"X_MAC_CHINESETRAD")]
        X_MAC_CHINESETRAD = 58,
    
        [System.Runtime.Serialization.EnumMember(Value = @"X_MAC_CROATIAN")]
        X_MAC_CROATIAN = 59,
    
        [System.Runtime.Serialization.EnumMember(Value = @"X_MAC_CYRILLIC")]
        X_MAC_CYRILLIC = 60,
    
        [System.Runtime.Serialization.EnumMember(Value = @"X_MAC_GREEK")]
        X_MAC_GREEK = 61,
    
        [System.Runtime.Serialization.EnumMember(Value = @"X_MAC_ICELANDIC")]
        X_MAC_ICELANDIC = 62,
    
        [System.Runtime.Serialization.EnumMember(Value = @"X_MAC_JAPANESE")]
        X_MAC_JAPANESE = 63,
    
        [System.Runtime.Serialization.EnumMember(Value = @"X_MAC_KOREAN")]
        X_MAC_KOREAN = 64,
    
        [System.Runtime.Serialization.EnumMember(Value = @"X_MAC_ROMANIAN")]
        X_MAC_ROMANIAN = 65,
    
        [System.Runtime.Serialization.EnumMember(Value = @"X_MAC_TURKISH")]
        X_MAC_TURKISH = 66,
    
        [System.Runtime.Serialization.EnumMember(Value = @"X_MAC_UKRAINIAN")]
        X_MAC_UKRAINIAN = 67,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ApiExportTaskFileOptionsModelLine_break
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Windows")]
        Windows = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Unix")]
        Unix = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Create_export_task_success_example_responseResult_code
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Failed")]
        Failed = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Succeeded")]
        Succeeded = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PartiallySucceeded")]
        PartiallySucceeded = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ValidationFailed")]
        ValidationFailed = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Create_export_task_failed_example_responseResult_code
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Failed")]
        Failed = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Succeeded")]
        Succeeded = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PartiallySucceeded")]
        PartiallySucceeded = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ValidationFailed")]
        ValidationFailed = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum CreateImportTaskApiRequestModelFile_type
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Delimited")]
        Delimited = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Json")]
        Json = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Xml")]
        Xml = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Excel")]
        Excel = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Rss")]
        Rss = 5,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ApiImportTaskAdvancedOptionsModelInvalid_data_handling
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Stop")]
        Stop = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Keep")]
        Keep = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Skip")]
        Skip = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Reject")]
        Reject = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ApiImportTaskFileOptionsModelEncoding
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BIG5")]
        BIG5 = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CP866")]
        CP866 = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CP875")]
        CP875 = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EUC_JP")]
        EUC_JP = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EUC_KR")]
        EUC_KR = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"GB2312")]
        GB2312 = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IBM037")]
        IBM037 = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IBM1026")]
        IBM1026 = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IBM290")]
        IBM290 = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IBM437")]
        IBM437 = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IBM500")]
        IBM500 = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IBM737")]
        IBM737 = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IBM775")]
        IBM775 = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IBM850")]
        IBM850 = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IBM852")]
        IBM852 = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IBM855")]
        IBM855 = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IBM857")]
        IBM857 = 17,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IBM860")]
        IBM860 = 18,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IBM861")]
        IBM861 = 19,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IBM863")]
        IBM863 = 20,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IBM865")]
        IBM865 = 21,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IBM869")]
        IBM869 = 22,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ISO_2022_JP")]
        ISO_2022_JP = 23,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ISO_8859_1")]
        ISO_8859_1 = 24,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ISO_8859_13")]
        ISO_8859_13 = 25,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ISO_8859_15")]
        ISO_8859_15 = 26,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ISO_8859_2")]
        ISO_8859_2 = 27,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ISO_8859_4")]
        ISO_8859_4 = 28,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ISO_8859_5")]
        ISO_8859_5 = 29,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ISO_8859_7")]
        ISO_8859_7 = 30,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ISO_8859_9")]
        ISO_8859_9 = 31,
    
        [System.Runtime.Serialization.EnumMember(Value = @"JOHAB")]
        JOHAB = 32,
    
        [System.Runtime.Serialization.EnumMember(Value = @"KOI8_R")]
        KOI8_R = 33,
    
        [System.Runtime.Serialization.EnumMember(Value = @"KOI8_U")]
        KOI8_U = 34,
    
        [System.Runtime.Serialization.EnumMember(Value = @"KS_C_5601_1987")]
        KS_C_5601_1987 = 35,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MACINTOSH")]
        MACINTOSH = 36,
    
        [System.Runtime.Serialization.EnumMember(Value = @"UNICODEFFFE")]
        UNICODEFFFE = 37,
    
        [System.Runtime.Serialization.EnumMember(Value = @"US_ASCII")]
        US_ASCII = 38,
    
        [System.Runtime.Serialization.EnumMember(Value = @"UTF_16")]
        UTF_16 = 39,
    
        [System.Runtime.Serialization.EnumMember(Value = @"UTF_8")]
        UTF_8 = 40,
    
        [System.Runtime.Serialization.EnumMember(Value = @"WINDOWS_1250")]
        WINDOWS_1250 = 41,
    
        [System.Runtime.Serialization.EnumMember(Value = @"WINDOWS_1251")]
        WINDOWS_1251 = 42,
    
        [System.Runtime.Serialization.EnumMember(Value = @"WINDOWS_1252")]
        WINDOWS_1252 = 43,
    
        [System.Runtime.Serialization.EnumMember(Value = @"WINDOWS_1253")]
        WINDOWS_1253 = 44,
    
        [System.Runtime.Serialization.EnumMember(Value = @"WINDOWS_1254")]
        WINDOWS_1254 = 45,
    
        [System.Runtime.Serialization.EnumMember(Value = @"WINDOWS_1255")]
        WINDOWS_1255 = 46,
    
        [System.Runtime.Serialization.EnumMember(Value = @"WINDOWS_1256")]
        WINDOWS_1256 = 47,
    
        [System.Runtime.Serialization.EnumMember(Value = @"WINDOWS_1257")]
        WINDOWS_1257 = 48,
    
        [System.Runtime.Serialization.EnumMember(Value = @"WINDOWS_1258")]
        WINDOWS_1258 = 49,
    
        [System.Runtime.Serialization.EnumMember(Value = @"WINDOWS_874")]
        WINDOWS_874 = 50,
    
        [System.Runtime.Serialization.EnumMember(Value = @"X_CHINESE_CNS")]
        X_CHINESE_CNS = 51,
    
        [System.Runtime.Serialization.EnumMember(Value = @"X_CP20261")]
        X_CP20261 = 52,
    
        [System.Runtime.Serialization.EnumMember(Value = @"X_CP20936")]
        X_CP20936 = 53,
    
        [System.Runtime.Serialization.EnumMember(Value = @"X_CP20949")]
        X_CP20949 = 54,
    
        [System.Runtime.Serialization.EnumMember(Value = @"X_CP21027")]
        X_CP21027 = 55,
    
        [System.Runtime.Serialization.EnumMember(Value = @"X_MAC_CE")]
        X_MAC_CE = 56,
    
        [System.Runtime.Serialization.EnumMember(Value = @"X_MAC_CHINESESIMP")]
        X_MAC_CHINESESIMP = 57,
    
        [System.Runtime.Serialization.EnumMember(Value = @"X_MAC_CHINESETRAD")]
        X_MAC_CHINESETRAD = 58,
    
        [System.Runtime.Serialization.EnumMember(Value = @"X_MAC_CROATIAN")]
        X_MAC_CROATIAN = 59,
    
        [System.Runtime.Serialization.EnumMember(Value = @"X_MAC_CYRILLIC")]
        X_MAC_CYRILLIC = 60,
    
        [System.Runtime.Serialization.EnumMember(Value = @"X_MAC_GREEK")]
        X_MAC_GREEK = 61,
    
        [System.Runtime.Serialization.EnumMember(Value = @"X_MAC_ICELANDIC")]
        X_MAC_ICELANDIC = 62,
    
        [System.Runtime.Serialization.EnumMember(Value = @"X_MAC_JAPANESE")]
        X_MAC_JAPANESE = 63,
    
        [System.Runtime.Serialization.EnumMember(Value = @"X_MAC_KOREAN")]
        X_MAC_KOREAN = 64,
    
        [System.Runtime.Serialization.EnumMember(Value = @"X_MAC_ROMANIAN")]
        X_MAC_ROMANIAN = 65,
    
        [System.Runtime.Serialization.EnumMember(Value = @"X_MAC_TURKISH")]
        X_MAC_TURKISH = 66,
    
        [System.Runtime.Serialization.EnumMember(Value = @"X_MAC_UKRAINIAN")]
        X_MAC_UKRAINIAN = 67,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ApiImportTaskFileOptionsModelLine_break
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Windows")]
        Windows = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Unix")]
        Unix = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ApiColumnMappingModelType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Boolean")]
        Boolean = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Numeric")]
        Numeric = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Long")]
        Long = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Float")]
        Float = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Date")]
        Date = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DateTime")]
        DateTime = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Text")]
        Text = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LongText")]
        LongText = 8,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ApiUnzipAndDecryptModelMode
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Unzip")]
        Unzip = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Decrypt")]
        Decrypt = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"UnzipAndDecrypt")]
        UnzipAndDecrypt = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DecryptAndUnzip")]
        DecryptAndUnzip = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ApiBatchTaskModelType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Task")]
        Task = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Import")]
        Import = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Export")]
        Export = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Update_profile_and_send_transactional_responseResult_code
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Failed")]
        Failed = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Succeeded")]
        Succeeded = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PartiallySucceeded")]
        PartiallySucceeded = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ValidationFailed")]
        ValidationFailed = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Update_profile_and_transactional_send_response_dataResult_code
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Failed")]
        Failed = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Succeeded")]
        Succeeded = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PartiallySucceeded")]
        PartiallySucceeded = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ValidationFailed")]
        ValidationFailed = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Journey6Type
    {
        [System.Runtime.Serialization.EnumMember(Value = @"unknown")]
        Unknown = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"singlebatch")]
        Singlebatch = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"transactional")]
        Transactional = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ab")]
        Ab = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"recurring")]
        Recurring = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"custom")]
        Custom = 5,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum TransactionalResponseModelLaunch_state
    {
        [System.Runtime.Serialization.EnumMember(Value = @"none")]
        None = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"launch")]
        Launch = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"schedule")]
        Schedule = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum TransactionalResponseModelType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"unknown")]
        Unknown = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"singlebatch")]
        Singlebatch = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"transactional")]
        Transactional = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ab")]
        Ab = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"recurring")]
        Recurring = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"custom")]
        Custom = 5,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Send_transactional_responseResult_code
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Failed")]
        Failed = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Succeeded")]
        Succeeded = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PartiallySucceeded")]
        PartiallySucceeded = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ValidationFailed")]
        ValidationFailed = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Transactional_send_response_dataResult_code
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Failed")]
        Failed = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Succeeded")]
        Succeeded = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PartiallySucceeded")]
        PartiallySucceeded = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ValidationFailed")]
        ValidationFailed = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Send_transactional_bulk_responseResult_code
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Failed")]
        Failed = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Succeeded")]
        Succeeded = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PartiallySucceeded")]
        PartiallySucceeded = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ValidationFailed")]
        ValidationFailed = 3,
    
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.1.6.0 (NJsonSchema v10.0.28.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException) 
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + response.Substring(0, response.Length >= 512 ? 512 : response.Length), innerException)
        {
            StatusCode = statusCode;
            Response = response; 
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.1.6.0 (NJsonSchema v10.0.28.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ApiException<TResult> : ApiException
    {
        public TResult Result { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException) 
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108